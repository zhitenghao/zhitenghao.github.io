<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的第一个servlet程序</title>
      <link href="/2022/05164856.html"/>
      <url>/2022/05164856.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础</title>
      <link href="/2022/051348395.html"/>
      <url>/2022/051348395.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-html-amp-CSS-amp-JavaScript"><a href="#第一章-html-amp-CSS-amp-JavaScript" class="headerlink" title="第一章 html&amp;CSS&amp;JavaScript"></a>第一章 html&amp;CSS&amp;JavaScript</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- lang="en"表示中文，lang="en"表示英文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 当前页面使用 uft-8 字符集 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- alert(), 是js提供的一个警告框函数，它可以接受任意参数，参数就是警告框的函数信息 --></span>    <span class="token comment" spellcheck="true">&lt;!-- onclick 点击事件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>你好<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>宋体<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>    <span class="token entity" title="&lt;">&amp;lt;</span>br<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token comment" spellcheck="true">&lt;!-- 连续的空白 只留一个空格 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://vip.iqiyi.com/cps_pc.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爱奇艺<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>c++<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>htmlTest.html<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 跳转到iframe框架中显示，target 和 name 配合使用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://vip.iqiyi.com/cps_pc.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>爱奇艺<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="用户登录练习"><a href="#用户登录练习" class="headerlink" title="用户登录练习"></a>用户登录练习</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- lang="en"表示中文，lang="en"表示英文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 当前页面使用 uft-8 字符集 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        get提交方式请求参数        http://localhost:8080/        ?        action=login        &amp; 这是连字符        username=%E7%AE%97%E6%B3%95        &amp;        password=123123132        &amp;        sex=on 可以用value属性设置该值        &amp;        hobby=on&amp;hobby=on 可以用value属性设置该值        &amp;        country=%E4%B8%AD%E5%9B%BD        &amp;        desc=%E9%BB%98%E8%AE%A413212312313%E5%80%BC        &amp;        filepath=%E5%B7%B2%E5%87%BA%E5%8D%95DCR%E5%8D%AB%E8%A3%A4.xls    --></span>    <span class="token comment" spellcheck="true">&lt;!--        action:设置提交的服务器地址        method：设置提交的方式get(默认值)或post        get: 不安全、有数据长度的限制        post：只有服务器地址 action="http://localhost:8080"，相对于get请求方式要安全，理论上没有长度限制    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            input type=hidden 是隐藏域 当我们要发送某些信息，而这些信息，不需要用户参与，就可以使用隐藏域（提交的            时候同时发送给服务器）        --></span><span class="token comment" spellcheck="true">&lt;!--        &lt;input type="hidden" name="action" value="login" />--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用户名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>默认值<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用户密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>女                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>兴趣爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>java                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c++<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>c++                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>html                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>国籍：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>country<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>usa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>美国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>日本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>自我评价：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>默认值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>上传附件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filepath<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="CSS练习：选择器"><a href="#CSS练习：选择器" class="headerlink" title="CSS练习：选择器"></a>CSS练习：选择器</h4><pre class=" language-html"><code class="language-html">div<span class="token entity" title="&#123;">&amp;#123;</span>    /*标签名选择器*/    border: 1px solid red;    width: 100px;    height: 100px;    background-color: aquamarine;    font-size: 30px;<span class="token entity" title="&#125;">&amp;#125;</span>#id02<span class="token entity" title="&#123;">&amp;#123;</span>    /* id 选择器*/    border: 1px solid blue;<span class="token entity" title="&#125;">&amp;#125;</span>.class03 <span class="token entity" title="&#123;">&amp;#123;</span>    /*类选择器*/    color: blue;    font-size: 10px;    border: 2px solid yellow;<span class="token entity" title="&#125;">&amp;#125;</span>span, p<span class="token entity" title="&#123;">&amp;#123;</span>    /* 组合选择器，让多个选择器*/    border: 1px solid black;    color: chocolate;<span class="token entity" title="&#125;">&amp;#125;</span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css01.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> auto</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>盒子01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>盒子02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>盒子03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>-------------------------------------------------------------------------------------------------------<span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css01.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token property">margin-right</span><span class="token punctuation">:</span> auto</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>盒子01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>盒子02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>盒子03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js01.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 静态注册加载事件</span>        <span class="token keyword">function</span> <span class="token function">onloadFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"静态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态注册加载事件</span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'动态'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 静态注册点击事件</span>        <span class="token keyword">function</span> <span class="token function">onclickfun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"静态注册点击事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态注册点击事件</span>        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 1. 获取标签对象</span>            <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"anNiu02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2. 通过标签对象.事件名 = function()&amp;#123;&amp;#125;</span>            <span class="token comment" spellcheck="true">// alert(element);</span>            element<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动态注册点击事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 静态注册失去焦点事件</span>        <span class="token keyword">function</span> <span class="token function">onblurFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"静态注册失去焦点事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态注册失去焦点事件</span>        window<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            element<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"动态注册失去焦点事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 静态注册内容发生改变事件</span>        <span class="token keyword">function</span> <span class="token function">onchangeFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"静态注册内容发生改变事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"select02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            element<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动态注册内容改变事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onclickfun();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anNiu02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onblurFun()<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    密  码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">onchange</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onchangeFun()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>美国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>日本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>美国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>日本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 静态注册表单提交事件</span>        <span class="token keyword">function</span> <span class="token function">onsubmitFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"静态注册表单提交事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以组织表单提交，需要接受返回值</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态注册表单提交</span>        window<span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            element<span class="token punctuation">.</span>onsubmit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动态注册表单提交失败，不予提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 接受了false返回值，组织了表单提交 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return onsubmitFun()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:8080<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="dom的使用"><a href="#dom的使用" class="headerlink" title="dom的使用"></a>dom的使用</h4><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        function onClickFunc() &#123;            let elementInput = document.getElementById(&quot;username&quot;);            let value = elementInput.value;            // 验证value是否符合某个规则            let regExp = /^\w&#123;5,12&#125;$/;            let elementSpan = document.getElementById(&quot;usernameSpan&quot;);            if (regExp.test(value))&#123;                elementSpan.innerHTML = &quot;&lt;img src=\&quot;image\\right.png\&quot; style=\&quot;width: 15px; height: 15px\&quot;&gt;&quot;;            &#125; else &#123;                elementSpan.innerHTML = &quot;&lt;img src=\&quot;image\\wrong.png\&quot; style=\&quot;width: 15px; height: 15px\&quot;&gt;&quot;;            &#125;        &#125;        function selectAll() &#123;            let elementsByName = document.getElementsByName(&quot;hobby&quot;);            for (let i = 0; i &lt; elementsByName.length; i++) &#123;                elementsByName[i].checked = true;            &#125;        &#125;        function selectNone() &#123;            let elementsByName = document.getElementsByName(&quot;hobby&quot;);            for (let i = 0; i &lt; elementsByName.length; i++) &#123;                elementsByName[i].checked = false;            &#125;        &#125;        function selectReverse() &#123;            let elementsByName = document.getElementsByName(&quot;hobby&quot;);            for (let i = 0; i &lt; elementsByName.length; i++) &#123;                elementsByName[i].checked = !elementsByName[i].checked;            &#125;        &#125;        window.onload = function () &#123;            let element = document.createElement(&quot;div&quot;);            element.innerHTML = &quot;hi&quot;;            document.body.appendChild(element);        &#125;    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    用户名：&lt;input id=&quot;username&quot; type=&quot;text&quot; value=&quot;请输入用户名&quot;/&gt;    &lt;span id=&quot;usernameSpan&quot;&gt;&lt;/span&gt;    &lt;button onclick=&quot;onClickFunc()&quot;&gt;校验&lt;/button&gt;    &lt;hr /&gt;    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; checked /&gt;c++&lt;br&gt;    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; /&gt;java&lt;br&gt;    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; /&gt;js&lt;br&gt;    &lt;button onclick=&quot;selectAll()&quot;&gt;全选&lt;/button&gt;    &lt;button onclick=&quot;selectNone()&quot;&gt;全不选&lt;/button&gt;    &lt;button onclick=&quot;selectReverse()&quot;&gt;反选&lt;/button&gt;    &lt;hr/&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="第二章-jQuery"><a href="#第二章-jQuery" class="headerlink" title="第二章 jQuery"></a>第二章 jQuery</h2><h4 id="jQuery核心函数"><a href="#jQuery核心函数" class="headerlink" title="jQuery核心函数"></a>jQuery核心函数</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lib/jquery-1.7.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// js原生的动态注册点击事件</span>        <span class="token comment" spellcheck="true">// window.onload = function () &amp;#123; // 对象.事件 = 函数关键字()&amp;#123;&amp;#125;</span>        <span class="token comment" spellcheck="true">//     // onload 页面加载完成事件，常用于做页面js代码的初始化操作</span>        <span class="token comment" spellcheck="true">//     // 通过document获取dom对象</span>        <span class="token comment" spellcheck="true">//     let element = document.getElementById("button01");</span>        <span class="token comment" spellcheck="true">//     // 对获取的元素进行处理</span>        <span class="token comment" spellcheck="true">//     element.onclick = function () &amp;#123;</span>        <span class="token comment" spellcheck="true">//         alert("js原生的动态注册点击事件")</span>        <span class="token comment" spellcheck="true">//     &amp;#125;</span>        <span class="token comment" spellcheck="true">// &amp;#125;</span>        <span class="token comment" spellcheck="true">// 使用 jQuery实现点击事件</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 该参数为函数，表示在文档加载完成后执行这个函数</span>            <span class="token keyword">let</span> $button01 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#button01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示按照id查询到标签对象，该对象是jQuery对象</span>            $button01<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 绑定单击事件</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"jQuery的单击事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数为字符串，可以快速创建标签对象，这是jQuery对象</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"    &lt;div>"</span> <span class="token operator">+</span>                <span class="token string">"        &lt;span>div-span01&lt;/span>"</span> <span class="token operator">+</span>                <span class="token string">"        &lt;span>div-span02&lt;/span>"</span> <span class="token operator">+</span>                <span class="token string">"    &lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数为：选择器字符串</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> $button <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $button是jQuery对象，该对象底层是dom对象数组 + 一些列函数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $button<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> button <span class="token operator">=</span> $button<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// jQuery对象转换为dom对象</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数为 dom 对象,会把这个dom对象转换为jQuery对象</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得dom对象</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出的是jQuery对象,dom对象转换为了jQuery对象</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lib/jquery-1.7.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// js原生的动态注册点击事件</span>        <span class="token comment" spellcheck="true">// window.onload = function () &amp;#123; // 对象.事件 = 函数关键字()&amp;#123;&amp;#125;</span>        <span class="token comment" spellcheck="true">//     // onload 页面加载完成事件，常用于做页面js代码的初始化操作</span>        <span class="token comment" spellcheck="true">//     // 通过document获取dom对象</span>        <span class="token comment" spellcheck="true">//     let element = document.getElementById("button01");</span>        <span class="token comment" spellcheck="true">//     // 对获取的元素进行处理</span>        <span class="token comment" spellcheck="true">//     element.onclick = function () &amp;#123;</span>        <span class="token comment" spellcheck="true">//         alert("js原生的动态注册点击事件")</span>        <span class="token comment" spellcheck="true">//     &amp;#125;</span>        <span class="token comment" spellcheck="true">// &amp;#125;</span>        <span class="token comment" spellcheck="true">// 使用 jQuery实现点击事件</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 该参数为函数，表示在文档加载完成后执行这个函数</span>            <span class="token keyword">let</span> $button01 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#button01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示按照id查询到标签对象</span>            $button01<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 绑定单击事件</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"jQuery的单击事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数为字符串，可以快速创建标签对象</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"    &lt;div>"</span> <span class="token operator">+</span>                <span class="token string">"        &lt;span>div-span01&lt;/span>"</span> <span class="token operator">+</span>                <span class="token string">"        &lt;span>div-span02&lt;/span>"</span> <span class="token operator">+</span>                <span class="token string">"    &lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数为：选择器字符串</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数为 dom 对象,会把这个dom对象转换为jQuery对象</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"button01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获得dom对象</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出的是jQuery对象</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button04<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="jQeury练习"><a href="#jQeury练习" class="headerlink" title="jQeury练习"></a>jQeury练习</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lib/jquery-1.7.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 全选</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#selectAll"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 全不选</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#selectNone"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 反选</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#selectReverse"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox[name = 'item']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox[name = 'item']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token keyword">let</span> length1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox[name = 'item']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#selectAllOrNone"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> length1 <span class="token operator">==</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 提交</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox[name = 'item']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 给全选/全不选绑定单击事件</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#selectAllOrNone"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox[name = 'item']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox[name = 'item']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox[name = 'item']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token keyword">let</span> length1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox[name = 'item']:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#selectAllOrNone"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span> length1 <span class="token operator">==</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>        你爱好的运动是?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAllOrNone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>全选/全不选<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>足球<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>足球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>羽毛球<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>羽毛球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>乒乓球<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>乒乓球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全选<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectNone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全不选<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectReverse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>反选<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL标准库和泛型编程</title>
      <link href="/2022/050931850.html"/>
      <url>/2022/050931850.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-STL标准库与泛型编程"><a href="#第一章-STL标准库与泛型编程" class="headerlink" title="第一章 STL标准库与泛型编程"></a>第一章 STL标准库与泛型编程</h2><ol><li>STL和泛型（Standard Template Library and Generic Programming）</li><li>所谓泛型就是使用模板为主要工具来编写程序。</li><li>本章根据源码分析C++的STL之体系结构，而STL正式泛型编程的最成功的作品，所以本课程事实上就是以STL为标的深层次探讨泛型编程</li></ol><h3 id="1-1-C-标准库"><a href="#1-1-C-标准库" class="headerlink" title="1.1 C++标准库"></a>1.1 C++标准库</h3><ol><li>C++标准库就是很多的头文件，STL也是标准库中的东西</li><li>STL是标准模板库（STL分为六大部分：容器containers、分配器allocators、算法algorithm、迭代器iterators、适配器adapters、仿函数function）</li><li>容器已经解决了内存的问题，不必管，这背后需要分配器来解决</li><li>对容器中的数据进行操作可以通过容器中的一些函数解决，也可以用STL中的算法（algorithm）得到解决，这和面向对象编程有些区别，这是模板编程</li><li>在算法algorithm和容器之间的桥梁是迭代器，迭代器是一种泛化的指针，指向容器中的数据，算法就处理了迭代器指向的数据</li><li>仿函数的作用就像一个函数</li><li>适配器有：容器适配器、迭代器适配器、仿函数适配器</li><li>使用C++标准库中的头文件不需要带.h后缀，#include<vector></vector></li><li>新式的C头文件不带.h，例如：#include<sctdio></sctdio></li><li>namespace（命名空间）：<a href="https://www.runoob.com/cplusplus/cpp-namespaces.html">C++ 命名空间 | 菜鸟教程 (runoob.com)</a></li><li>新式的头文件内部组件封装于namespace”std”</li><li>旧式头文件内的组件不封装于namespace”std”</li><li>前闭后开区间：==容器.begin()==指向容器的第一个元素， ==容器.end()==指向容器的最后一个元素的下一个位置</li><li>将   ==容器.end()== 进行解引用并不会得到容器的最后一个元素，这是一个危险动作，并不知道解引用以后会得到什么，产生什么后果</li></ol><p>代码实例：</p><pre class=" language-c++"><code class="language-c++">#include <iostream>#include "vector"#include "functional"#include "algorithm"using namespace std;void test01()&#123;    cout<<"hello STL"<<endl;    int arr[6] = &#123;1, 2, 4, 2, 4, 5&#125;;    vector<int, allocator<int>> v1(arr, arr+6);    cout<<count_if(v1.begin(), v1.end(), not1(bind2nd(less<int>(), 4))); // 大于等于4    // count_if->algorithm    // less -> functional    // bind2nd -> functional    // not1 -> functional&#125;void test02()&#123;    // 增强for循环的使用    vector<int> v;    for (int i: &#123;1, 2, 3, 4, 5, 6&#125;) &#123;        v.push_back(i);    &#125;    cout<<"==================="<<endl;    for (auto& elem : v) &#123;        elem*=3; // elem 就是引用,这会修改容器中的数据        cout<<elem<<endl;    &#125;    for (auto elem : v) &#123; // auto 会自动推断数据类型        cout << elem << endl;    &#125;&#125;int main() &#123;//    test01();    test02();    return 0;&#125;</code></pre><h3 id="1-2-容器的分类及测试"><a href="#1-2-容器的分类及测试" class="headerlink" title="1.2 容器的分类及测试"></a>1.2 容器的分类及测试</h3><ol><li>可以参考C++初级部分的STL相关知识</li><li>序列式容器：Array、Vector、Deque、List（双向列表）、Forward_List（单向列表）</li><li>关联式容器：键值对，有key、value，适合做快速的查找，set/multiset、map/multimap，底层是红黑树，会自动排序</li><li>无序容器：unordered_set，unordered_multiset、unordered_map，unordered_multimap，底层是哈希表</li><li>容器之间的数据结构是不一样的</li><li>Array是在C++11引入的，是一个连续的内存空间，无法扩容</li><li>Vector可以自动扩容，扩容动作由分配器做，只可以从尾部加入数据</li><li>Deque可以在头和尾增加数据</li><li>List，链表，不是连续的内存空间，数据之间由指针连接，底层代码是双向环形列表</li><li>Forward_List 单向列表</li><li>Set/Multiset，内部使用红黑树做的，它的key和value是不分的，multiset的key是可以重复的</li><li>Map/Multimap，内部使用红黑树做的，高度平衡二叉树（高度会调整到左右高度几乎相同），这提高了查找效率，multimap的key是可以重复的</li><li>哈希表：数据要根据某个计算放到某个位置，但会发生数据冲突，但是可以解决冲突，解决方式可以采用如下图所示的方式，这个方式是最被推荐的，但是这可能会导致查找数据变慢，因此链表不可以太长，这也是有机制来解决的</li></ol><h4 id="1-2-1-容器-array"><a href="#1-2-1-容器-array" class="headerlink" title="1.2.1 容器 array"></a>1.2.1 容器 array</h4><pre class=" language-c++"><code class="language-c++">array容器.size();  // 容器数据个数array容器.front(); // 容器的第一个元素array容器.back(); // 容器的最后一个元素array容器.data(); // 容器的首地址</code></pre><pre class=" language-c++"><code class="language-c++">qsort(参数列表); // 排序</code></pre><p>注意：</p><ol><li>array是一个连续空间，它的迭代器就可以用单纯的指针来实现，不需要使用类来实现该容器的迭代器</li></ol><h4 id="1-2-2-容器-vector"><a href="#1-2-2-容器-vector" class="headerlink" title="1.2.2 容器 vector"></a>1.2.2 容器 vector</h4><pre class=" language-c++"><code class="language-c++">vector // 只能从尾部插入数据vector 是一段连续的内存空间，它的扩容是成倍的扩容，两倍两倍的空间增长，这可能带来内存浪费的问题vector容器.size(); // 真正的元素的个数vector容器.front(); // 返回头元素vector容器.back(); // 返回尾元素vector容器.data(); // 该容器的首地址vector容器.capacity(); // 该容器的容量</code></pre><p><strong>注意：</strong></p><ol><li>默认的分配器是G2.9的alloc</li><li>vector可以使用中括号存取数据</li></ol><p><strong>注意：</strong></p><ol><li>vector容器的大小若不初始化，则开始的size()是0</li><li>每次调整容器的大小，就涉及数据的拷贝，大量调用数据的拷贝构造函数和析构函数</li></ol><h4 id="1-2-3-容器-list"><a href="#1-2-3-容器-list" class="headerlink" title="1.2.3 容器 list"></a>1.2.3 容器 list</h4><pre class=" language-c++"><code class="language-c++">list容器是双向列表，只要内存有空余，就可以放数据list.size(); // 该容器元素的个数list.max_size(); // 该容器可以存放多少个数字list.front(); // 该容器的头元素list.back(); // 该容器的尾元素list.sort(); // 该容器自带的sort()，不需要形参;特别注意标准库也有一个sort(); // 当容器有自带的sort()的时候，要用自带的函数，其他容器也一样</code></pre><p><strong>图解：</strong></p><ol><li><p>G2.9版本的 list的默认的分配器是alloc，list的每个结点有 数据域 和 前指针域 和 后指针域</p></li><li><p>G2.9版本的list类就是一个类，而在G4.9版本list有多个类继承实习</p></li></ol><p><strong>图解：</strong></p><ol><li>为了区分自增的前缀和后缀的调用，使用了operator++(int)（后缀） 和 operator++()（前缀），自减类似</li></ol><h4 id="1-2-4-容器-forward-list"><a href="#1-2-4-容器-forward-list" class="headerlink" title="1.2.4 容器 forward_list"></a>1.2.4 容器 forward_list</h4><pre class=" language-c++"><code class="language-c++">forward_list 也只能在尾部插入元素forward_list容器.max_size(); forward_list容器.front();forward_list容器.sort(); // 不需要形参// 该容器没有size(),没有back();</code></pre><h4 id="1-2-5-容器-slit"><a href="#1-2-5-容器-slit" class="headerlink" title="1.2.5 容器 slit"></a>1.2.5 容器 slit</h4><pre class=" language-c++"><code class="language-c++">跟forward_list类似，该容器是非标准库的，所以需要包含头文件：#include<ext\slist></code></pre><h4 id="1-2-6-容器-Deque"><a href="#1-2-6-容器-Deque" class="headerlink" title="1.2.6 容器 Deque"></a>1.2.6 容器 Deque</h4><pre class=" language-c++"><code class="language-c++">Deuqe; // 可以在两端插入删除数据，其数据结构可以参考C++初级// 其数据结构：map 和 buffer, 在每一个buffer在内存中是连续的deque容器.size(); // 返回该容器元素个数deque容器.front(); // 返回头部元素deque容器.back(); // 返回尾部元素deque容器.max_size(); // </code></pre><p>注意：</p><ol><li>iterator的first是buffer的开头，last是buffer的末尾</li><li>iterator的cur指向了该迭代器指向的数据</li><li>iterator的node指向了该数据的buffer在map中的位置</li></ol><p><strong>注意：</strong></p><p>在insert元素的时候，会发生元素的移动，但是deque可以判断从哪一段插入元素移动的其他元素更好</p><p><strong>注意：</strong></p><ol><li>迭代器一定对运算符进行了重载</li><li>deque可以一次移动多个位置</li></ol><p>注意：</p><ol><li>在扩充数据的时候，原来的map复制到新的map时，将原来的map复制到新的map的中间，以便可以左右增加buffer</li></ol><h4 id="1-2-7-stack"><a href="#1-2-7-stack" class="headerlink" title="1.2.7 stack"></a>1.2.7 stack</h4><pre class=" language-c++"><code class="language-c++">stack; // 栈，先进后出该容器的底层是用deque实现的stack容器.push(); // 栈顶加入元素stack容器.size();stack容器.top(); // 返回栈顶元素的值stack容器.pop(); // 栈顶元素出栈// 不提供迭代器的某些功能</code></pre><p>注意：</p><ol><li>stack和queue内涵了deque，只是没有deque的某些功能</li></ol><h4 id="1-2-8-queue"><a href="#1-2-8-queue" class="headerlink" title="1.2.8 queue"></a>1.2.8 queue</h4><pre class=" language-c++"><code class="language-c++">queue; // 队列，先进先出queue容器.push(); // 队尾加入元素queue容器.pop(); // 队头元素出队queue容器.size();queue容器.front(); // 返回队头元素的值queue容器.back(); // 返回队尾元素的值// 不提供迭代器的某些功能</code></pre><p><strong>注意：</strong></p><ol><li>stack和queue内涵了deque，只是没有deque的某些功能</li></ol><h4 id="1-2-9-容器-set-multiset"><a href="#1-2-9-容器-set-multiset" class="headerlink" title="1.2.9 容器 set / multiset"></a>1.2.9 容器 set / multiset</h4><pre class=" language-c++"><code class="language-c++">// set 和 multiset 的区别就是 set 里面的数据不可以重复，multiset 里面的数据可以重复// 其数据结构是红黑树，因此有元素自动排序的特性，排序依据是key，但是set / multiset元素的value和key合一，value就是keyset/multiset容器.insert(); // 插入数据，放在合适位置，该容器的数据都是有序的set/multiset容器.size();set/multiset容器.max_size();set/multiset容器.find(elem); // 该容器本身就有一个find()函数，但是还有find(形参列表)全局函数，首选自带的函数</code></pre><ol><li>我们无法使用set / multiset的迭代器改变元素值（因为value就是key，key有其严格排序的规则），set / multiset的迭代器底部的br_tree的const-iterator，就是为了防止程序员对元素赋值</li><li>set的insert() -&gt;rb_tree的insert_unique(),底层的迭代器是const_iterator,不允许修改数据</li><li>multiset的insert() -&gt;rb_tree的insert_equal()</li></ol><h4 id="1-2-10-容器-map-multimap"><a href="#1-2-10-容器-map-multimap" class="headerlink" title="1.2.10 容器 map / multimap"></a>1.2.10 容器 map / multimap</h4><ol><li>map / multimap 以rb_tree为底层结构，因此有元素自动排序的特性，排序的依据是key</li><li>无法使用 map / multimap 迭代器来改变key，因为key有严格的排列规则，但可以使用它来改变元素的data，因此，map / multimap内部自动将程序员指定的keytype设置为const，如此便可以禁止程序员对元素的key修改</li><li>map的insert() -&gt;rb_tree的insert_unique()</li><li>multimap的insert() -&gt;rb_tree的insert_equal()</li><li>map的迭代器就是rb_tree的迭代器（此迭代器是可以修改数据的），但是 map 底层的pair&lt;const Key，T&gt;，map自动把Key设置为const，这就使得key不可以修改</li><li>map可以通过中括号 [ ] 存取数据，中括号中是key，修改的是key指向的值。map容器 [ keyIndex ] = value; 若key不存在，则就会创建一个key</li></ol><pre class=" language-c++"><code class="language-c++">map/multimap<key, value>容器.insert( pair<keyType, valueType>(key, value) );map/multimap<key, value>容器底层也是红黑树map/multimap<key, value>容器.size();map/multimap<key, value>容器.max_size();map/multimap<key, value>容器.find(elem); // 同上// 该容器的迭代器.first 是key的值// 该容器的迭代器.second 是value的值</code></pre><h4 id="1-2-11-容器-unordered-set-和-unordered-multiset"><a href="#1-2-11-容器-unordered-set-和-unordered-multiset" class="headerlink" title="1.2.11 容器 unordered_ set 和 unordered_ multiset"></a>1.2.11 容器 unordered_ set 和 unordered_ multiset</h4><pre class=" language-c++"><code class="language-c++">unordered_ set; // 该容器底层是哈希表unordered_ set容器.insert(elem);unordered_ set容器.size();unordered_ set容器.max_size();unordered_ set容器.bucket_count(); // 篮子的个数，哈希表的头的个数unordered_ set容器.load_factor(); // 载重因子unordered_ set容器.max_load_facotr(); // 最大载重因子unordered_ set容器.max_bucket_count(); // 最大篮子数量unordered_ set容器.bucket_size(i); // 第 i 个篮子中有多少个数据// 篮子一定比数据多，因此篮子指向的单链表不能太长unordered_ set容器.find(elem);// set的数据不可以重复，multiset数据不可以重复</code></pre><h4 id="1-2-12-容器-unordered-map-和-unordered-multimap"><a href="#1-2-12-容器-unordered-map-和-unordered-multimap" class="headerlink" title="1.2.12 容器 unordered_ map 和 unordered_ multimap"></a>1.2.12 容器 unordered_ map 和 unordered_ multimap</h4><pre class=" language-c++"><code class="language-c++">unordered_ map容器.size();unordered_ map容器.max_size();unordered_ map容器.insert();// 该容器底层是哈希表// unordered_ map的key是唯一的，unordered_ multimap的key可以不唯一// map 容器可以使用中括号运算符[]，可以用于访问和插入数据map容器[index] = value; // index就是key,value就是容器的key对应的value</code></pre><h4 id="1-2-13-rb-tree-深度探索"><a href="#1-2-13-rb-tree-深度探索" class="headerlink" title="1.2.13 rb_tree 深度探索"></a>1.2.13 rb_tree 深度探索</h4><ol><li>使用者把元素插入rb_tree，会被插入合适的位置，且是有序的</li><li>insert_unique() -&gt; map / set</li><li>insert_equal() -&gt; multimap / multiset</li><li>函数中没有数据成员，则实际占用的内存大小为1，理论为0</li><li>OOP编程：句柄 and body</li></ol><h4 id="1-2-14-容器hashtable"><a href="#1-2-14-容器hashtable" class="headerlink" title="1.2.14 容器hashtable"></a>1.2.14 容器hashtable</h4><ol><li>元素经过某种计算落在相同的位置，这就会导致冲突，比如 数据编号 % 哈希表的长度 = 该元素在哈希表的位置，当然还有别的寻找存放位置的方法，但是依旧要解决数据的冲突的 </li><li>解决冲突也有很多方式，其中一种方式就是将冲突的所有数据链接起来，形成链表</li><li>若因为冲突而链表过长，这个查找数据的开销就会增大，因此会限制链表的长度。若目前元素的个数大于篮子的个数，那么篮子的个数就会增加两倍（但在不同的C++库中，增加的不一定是两倍，可能是两倍附近的质数，也可能是别的方式），再将原来的数据打散，并重新放到新的篮子里，这样就把链表的长度变短了，这样就提高了时间效率</li><li>HashFun 算出来的编号叫做hashCode，使得元素经过hashCode映射之后能够被设置到hashTable的某个位置，大家公认的做法是，hashCode % 篮子长度  = 元素的位置</li><li>hashTable的篮子类型为vector</li><li>hashTable的每一个结点有指针域和数据域</li><li>迭代器是指向结点的，那么要指向某条链表的最后一个数据之后，还要指向下一个元素，在底层，该迭代器中有该hashTable的指针，因此容易找到下一个篮子</li></ol><p><strong>注意：</strong></p><ol><li>读源码的重要性之一就是在编程的时候利用底层源码</li><li>const char*：这是c风格的字符串</li></ol><h3 id="1-3-分配器allocator"><a href="#1-3-分配器allocator" class="headerlink" title="1.3 分配器allocator"></a>1.3 分配器allocator</h3><ol><li>容器都有默认的分配器，分配内存就要用到对应的分配器。</li><li>不建议直接使用分配器</li><li>容器类型&lt;elemType, 分配器<elemType>&gt;  容器名；</elemType></li></ol><h2 id="第二章-STL-内核"><a href="#第二章-STL-内核" class="headerlink" title="第二章 STL 内核"></a>第二章 STL 内核</h2><h3 id="2-1-OOP-面向对象编程-VS-GP-泛型编程"><a href="#2-1-OOP-面向对象编程-VS-GP-泛型编程" class="headerlink" title="2.1 OOP(面向对象编程) VS GP(泛型编程)"></a>2.1 OOP(面向对象编程) VS GP(泛型编程)</h3><ol><li>OOP（面向对象编程）：欲将数据和方法封装在一个类中</li><li>GP（泛型编程）：欲将数据和方法分开</li><li>采用CP（泛型编程）：Containers和Algorithm团队可以各自完成自己的工作，两个团队通过Iterator迭代器沟通即可</li><li>Algorithm 通过 Iterator 确定操作范围，并通过 Iterator 取用 Container 元素</li><li>仿函数可以对Algorithm中的算法作为一种补充</li><li>随机访问迭代器（random accessive iterator），可以进行加减等其他运算</li><li>全局的algorithm中的算法，有些容器是不可以使用，因为这些容器并不满足调用全局函数调用的条件。</li><li>所有algorithm，其内最终涉及元素本身的操作，无非就是比大小</li></ol><h3 id="2-2-模板"><a href="#2-2-模板" class="headerlink" title="2.2 模板"></a>2.2 模板</h3><ol><li><p>类模板</p><pre class=" language-c++"><code class="language-c++">tempalte<typename T></code></pre></li><li><p>函数模板</p><pre class=" language-c++"><code class="language-c++">template<typename T>编译器会做实参推导，因此在用函数模板时，传入的实参不需要指定类</code></pre></li><li><p>成员模板</p></li></ol><h4 id="2-2-1-泛化"><a href="#2-2-1-泛化" class="headerlink" title="2.2.1 泛化"></a>2.2.1 泛化</h4><ol><li><p>在设计类模板时，会泛化设计</p></li><li><p>可以对于特定的情况特化设计</p></li><li><p>语法形式：</p><pre class=" language-c++"><code class="language-c++">// 泛化tempalte<class type>struct _type_traits&#123;    // 数据声明    typedef _false_type has_trival;&#125;;// 特化tempalte<> struct _type_traits<int>&#123;    // 数据声明    typedef _false_type has_trival;&#125;;// 特化tempalte<> struct _type_traits<double>&#123;    // 数据声明    typedef _false_type has_trival;&#125;;_type_traits<Foo>::has_trival;  //调用泛化的结构</code></pre><pre class=" language-c++"><code class="language-c++">temlate<class Key> struct hash&#123;&#125;;  // 泛化_STL_TEMPLATE_NULL struct hash<char>&#123;&#125;; // 特化，前面省略了tempalte<>_STL_TEMPLATE_NULL struct hash<short>&#123;&#125;; // 特化，前面省略了tempalte<>_STL_TEMPLATE_NULL struct hash<unsigned short>&#123;&#125;; // 特化，前面省略了tempalte<>_STL_TEMPLATE_NULL struct hash<int>&#123;&#125;; // 特化，前面省略了tempalte<></code></pre></li></ol><h4 id="2-2-2-偏特化"><a href="#2-2-2-偏特化" class="headerlink" title="2.2.2 偏特化"></a>2.2.2 偏特化</h4><ol><li><p>泛化</p><pre class=" language-c++"><code class="language-c++">tempalte<class T, class Alloc = alloc>class vector&#123;    ...&#125;;</code></pre></li><li><p>偏特化：局部特化</p><pre class=" language-c++"><code class="language-c++">tempalte<class Alloc>class vector<bool, Alloc>&#123;    ...&#125;;// T类型的指针tempalte<class T>struct iterator_traits<T*>&#123;    ...&#125;;</code></pre></li></ol><h3 id="2-3-分配器-allocators"><a href="#2-3-分配器-allocators" class="headerlink" title="2.3 分配器 allocators"></a>2.3 分配器 allocators</h3><ol><li>学这部分内容是为了选择合适的容器应用到场景中，而不是去写分配器</li></ol><h4 id="2-3-1-operator-new-和-malloc"><a href="#2-3-1-operator-new-和-malloc" class="headerlink" title="2.3.1 operator new() 和 malloc()"></a>2.3.1 operator new() 和 malloc()</h4><pre class=" language-c++"><code class="language-c++">void* operator new(参数列表)&#123;    ...    malloc(); // 分配内存    ...&#125;</code></pre><p><strong>注意：</strong></p><ol><li>在用malloc()函数分配内存的时候，不仅分配了size()大小的内存快，还有头和尾的内存（cookie，这是额外空间开销，这些额外的空间开销记录了分配数据的内存的信息，以便使用和释放等），size是实际数据的内存块</li><li>G2.9标准库的allocator的实现解决了上述的空间浪费的问题，省去了每个数据的cookie，但是底层还是用malloc得到内存的，底层是哈希表，G2.9标准库对于分配器的实现是最好的方式</li><li>G4.9版的标准库对于allocator的实现却又回到了上图的那种方式，每个数据都会有cookie，存在资源浪费的可能，但是G4.9版的标准库还是有G2.9版的对于allocate的实现的，只不过是extension allocators</li></ol><h4 id="2-3-2-STL对allocator的使用"><a href="#2-3-2-STL对allocator的使用" class="headerlink" title="2.3.2 STL对allocator的使用"></a>2.3.2 STL对allocator的使用</h4><ol><li>deallocate,回收内存operator delete()调用的是c语言的free()，free()对应的是malloc()</li><li>allocatorte也是一个类，这个类有allocate() 函数 和 deallocate() 函数</li><li>allocate函数下面有operator new()函数，而 operator new()函数也是通过malloc()函数分配内存的，malloc()函数分配内存后需要用free()释放</li><li>deallocate()函数要调用operator delete()函数，operator delete()函数下面调用了free()函数来释放内存</li></ol><h3 id="2-4-容器之间的实现关系与分类"><a href="#2-4-容器之间的实现关系与分类" class="headerlink" title="2.4 容器之间的实现关系与分类"></a>2.4 容器之间的实现关系与分类</h3><ol><li>rb_tree 红黑树，平衡二叉树</li></ol><p><strong>图解：</strong></p><ol><li>容器对象的sizeof() 大小是指该对象的指针的大小，而不是存放了多少个数据占的内存的大小</li></ol><h3 id="2-5-迭代器的设计原则和iterator-Traits的作用与设计"><a href="#2-5-迭代器的设计原则和iterator-Traits的作用与设计" class="headerlink" title="2.5 迭代器的设计原则和iterator Traits的作用与设计"></a>2.5 迭代器的设计原则和iterator Traits的作用与设计</h3><h4 id="2-5-1-iterator需要遵循的原则"><a href="#2-5-1-iterator需要遵循的原则" class="headerlink" title="2.5.1 iterator需要遵循的原则"></a>2.5.1 iterator需要遵循的原则</h4><p>迭代器是容器和算法之间的桥梁</p><h2 id="第三章-算法"><a href="#第三章-算法" class="headerlink" title="第三章 算法"></a>第三章 算法</h2><ol><li>从语言层面上讲，算法是一个函数模板</li><li>algorithm看不见containers，对其一无所知，所以，它需要的一切信息必须从iterator取得，而iterator由containers提供，必须能够回答algorithm的所有提问，才能搭配该algorithm的所有操作</li><li>array容器、vector容器、deque容器的迭代器都是random_access_iterator_tag（随机访问迭代器）</li><li>list、set、multiset、map、multimap迭代器是bidirectional_iterator_tag（双向迭代器）</li><li>forward_list的迭代器是forwar_iterator_tag</li><li>unordered set、unordered multiset、unordered map、unordered multimap 要看底层的链表是单向链表还是双向链表，才能决定采用的迭代器种类</li></ol><h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><p>std::bad_alloc  内存分配异常</p><p>abort()；退出程序</p><p>#include<typeinfo>的typeid，</typeinfo></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++进阶 </tag>
            
            <tag> STL标准库和泛型编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++初级</title>
      <link href="/2022/050531891.html"/>
      <url>/2022/050531891.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-第一阶段"><a href="#C-第一阶段" class="headerlink" title="C++第一阶段"></a>C++第一阶段</h1><h2 id="第一章-导学"><a href="#第一章-导学" class="headerlink" title="第一章 导学"></a>第一章 导学</h2><h3 id="1-1-关于C"><a href="#1-1-关于C" class="headerlink" title="1.1 关于C++"></a>1.1 关于C++</h3><ol><li>从C语言发展而来，兼容C，支持面向对象的方法，支持泛型程序设计方法</li><li>C++11标准，包含了核心语言的新机能，扩展了C++标准库</li><li>最新的是C++14</li><li>函数的参数就是供函数计算使用的数据</li><li>函数的return语句就是返回函数的运算结果</li></ol><h3 id="1-2-计算机系统简介"><a href="#1-2-计算机系统简介" class="headerlink" title="1.2 计算机系统简介"></a>1.2 计算机系统简介</h3><ol><li><p>计算机的工作需要人来指挥</p></li><li><p>计算机能识别的是机器语言，机器语言指令是由0和1编码的，例如加法指令：0001</p></li><li><p>计算机的指令系统：机器硬件能够识别的语言（机器语言）的集合。它是软件和硬件的主要界面</p></li><li><p>计算机软件：应用软件、系统软件（操作系统，管理计算机的软硬件资源、管理任务等）、中间件（提供系统软件和应用软件之间链接的软件）</p></li><li><p>软件 = 程序 + 文档</p></li><li><p>程序是指令的序列 和 解决问题的方法和数据</p></li></ol><h3 id="1-3-计算机语言的和程序设计方法的发展"><a href="#1-3-计算机语言的和程序设计方法的发展" class="headerlink" title="1.3 计算机语言的和程序设计方法的发展"></a>1.3 计算机语言的和程序设计方法的发展</h3><ol><li>机器语言：由二进制代码构成，可以被硬件识别并执行</li><li>汇编语言：将机器指令映射为一些助记符，抽象层次低，需要考虑机器细节</li><li>高级语言：接近人类语言，屏蔽了机器的底层细节。</li><li>面向对象的高级语言：把客观现实中的事务看作对象（属性和行为）。对象之间通过消息传送的方式进行沟通，程序中也可以这样。支持分类和抽象。</li></ol><p><strong>程序设计方法的发展历程：</strong></p><ol><li>面向过程的程序设计方法：解决问题的步骤，主要设计求解问题，不利于做大型复杂的软件。</li><li>面向对象的程序设计方法：面向对象的高级语言支持，一个系统由对象构成，对象之间通过消息进行通信。</li></ol><h3 id="1-4-面向对象的基本概念"><a href="#1-4-面向对象的基本概念" class="headerlink" title="1.4 面向对象的基本概念"></a>1.4 面向对象的基本概念</h3><p>对象</p><p>类：抽象</p><p>封装</p><p>继承：意义在于软件复用，扩展形成新的类</p><p>多态：同样的消息作用在不同的对象上产生不同的影响</p><h3 id="1-5-程序的开发过程"><a href="#1-5-程序的开发过程" class="headerlink" title="1.5 程序的开发过程"></a>1.5 程序的开发过程</h3><ol><li>高级语言程序（源程序）要进行翻译成为机器语言（目标程序，二进制指令）才能被计算机识别执行</li><li>程序库，已经翻译成了二进制代码模块</li><li>可执行程序：连接目标程序以及程序库中的文件生成一个可执行的文件（.exe）</li><li><strong>汇编程序：</strong>把汇编语言翻译成机器语言。<strong>编译程序：</strong>将高级语言源程序翻译成目标程序。<strong>解释程序：</strong>将高级语言源程序翻译成机器指令，是边翻译边执行，执行效率低，翻译一条执行一条，每次运行都要如此。Java语言就是半编译半解释，通过Java虚拟机可以实现Java跨平台。</li><li>算法与数据结构设计</li><li>源程序编辑</li><li>编译程序：进行语法检查</li><li>连接：连接目标程序以及程序库中的文件生成一个可执行的文件（.exe）。</li><li>测试</li><li>调试</li></ol><h3 id="1-6-计算机中的信息与存储单位"><a href="#1-6-计算机中的信息与存储单位" class="headerlink" title="1.6 计算机中的信息与存储单位"></a>1.6 计算机中的信息与存储单位</h3><ol><li>计算机的基本功能：都是基于算术运算和逻辑运算</li><li>计算机中的信息：控制信息（指挥计算机操作），数据信息（数值信息（整数和实数）、非数值信息）</li><li>信息的存储单位：位（bit，b）：数据的最小单位</li><li>字节（byte， B）</li><li>千字节：KB</li><li>兆字节：M</li><li>吉字节：G</li></ol><h3 id="1-7-计算机的数字系统"><a href="#1-7-计算机的数字系统" class="headerlink" title="1.7 计算机的数字系统"></a>1.7 计算机的数字系统</h3><ol><li><p>二进制系统：0和1，表示两种状态</p></li><li><p>二进制、八进制（三个二进制位构成一个八进制位）、十进制、十六进制（可以表示内存地址，例如：0xFFFF，四个二进制位构成一个十六进制位）</p></li><li><p>不能直接在高级语言中使用二进制数据</p></li><li><p>进制转换</p></li></ol><p>数据的编码表示</p><ol><li>原码：0表示正，1表示负，0的表示不唯一，进行四则运算是符号位需要单独处理，运算规则复杂</li><li>补码：0的表示唯一，符号位可以直接参加运算，减法运算可以转换位加法运算，</li><li>模数：20 % 12 = 8，12就是模数。n位二进制整数的模数为2^n^，n为小数的模数为2。</li><li>补数：一个数减去另一个数（加一个负数）等于第一个数加第二个数的补数。例如：8 + (-2) = 8 + 10(mod 12) = 6</li><li>补码的计算规则：借助中间码（反码），补码 = 原码的反码 + 1。</li><li>反码：在原码的基础上，保持符号位不变，其他位取反。</li><li>正数的原码、反码、补码是一样的</li><li>运算结果溢出：负数之和得到正数或正数之和得到负数，结果不正确，也就是结果溢出。</li><li>小数的表述：定点表示（已过时）和浮点表示（常用）。</li><li>浮点表示：N = M * 2 ^ E。</li><li>E：2的幂次，称数N的阶码，反映了该浮点数所表示的数据范围。</li><li>M：N的尾数：其位数反映了数据的精度。</li><li>字符在计算机中通过编码表示。ASCLL码、汉字编码（国标）。</li></ol><h3 id="1-8-C-开发工具"><a href="#1-8-C-开发工具" class="headerlink" title="1.8 C++开发工具"></a>1.8 C++开发工具</h3><ol><li>visual studio 2022</li><li><a href="https://blog.csdn.net/qq_30815237/article/details/87452311">(11条消息) VS如何在一个项目中添加多个包含main函数的源文件并分别调试运行_菜鸟知识搬运工的博客-CSDN博客_vs一个项目添加多个源文件</a></li></ol><h2 id="第二章-C-简单程序设计"><a href="#第二章-C-简单程序设计" class="headerlink" title="第二章 C++简单程序设计"></a>第二章 C++简单程序设计</h2><h3 id="2-1-程序实例："><a href="#2-1-程序实例：" class="headerlink" title="2.1 程序实例："></a>2.1 程序实例：</h3><ol><li><p>#include <iostream>  给出了预定义好的输入输出的功能的声明</iostream></p></li><li><p>#include 编译预处理命令，在编译器开始语法检查，开始编译程序之前，首先要按照include指令到指定的目录下，去找到iostream文件，把该文件的全部命令复制到include指定的位置，iostream类的对象cin&gt;&gt;操作，可以从标准输入设备（通常是键盘）读入数据</p></li><li><p>using namespace std；命名空间可以避免命名冲突，std 是命名空间的名字</p></li><li><p>标识符只能由数字、字母、下划线组成，第一个字符不能是数字，且区分大小写</p></li></ol><h3 id="2-2-C-的基本数据类型"><a href="#2-2-C-的基本数据类型" class="headerlink" title="2.2 C++ 的基本数据类型"></a>2.2 C++ 的基本数据类型</h3><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ol><li>程序运行过程中，数据不可变</li><li>符号常量：const 数据类型 常量名字 = 常量值，符号常量必须在定义的时候赋值</li><li>宏常量：#define MAX 1000  // 特别注意，不可以写 “ ; ” 号，且宏常量名字要全部大写</li></ol><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ol><li>程序在运行期间，数据可变</li><li>变量的定义就是给变量命名的时候分配内存空间，这就是为了存储数据</li><li>数据类型存在就是为了给变量分配合适的内存空间</li></ol><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><ol><li>基本整数类型：int，4字节</li><li>短整型：short，2字节</li><li>长整型：long，后缀为L或l，windows为4字节，Linux为4字节，8字节</li><li>长长整型：long long，后缀为LL或ll，8字节</li><li>按符号分：有符号整数（signed）、无符号整数（unsigned，后缀为U或u）</li></ol><h4 id="实数类型"><a href="#实数类型" class="headerlink" title="实数类型"></a>实数类型</h4><ol><li>单精度 float，占4字节，7位有效数字</li><li>双精度 double，占8字节，精确到15-16位有效数字</li><li>扩展精度 long double</li><li>浮点数在计算机中是近似存储的，不要比较浮点数的大小，比较浮点数的大小可以用两个数的差值来比较大小，满足规定的精度就可以了</li><li>表示的有效数字范围不同</li><li>默认的是双精度数据，所以float数据后面需要加f，不加的话会出现数据类型转换，损失精度，例如：float f1 = 3.14；这就会发生double -&gt; float</li><li>默认情况下，输出一个单精度或双精度小数，有效位数为6位。</li></ol><h4 id="字符类型-char"><a href="#字符类型-char" class="headerlink" title="字符类型(char)"></a>字符类型(char)</h4><ol><li>容纳单个字符的编码，实际上存储的也是整数。字符型变量不会把字符本身放到内存中存储，而是将该字符对应的ASCII编码的二进制数据存放到内存中</li><li>char ch = ‘a’; // 单引号，单引号里面只能写一个字符</li><li>占用1字节</li><li>‘a’ 的ASCII码值是97，’A’ 的ASCII值是65</li></ol><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><ol><li>取值只能是真（true，本质是1）或假（false，本质是0）</li><li>占1个字节</li><li>类型是：bool</li><li>非0的数字（正负整数 或 正负实数）代表真，0代表假</li></ol><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><ol><li>有字符串常量</li><li>基本类型中没有字符串变量</li><li>C语言风格的字符串：char 变量名[] = “hello world”；// 采用了字符数组存放字符串</li><li>C++风格的字符串：string 变量名 = “hello world”;  // 在C++的标准库里有String类，但要包含头文件：#include<string></string></li></ol><h3 id="2-3-C-的基本运算"><a href="#2-3-C-的基本运算" class="headerlink" title="2.3 C++的基本运算"></a>2.3 C++的基本运算</h3><h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><ol><li><p>两个整数相除，结果依然是整数，小数部分会被去除。例如：10/20 的结果是0，10/3 的结果是3。除数也就是分母不得为0，这是非法的操作。</p></li><li><p>两个小数也可以相除：0.5 / 0.25 的结果就是2。运算的结果也可以是小数，例如：10.0 / 3的结果是3.33333</p></li><li><p>取模运算的本质就是取余数，基于除法运算，因为运算符右侧的数据不得为0，两个操作数都必须是整型数据。10 % 0 是错误操作</p></li><li><p>自增、自减运算符。前置：让变量先自增或自减，再运算。后置：让变量先运算，后自增或自减。</p></li><li><p>先乘除，后加减，同级自左向右</p></li></ol><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><ol><li>“ ! ” ，逻辑非</li><li>“ &amp;&amp; ”，逻辑与</li><li>“ || ”，逻辑或</li><li>返回值是真或假</li></ol><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ol><li>复合赋值运算符：&lt;&lt;=（移位）、&gt;&gt;=、&amp;=、^=、|=等</li><li>“ = ”</li></ol><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ol><li>两个表达式的比较，返回bool类型的值，也就是真假</li><li>“ == ” 等于</li><li>“ != ” 不等于</li></ol><h3 id="2-4-C-的输入输出"><a href="#2-4-C-的输入输出" class="headerlink" title="2.4 C++的输入输出"></a>2.4 C++的输入输出</h3><ol><li><p>调用预定义的功能模块实现</p></li><li><p>从外部数据读取数据</p></li><li><p>输入：cin &gt;&gt; 变量名；</p></li><li><p>输出：cout &lt;&lt; 变量名；</p></li></ol><h3 id="2-5-C-程序执行流程"><a href="#2-5-C-程序执行流程" class="headerlink" title="2.5 C++程序执行流程"></a>2.5 C++程序执行流程</h3><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><ol><li>程序顺序执行，不发生跳转</li></ol><h4 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h4><ol><li><p>if 语句：单选择、多选择、if 嵌套。if是选择语句，执行一种选择</p></li><li><p>三目运算符：表达式1？ 表达式2：表达式3；在C++中，三目运算符返回的是变量，可以继续赋值</p></li><li><p>switch（表达式）{</p><p>​    case 结果1：执行语句；break；</p><p>​    case 结果2：执行语句；break；</p><p>​    ……</p><p>​    default：执行语句；</p><p>} // 要防止case穿透，加上break</p></li><li><p>switch的执行效率要比 if 高</p></li></ol><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ol><li>while(判断条件){</li></ol><p>​        ……</p><p>​    }</p><ol start="2"><li><p>do{</p><p>​    …</p><p>}while(判断条件)；</p></li><li><p>for(){</p><p>}</p></li></ol><h4 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h4><ol><li><p>break：出现在 switch、循环语句、嵌套循环，直接退出循环</p></li><li><p>continue：跳过本次循环</p></li><li><p>goto：无条件跳转语句；</p><p>语法：goto 标记；</p><pre class=" language-c++"><code class="language-c++">goto flag;... // 跳过该语句... // 跳过该语句flag:... // 直接执行该语句exp：int main() &#123;    cout << "1" << endl;    goto flag;    cout << "2" << endl;    cout << "3" << endl;    flag:    cout << "4" << endl;&#125;</code></pre></li></ol><h3 id="2-6-C-自定义类型之枚举类型"><a href="#2-6-C-自定义类型之枚举类型" class="headerlink" title="2.6 C++自定义类型之枚举类型"></a>2.6 C++自定义类型之枚举类型</h3><p>枚举类型：通过列出所有可取值来定义一种新类型</p><p><strong>注意：</strong>用不同的环境下，各个数据类型所占的字节数不同</p><p>​            变量声明以后要进行变量的初始化</p><h3 id="2-7-C-关键字"><a href="#2-7-C-关键字" class="headerlink" title="2.7 C++关键字"></a>2.7 C++关键字</h3><h4 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h4><p>统计数据类型所占内存的大小</p><p>sizeof（数据类型 或 具体的变量名）</p><h3 id="2-8-科学计数法"><a href="#2-8-科学计数法" class="headerlink" title="2.8 科学计数法"></a>2.8 科学计数法</h3><p>float f2 = 3e2； // 表示 f2 = 3*10^2</p><p>f2 = 3e-2; // 表示 f2 = 3*10^(-2)</p><h3 id="2-9-转义字符"><a href="#2-9-转义字符" class="headerlink" title="2.9 转义字符"></a>2.9 转义字符</h3><ol><li>用于表示不能显示出来的ASCII字符</li><li>\n 换行</li><li>\a 报警</li><li>\ \ 代表一个反斜杠\</li><li>\t 水平制表符，占八位（与前字符一共占八位），在输出的时候可以让结果看起来比较整齐</li></ol><h2 id="第三章-数组"><a href="#第三章-数组" class="headerlink" title="第三章 数组"></a>第三章 数组</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><ol><li>存放数据类型相同的数据</li><li>数组是由连续内存位置组成的</li><li>可以通过下表访问数组元素</li><li>数组的首地址和数组的第一个元素的地址是相同的</li></ol><h3 id="3-2-一维数组"><a href="#3-2-一维数组" class="headerlink" title="3.2 一维数组"></a>3.2 一维数组</h3><ol><li>定义方式：<ul><li>数据类型 数组名 [ 数组长度 ]；</li><li>数据类型 数组名 [ 数组长度 ] = { 值1， 值2， … }；未赋值的位置会用默认值填充</li><li>数据类型 数组名[ ] = { 值1，值2，…  }；</li><li>数据类型 数组名[ ]；不允许这样定义数组</li></ul></li><li>数组名的用途：<ul><li>通过数组名可以获取数组在内存中的首地址(十六进制数)：直接输出数组名</li><li>可以统计整个数组在内存中的长度</li><li>数组名是常量，不可以进行赋值</li></ul></li></ol><h3 id="3-3-二维数组"><a href="#3-3-二维数组" class="headerlink" title="3.3 二维数组"></a>3.3 二维数组</h3>1. 定义方式：   * 数据类型  数组名[ 行数 ] [ 列数 ]；   * 数据类型  数组名[ 2 ] [ 2 ] = {{ 行1值1，行1值2 }，{ 行2值1，行2值2  }}；// 代码可读性更好   * 数据类型  数组名[ 行数 ] [ 列数 ] = { 值1，值2，值3，...  }; // 没有初始化的就会填充默认值，自动划分行列   * 数据类型  数组名[ ] [ 列数 ] = { 数据1，数据2，数据3，...  }；   * 一定要指定列数，否则不能划分二维数组的行2. 二维数组名的用途：   * 查看二维数组所占的内存空间：sizeof(数组名 / 数组名[行] )；   * 查看二维数组的首地址   * 第一行的地址 = 数组首地址 = 二维数组的第一个元素的地址<h2 id="第四章-函数"><a href="#第四章-函数" class="headerlink" title="第四章 函数"></a>第四章 函数</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><ol><li>代码复用，实现函数的功能</li></ol><h3 id="4-2-函数的定义"><a href="#4-2-函数的定义" class="headerlink" title="4.2 函数的定义"></a>4.2 函数的定义</h3><ol><li><p>返回值类型</p></li><li><p>函数名</p></li><li><p>参数列表</p></li><li><p>函数体语句</p></li><li><p>return表达式</p><pre class=" language-c++"><code class="language-c++">返回值类型 函数名（参数列表该参数列表是形参）&#123;    函数体语句;    return 值;&#125;</code></pre></li></ol><h3 id="4-3-函数调用"><a href="#4-3-函数调用" class="headerlink" title="4.3 函数调用"></a>4.3 函数调用</h3><ol><li><p>调用语法：</p><pre class=" language-c++"><code class="language-c++">返回类型 接收返回值的地址或变量 = 函数名称（参数列表，传递的是实参）;</code></pre></li></ol><h3 id="4-4-值传递"><a href="#4-4-值传递" class="headerlink" title="4.4 值传递"></a>4.4 值传递</h3><ol><li>首先要定义函数</li><li>函数进行  值传递（值传递是区别于地址传递的）  时，并不会影响实参，只是影响了形参</li></ol><h3 id="4-5-函数的常见样式"><a href="#4-5-函数的常见样式" class="headerlink" title="4.5 函数的常见样式"></a>4.5 函数的常见样式</h3><ol><li><p>无参无返回值</p><pre class=" language-c++"><code class="language-c++">void test01()&#123;    函数体;&#125;调用：test01();</code></pre></li><li><p>有参无返回值</p><pre class=" language-c++"><code class="language-c++">void test02(形参列表)&#123;    函数体;&#125;调用：test02(实参列表);</code></pre></li><li><p>无参有返回值</p><pre class=" language-c++"><code class="language-c++">返回值类型 test03()&#123;    函数体;    return 返回值;&#125;调用：返回值类型 接收返回值的变量或地址 = test03();</code></pre></li><li><p>有参有返回值</p><pre class=" language-c++"><code class="language-c++">返回值类型 test03(形参列表)&#123;    函数体;    return 返回值;&#125;调用：返回值类型 接收返回值的变量或地址 = test03(实参列表);</code></pre></li></ol><h3 id="4-6-函数声明"><a href="#4-6-函数声明" class="headerlink" title="4.6 函数声明"></a>4.6 函数声明</h3><ol><li><p>函数的定义是函数的具体实现，而函数的声明在函数定义之前，告诉编译器函数的存在</p></li><li><p>函数的声明可以写多次，但是函数的定义只能写一次</p></li><li><p>普通函数的定义；</p><p>main()函数；</p><p>// 这样普通函数就不需要声明</p></li><li><p>普通函数声明；</p><p>main()函数；</p><p>普通函数定义；</p><p>// 这样普通函数就需要先声明</p></li></ol><h3 id="4-7-函数的分文件编写"><a href="#4-7-函数的分文件编写" class="headerlink" title="4.7 函数的分文件编写"></a>4.7 函数的分文件编写</h3><ol><li><p>让代码结构更加清晰</p></li><li><p>函数的分文件编写步骤：</p><ul><li><p>创建后缀名为 .h 的头文件，并在头文件中写出函数的声明</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std; // 在 .h 头文件中要包含iostream和命名空间// 函数的声明，在.h的头文件中声明void swap(int a, int b);</code></pre></li><li><p>创建后缀名为 .cpp 的源文件，并在源文件中写出函数的定义</p><pre class=" language-c++"><code class="language-c++">#include"swap.h"  // 要把 .h 的头文件包含到 .cpp 文件中// 函数定义，定义交换两数，不需要返回值void swap(int num1, int num2) &#123;    int temp = 0;    temp = num1;    num1 = num2;    num2 = temp;    cout << "num1 = " << num1 << endl;    cout << "num2 = " << num2 << endl;&#125;</code></pre></li><li><p>创建一个测试的源文件</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include"swap.h"  // 要引入 .h 的头文件using namespace std;int main()&#123;    swap(10, 20);    return 0;&#125;</code></pre></li></ul></li></ol><h2 id="第五章-指针"><a href="#第五章-指针" class="headerlink" title="第五章 指针"></a>第五章 指针</h2><h3 id="5-1-概念"><a href="#5-1-概念" class="headerlink" title="5.1 概念"></a>5.1 概念</h3><ol><li><p>设置一个变量 a 来保存另一个变量 b 的地址，那么该变量 a 就是指针变量</p></li><li><p>指针变量的定义：</p><p>数据类型  *  指针变量名；</p><pre class=" language-c++"><code class="language-c++">int a = 10;int * p = &a; // 将a的地址取出赋值到指针变量p,p的值就是变量a的地址，而*p就是变量a的值</code></pre></li><li><p>指针变量的使用：</p><p>可以通过  解引用(* 代表解引用，找到指针指向的内存中的数据)  的方式来找到指针指向的内存</p><pre class=" language-c++"><code class="language-c++">*p == a; // true</code></pre></li><li><p><strong>特别注意：</strong></p><p>*++p : 会先执行指针后移再取值</p></li></ol><h3 id="5-2-指针所占的内存空间"><a href="#5-2-指针所占的内存空间" class="headerlink" title="5.2 指针所占的内存空间"></a>5.2 指针所占的内存空间</h3><ol><li>在32位操作系统下： 不管是什么类型的指针都占用4个字节空间</li><li>在64位系统下，指针占用8个字节的内存空间</li><li>特别注意：p才是指针变量存放了地址值，*p通过解引用，它的值是p中存放的地址指向的变量的值</li><li>*p 占用的内存空间跟变量 a 所占的内存空间大小相同</li><li>*p是变量a的引用</li><li>*p被赋予新的值，变量a也会随之改变，但 p 中存放的地址仍然是变量 a 的地址</li></ol><h3 id="5-3空指针和野指针"><a href="#5-3空指针和野指针" class="headerlink" title="5.3空指针和野指针"></a>5.3空指针和野指针</h3><ol><li><p>空指针用于给指针变量进行初始化，NULL指针是指向编号为 0 的空间</p><p>int *p = null；</p></li><li><p>空指针不可以进行访问：0-255之间的内存编号是系统占用的，因此不可以访问</p></li><li><p>野指针指向了非法的内存空间</p><pre class=" language-c++"><code class="language-c++">int * p = (int *)0x1100; // 强制将十六进制转为int类型的指针，随便拿一个地址进行操作cout<< *p << endl; // 在程序中要避免这种情况</code></pre></li><li><p>空指针和野指针都不是我们申请的空间，因此不要访问，这是一种危险的行为</p></li></ol><h3 id="5-4-const修饰指针"><a href="#5-4-const修饰指针" class="headerlink" title="5.4 const修饰指针"></a>5.4 const修饰指针</h3><ol><li><p>const修饰指针–常量指针：</p><pre class=" language-c++"><code class="language-c++">const int * p = &a;// 指针的指向可以修改（也就是p中存放的地址可以修改，但是*p的值不可以修改），但是指针指向的值不可以修改</code></pre></li><li><p>const修饰常量 – 指针常量</p><pre class=" language-c++"><code class="language-c++">int * const p = &a;// 指针的指向不可以修改（p中存放的地址不可以修改），指针指向的值可以修改（*p的值可以修改）</code></pre></li><li><p>const既修饰指针，又修饰常量</p><pre class=" language-c++"><code class="language-c++">const int * const p = &a;// 指针的指向不可以修改，指针指向的值也不可以修改</code></pre></li><li><p>const修饰啥，啥就不可修改</p></li></ol><h3 id="5-5-指针和数组"><a href="#5-5-指针和数组" class="headerlink" title="5.5 指针和数组"></a>5.5 指针和数组</h3><ol><li><p>利用指针访问数组元素</p><pre class=" language-c++"><code class="language-c++">int a[] = &#123;1, 2, 3, 4&#125;;int * p = a; // 数组名就是数组的首地址cout<<*p<<endl; // 输出的值就是数组的第一个元素的值p++; // 指针后移，p的地址就是数组中第二个元素的地址cout<<*p<<endl; // 此时的值就是数组中第二个元素的值</code></pre></li></ol><h3 id="5-6-指针和函数"><a href="#5-6-指针和函数" class="headerlink" title="5.6 指针和函数"></a>5.6 指针和函数</h3><ol><li><p>值传递</p><pre class=" language-c++"><code class="language-c++">void swap(int num1, int num2) &#123;    int temp = 0;    temp = num1;    num1 = num2;    num2 = temp;    cout << "num1 = " << num1 << endl;    cout << "num2 = " << num2 << endl;&#125;// 调用：swap(a, b);</code></pre></li><li><p>地址传递：地址传递可以修改实参</p><pre class=" language-c++"><code class="language-c++">// 该函数是指交换了变量的值，变量的地址不改变void swap(int * num1, int * num2) &#123;    int temp = 0;    temp = *num1;    *num1 = *num2;    *num2 = temp;&#125;// 调用：swap(&a, &b);// *num1相当于变量a的引用，*num1的值改变，变量a的值也就改变了，但是变量a的地址和num1中存储的地址值是一样的</code></pre></li></ol><h2 id="第六章-结构体"><a href="#第六章-结构体" class="headerlink" title="第六章 结构体"></a>第六章 结构体</h2><h3 id="6-1-概念"><a href="#6-1-概念" class="headerlink" title="6.1 概念"></a>6.1 概念</h3><ol><li>用户自定义的数据类型，允许用户存储不同的数据类型</li></ol><h3 id="6-2-结构体定义和使用"><a href="#6-2-结构体定义和使用" class="headerlink" title="6.2 结构体定义和使用"></a>6.2 结构体定义和使用</h3><ol><li><p>语法：</p><p>struct  Student { // 结构体名首字母大写</p><p>​        String  name； // 可以理解为属性，用C++的字符串要包含头文件：#include<string></string></p><p>​        int   age；</p><p>​        int  score；</p><p>} student03；// 在定义结构体的同时创建结构体变量student03，然后可以通过 . 运算符来初始化，这种方式使用较少</p></li><li><p>通过学生类型创建具体学生</p><ul><li>struct Student student01；</li><li>struct Student student02 = {“李四”，19，80}；</li><li>在定义结构体的同时顺便创建结构体变量</li></ul></li><li><p>访问结构体变量中的属性：通过 . 运算符访问结构体中的属性</p><ul><li>student01.name = “张三”;</li><li>student01.age = 18;</li><li>student01.score = 100;</li><li>cout&lt;&lt;student01.name&lt;&lt;endl;</li><li>cout&lt;&lt;student01.age&lt;&lt;endl;</li><li>cout&lt;&lt;student01.score&lt;&lt;endl;</li></ul></li><li><p>struct 在结构体创建变量的时候可以省略，但在定义结构体时该关键字不可以省略</p></li></ol><h3 id="6-3-结构体数组"><a href="#6-3-结构体数组" class="headerlink" title="6.3 结构体数组"></a>6.3 结构体数组</h3><ol><li><p>语法：</p><pre class=" language-c++"><code class="language-c++">struct 结构体名 数组名[元素个数] = &#123;&#123;&#125;, &#123;&#125;, &#123;&#125;,...&#125;；</code></pre></li><li><p>实例</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;// 创建结构体struct Student&#123;    string name;    int age;    int score;&#125;;int main() &#123;    // 创建结构体数组    struct Student students[] = &#123;        &#123;"张三", 18, 100&#125;,        &#123;"李四", 28, 90&#125;,        &#123;"王五", 38, 66&#125;    &#125;;    // 访问结构体数组中的数据    students[2].name = "赵六";    students[2].age = 49;    students[2].score = 80;        // 遍历结构体数组    for (int i = 0; i < 3; i++)    &#123;        cout << students[i].name << "\t" << students[i].age << "\t" << students[i].score << "\t" << endl;    &#125;&#125;</code></pre></li></ol><h3 id="6-4-结构体指针"><a href="#6-4-结构体指针" class="headerlink" title="6.4 结构体指针"></a>6.4 结构体指针</h3><p>利用操作符：-&gt; 可以通过 结构体指针 访问结构体属性</p><pre class=" language-c++"><code class="language-c++">    // 创建学生结构变量,struct关键字可以省略    struct Student student01 = &#123;"张三", 20, 90&#125;;        // 通过指针指向结构体变量,struct关键字可以省略    struct Student * p = &student01;    // 通过指针访问结构体变量中的数据    cout << p->name << endl;    cout << p->age << endl;    cout << p->score << endl;</code></pre><h3 id="6-5-结构体嵌套结构体"><a href="#6-5-结构体嵌套结构体" class="headerlink" title="6.5 结构体嵌套结构体"></a>6.5 结构体嵌套结构体</h3><ol><li><p>结构体中的成员可以是另一个结构体</p></li><li><pre class=" language-c++"><code class="language-c++">// Student结构体struct Student&#123;    string name;    int age;    int score;&#125;;// Teacher结构体struct Teacher&#123;    int id;    string name;    int age;    struct Student student; // 要在Teacher结构体前先定义Student结构体&#125;;</code></pre></li><li><p>使用</p><pre class=" language-c++"><code class="language-c++">    // 创建 Teacher 结构体变量 teacher01    Teacher teacher01 = &#123;10000, "老王", 50&#125;;    // 给 student 初始化    teacher01.student.name = "小豪";    teacher01.student.age = 23;    teacher01.student.score = 80;    cout << teacher01.id << endl;    cout << teacher01.name << endl;    cout << teacher01.age << endl;    cout << teacher01.student.name << endl;    cout << teacher01.student.age << endl;    cout << teacher01.student.score << endl;</code></pre></li><li><p>string 类型的数据占40个字节</p><pre class=" language-c++"><code class="language-c++">    cout << sizeof(teacher01) << endl; // 104个字节    cout << sizeof(string) << endl; // 40个字节    cout << sizeof(Student) << endl; // 48个字节</code></pre></li></ol><h3 id="6-6-结构体作为函数参数"><a href="#6-6-结构体作为函数参数" class="headerlink" title="6.6 结构体作为函数参数"></a>6.6 结构体作为函数参数</h3><ol><li><p>将结构体作为参数向函数中传递实参</p></li><li><p>值传递：在printStudent(struct Student student)中修改数据不影响实参的数据</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;// Student结构体struct Student&#123;    string name;    int age;    int score;&#125;;// 打印学生的信息void printStudent(struct Student student) &#123;    cout << student.name << endl;    cout << student.age << endl;    cout << student.score << endl;&#125;int main() &#123;    // 结构体作为函数的参数：将学生传入一个参数中，打印学生的信息    // 创建学生变量    struct Student student01 = &#123;"张三", 20, 100&#125;;    printStudent(student01);&#125;</code></pre></li><li><p>地址传递：在printStudent(struct Student * student)中修改数据影响实参的数据，这或许在某些场景下不是一个好方案</p><p>地址传递：将形参改为指针，可以节省内存空间，而且不会复制新的副本（student）出来</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;// Student结构体struct Student&#123;    string name;    int age;    int score;&#125;;// 打印学生的信息void printStudent(struct Student * student) &#123;        student->name = "李四";    cout << student->name << endl; // 输出了“李四”    cout << student->age << endl;    cout << student->score << endl;&#125;int main() &#123;    // 结构体作为函数的参数：将学生传入一个参数中，打印学生的信息    // 创建学生变量    struct Student student01 = &#123;"张三", 20, 100&#125;;    printStudent(&student01);    // 在printStudent(&student01);中修改了姓名，那么也会输出 “李四”    cout << student01.name << endl;&#125;</code></pre></li></ol><h3 id="6-7-结构体中的const"><a href="#6-7-结构体中的const" class="headerlink" title="6.7 结构体中的const"></a>6.7 结构体中的const</h3><ol><li><p>用 const 防止误操作</p></li><li><p>const的使用场景</p><pre class=" language-c++"><code class="language-c++">// 打印学生的信息void printStudent(const struct Student * student) &#123;        // student->name = "李四"; 加入了const之后，一旦有修改操作就会报错，可以方式我们的误操作     cout << student->name << endl; // 输出了“李四”    cout << student->age << endl;    cout << student->score << endl;&#125;// 使用了地址传递实参，和const关键字，既可以减小内存的使用，又可以防止修改数据而影响实参的误操作</code></pre></li></ol><h1 id="C-第二阶段"><a href="#C-第二阶段" class="headerlink" title="C++第二阶段"></a>C++第二阶段</h1><p>本阶段主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓</p><h2 id="第一章-内存分区模型"><a href="#第一章-内存分区模型" class="headerlink" title="第一章 内存分区模型"></a>第一章 内存分区模型</h2><ol><li><p>C++在执行时，将内存大方向分为4个区域</p><ul><li><p>代码区：存放  <strong>函数体</strong>  的二进制代码，由操作系统进行管理</p></li><li><p>全局区：存放  <strong>全局变量（在函数以外的定义的变量）</strong> 和  <strong>静态变量</strong>(static int a = 10;)  以及  <strong>常量</strong></p></li><li><p>栈区：由编译器自动分配释放，存放  <strong>函数的参数值</strong>，  <strong>局部变量（在函数内部定义的变量）</strong>等</p></li><li><p>堆区：由  <strong>程序员</strong>  分配和释放，若程序员不释放，<strong>程序结束时由操作系统回收</strong></p></li></ul></li><li><p>四区存在的意义：</p><p>不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程</p></li></ol><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><ol><li>在程序编译后，生成了.exe的可执行程序，未执行该程序前分为两个区域</li><li>代码区：<ul><li>存放CPU执行的机器指令（二进制指令）</li><li>代码区是共享的，共享的目的是对于频繁调用被执行的程序，只需要在内存中有一份代码即可</li><li>代码区是只读的，使其只读的原因是防止程序意外地修改了代码的指令</li></ul></li><li>全局区：<ul><li><strong>全局变量（在函数以外的定义的变量）</strong>  和  <strong>静态变量(static int a = 10;)</strong>  存放在此</li><li>全局区还包含了  <strong>常量区</strong>、  <strong>字符串常量（”hello world”）</strong>  和  <strong>其他全局定义的常量(全局定义的const int a = 10;)</strong>  也存放在此</li><li>该区的数据在程序结束后由操作系统释放</li></ul></li></ol><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><ol><li><p>栈区：</p><ul><li><p>由编译器自动  分配  和  释放，存放函数的参数值，局部变量等</p></li><li><p>注意事项：不要返回局部变量的地址</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int * func() &#123; // 可以返回一个指针    int a = 10; // 局部变量存放在栈区，栈区的数据在函数执行完后会自动释放    cout << "func()函数中变量a的地址：" << &a << endl; // func()函数中变量a的地址：00000076ECB8F7E4    return &a; // 返回局部变量的地址&#125;int main() &#123;    int * p = func(); // 指针变量 p 接收了函数func()返回的局部变量 a 的地址值    cout << "输出指针p中存放的地址值：" << p << endl; // 输出指针p中存放的地址值：00000076ECB8F7E4，第一次可以打印正确是因为编译器做了保留    cout << "输出指针p指向的内存中的值" << *p << endl; // 输出指针p指向的内存中的值-858993460，第二次这个数据就不保留了，因此不可以返回局部变量的地址    cout << "再次输出指针p指向的内存中的值" << *p << endl; // 再次输出指针p指向的内存中的值-858993460&#125;</code></pre></li></ul></li><li><p>堆区：</p><ul><li><p>由程序员分配释放，若程序员不释放，程序结束后由操作系统回收</p></li><li><p>在C++中主要利用new在堆区开辟空间</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int * func() &#123;    // 利用new关键字可以将数据开辟到堆区     int * p = new int(10); // new运算符会返回在堆区开辟的内存的地址，指针p本质上也是局部变量，存在栈区，但是其中存放的地址编号是指向了堆区的数据    cout << p << endl; // 0000013BF43AA240    return p;&#125;int main() &#123;    int* q = func();    cout << *q << endl; // 10    cout << q << endl; // 0000013BF43AA240&#125;</code></pre></li></ul></li></ol><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><ol><li>C++利用new操作符在堆区开辟数据</li><li>堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 <strong>delete</strong></li><li>new返回的是该数据类型的指针也就地址</li><li>利用new创建数组：int* arr = new int[10]；此时这个数组存放到了堆区</li><li>释放数组：delete[] arr；</li></ol><h2 id="第二章-引用"><a href="#第二章-引用" class="headerlink" title="第二章 引用"></a>第二章 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><ol><li><p>给一个变量起别名</p><pre class=" language-c++"><code class="language-c++">int a = 10; // &a中4个字节，存放10int &b = a; b = 20; // a的值也就改为了20，因为 变量a 和 别名b 指向了同一块内存空间</code></pre></li><li><p>语法：数据类型  &amp;别名 = 变量原名；</p></li></ol><h3 id="2-2-引用的注意事项"><a href="#2-2-引用的注意事项" class="headerlink" title="2.2 引用的注意事项"></a>2.2 引用的注意事项</h3><ol><li><p>引用必须初始化：也就是不可以int &amp;b；这样就是未初始化</p></li><li><p>引用在初始化后，就不可以改变了</p><pre class=" language-c++"><code class="language-c++">int a = 10;int &b = a; // 将变量b设置为变量a的别名以后，就不可以设置为别的变量的引用了int c = 20;// int &b = c; // 不可以这样操作，引用b不可以再指向别的内存空间了b = c; // 这是可以的，因为这仅仅是赋值操作，而不是修改引用</code></pre></li></ol><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><ol><li><p>函数传参时，可以利用引用的技术让形参修饰实参</p></li><li><p>可以简化指针修改实参</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 引用的方式交换数据，这就改变了实参中的值void swap(int &a, int &b) &#123;    int temp;    temp = a;    a = b;    b = temp;&#125;int main() &#123;    int a = 10;    int b = 20;    swap(a, b);     cout << "a = " << a << endl;    cout << "b = " << b << endl;&#125;</code></pre></li><li><p>值传递、地址传递、引用传递</p></li></ol><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><ol><li><p>不要返回局部变量的引用，局部变量创建在栈区，由编译器分配销毁，在执行完函数以后，编译器就会销毁</p></li><li><p>函数调用可以作为左值</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 引用的方式交换数据，这就改变了实参中的值void swap(int &a, int &b) &#123;    int temp;    temp = a;    a = b;    b = temp;&#125;int& func01() &#123;    int a = 10; // 局部变量，存放在栈区，在函数执行结束之后，编译器自动释放a指向的内存，存在风险    return a;&#125;int& func02() &#123;    static int a = 10; // 静态变量存放在全局区，全局区上的数据在程序结束以后才会被释放    return a;&#125;int main() &#123;    int& b = func01();    cout << b << endl; // 第一次结果正确，是因为编译器做了保留    cout << b << endl; // 第二次结果是乱码，因为func01()中的变量a内存已经释放        int& c = func02(); // c是func02()函数中a的别名，c和func02()中的a内存地址是一样的    cout << c << endl;    cout << c << endl;        // 函数调用可以作为左值,func02()作为了左值    func02() = 1000; // 将1000赋值给了func02()中的静态变量a,而c又是a的引用，也就是c指向了变量a的内存地址    cout << c << endl; // 那么此时的输出就是1000    cout << c << endl;&#125;</code></pre></li></ol><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><ol><li><p>引用的本质在C++内部实现是一个指针常量</p><pre class=" language-c++"><code class="language-c++">void func(int& ref)&#123; // 自动转化为 int * const ref = &a;    ref = 100; &#125;int main()&#123;    int a = 10;        int& ref = a; // 自动转换为 int * const ref = &a; 这就是指针常量，该常量的指向的地址不可以修改，但是该常量中存放发地址指向的值是可以改变的        ref = 20; // 这是允许的        func(a); // a传入func函数以后，也进行了引用&#125;</code></pre><ol start="2"><li>引用一旦初始化后就不可以改变：这就是因为其本质的原因</li><li>C++推荐使用引用</li></ol></li></ol><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><ol><li><p>常量引用用来修饰形参，防止误操作</p></li><li><p>引用必须引用一块合法的内存空间：int &amp;b = 10；这是错误的</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;void showValue(const int& val) &#123;    // val = 1000; 加上const以后，引用就不可以修改了，这样就防止了修改数据的误操作     cout << val << endl;&#125;int main() &#123;    int a = 10;    // int& b = 10; // 这是错误的，引用必须引用一块合法的内存空间    // 加上const之后，编译器将代码修改为：int temp = 10; const int& b = temp;    const int& b = 10; // 这是可以的,但是加上const就不可以修改了,引用b不可以修改    // 修饰形参防止误操作    int val = 100;    showValue(val);    cout << val << endl;&#125;</code></pre></li></ol><h2 id="第三章-函数提高"><a href="#第三章-函数提高" class="headerlink" title="第三章 函数提高"></a>第三章 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><ol><li><p>函数的形参列表可以被赋予默认值的</p></li><li><p>语法：</p><pre class=" language-c++"><code class="language-c++">返回值类型 函数名(参数类型 参数a = 10, ...)int func(int a, int b = 10, int c = 30)&#123;    函数体;&#125;调用：func(10); // 10被赋予了形参afunc(10, 20) // 10被赋予了形参a，20被赋予了形参b// 优先使用传入的实参，若没有实参传入，则使用默认值</code></pre></li><li><p>注意：</p><ul><li><p>如果某个位置已经有了默认参数，那么从这个位置之后，从左到右都必须设置默认值</p></li><li><p>如果函数的声明有默认参数，函数的实现就不能有默认参数了</p><pre class=" language-c++"><code class="language-c++">// 声明和实现只能有一个有默认参数int func(int a, int b = 20, int c = 30);int func(int a, int b, int c)&#123; // 调用该函数的时候，若没有实参传入，会使用该函数声明的默认值    return a + b + c; &#125;</code></pre></li></ul></li></ol><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p>语法：返回值类型  函数名(数据类型) {函数体;}</p><pre class=" language-c++"><code class="language-c++">// 占位参数可以有默认参数void func01(int a, int)&#123; // 第二个int起到占位的作用，必须传入相应的实参    &#125;void func02(int a, int = 10)&#123;&#125;int main()&#123;    int a = 10;    func01(a, 10);    func02(a); // 第二个参数会使用默认值&#125;</code></pre><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><ol><li><p>函数名可以相同，提高复用性</p></li><li><p>条件：</p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数类型不同，或者参数个数不同，或者顺序不同</li></ul><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;void func() &#123;    // 函数体&#125;void func(int a) &#123;    // 函数体&#125;void func(int a, int b) &#123;    // 函数体&#125;void func(string name) &#123;    // 函数体;&#125;void func(int age, string name) &#123;    // 函数体&#125;void func(string name, int age) &#123;    // 函数体&#125;int main() &#123;    func();    func(10);    func(10, 20);    func("hello");    func("jack", 20);    func(20, "jack");&#125;</code></pre></li><li><p>函数的返回值不可以作为函数重载的条件，也就是函数返回类型不会区别重载的函数</p></li><li><p>引用作为重载条件</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;void func(int& a) &#123;    // 函数体&#125;void func(const int& a) &#123; // 将常数10传入该函数以后，const int& a = 10;是合法的    // 函数体&#125;int main()&#123;    int a = 10;    func(a); // 调用了func(int& a);    func(10); // 调用了func(const int& a); int& a = 10是不合法的，所以不会调用func(int& a);&#125;</code></pre></li><li><p>函数重载碰到函数默认参数</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;void func(int a) &#123;&#125;void func(int a, int b = 10) &#123;    // 函数体&#125;int main()&#123;    // func(10); // 这就报错了，因此这样调用编译器就不知道该调用哪个重载函数了,这就出现了歧义    func(10, 20); // 这肯定没有问题&#125;</code></pre></li></ol><h2 id="第四章-类和对象"><a href="#第四章-类和对象" class="headerlink" title="第四章 类和对象"></a>第四章 类和对象</h2><p>C++的三大特性：封装、继承、多态</p><p>对象有属性和行为</p><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义："><a href="#4-1-1-封装的意义：" class="headerlink" title="4.1.1 封装的意义："></a>4.1.1 封装的意义：</h4><ul><li><p>将属性和行为作为一个整体，表现生活中的事物</p></li><li><p>类中的属性和行为统称为成员</p></li><li><p>属性称为成员属性或成员变量</p></li><li><p>行为称为成员函数或成员方法</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;class Student&#123;public:    // 属性    string name;    string id;    // 行为    void showInfo() &#123;        cout << "姓名：" << name << endl;        cout << "学号：" << id << endl;    &#125;    void setName(string name) &#123;        this->name = name;    &#125;    void setId(string id) &#123;        this->id = id;    &#125;&#125;;int main() &#123;    Student student01; // 实例化    student01.setName("张三");    student01.setId("12345678");    student01.showInfo();&#125;</code></pre></li><li><p>将属性和行为加以控制权限</p><p>公共权限：public，成员类内可以访问，类外也可以访问</p><p>保护权限：protected，类内可以访问，类外不可以访问，父类中的保护权限的内容子类可以访问</p><p>私有权限：private，类内可以访问，类外不可以访问，父类中私有权限的内容子类不可以访问</p><p>默认权限：private</p></li></ul><h4 id="4-1-2-struct-结构体-和class-类-的区别："><a href="#4-1-2-struct-结构体-和class-类-的区别：" class="headerlink" title="4.1.2 struct(结构体)和class(类)的区别："></a>4.1.2 struct(结构体)和class(类)的区别：</h4><ol><li>class 的默认权限是 private</li><li>struct 的默认权限是 public</li></ol><h4 id="4-1-3-成员属性私有化"><a href="#4-1-3-成员属性私有化" class="headerlink" title="4.1.3 成员属性私有化"></a>4.1.3 成员属性私有化</h4><ol><li><p>将所有成员属性私有化，可以字节控制读写的权限</p></li><li><p>对于写可以检测数据的有效性（可以在setter方法中设置set的条件）</p></li></ol><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><ol><li>对象的初始化和清理是非常重要的安全问题，一个对象或者变量没有初始化，对其使用后果是未知的</li><li>使用完一个对象和变量，没有及时清理，也会造成一定的安全问题</li><li>构造函数和析构函数解决上述两个问题，这两个函数将会被编译器自动调用，完成对象的初始化和清理</li><li>对象的初始化和清理工作是编译器强制要求的</li><li>不写构造函数和析构函数编译器会提供空实现的构造函数和析构函数</li></ol><p><strong>构造函数</strong>：主要用于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用</p><pre class=" language-c++"><code class="language-c++">类名()&#123;    函数体;&#125;没有返回值类型，不写void函数名和类名相同构造函数可以有参数，可以重载程序在调用对象时候会自动调用构造，无须手动调用，只会调用一次</code></pre><p><strong>析构函数</strong>：用于对象销毁前系统的自动调用，执行一些清理工作</p><pre class=" language-c++"><code class="language-c++">~类名()&#123;    函数体;&#125;没有返回值，也不写void函数名和类型相同，在函数名前面加 ~析构函数不可以有参数，不可以发发生重载对象在销毁前，会自动调用析构函数创建了几个对象，就调用几次</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person&#123;public:    // 构造函数    Person() &#123;        cout << "构造函数调用" << endl;    &#125;        // 析构函数    ~Person() &#123;        cout << "析构函数" << endl;    &#125;private:&#125;;int main() &#123;    Person person;&#125;</code></pre><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p><strong>构造函数分类</strong>：</p><ol><li><p>有参构造</p><pre class=" language-c++"><code class="language-c++">// 有参构造函数Person(string name, int age) &#123;    cout << "构造函数调用" << endl;&#125;</code></pre></li><li><p>无参构造</p><pre class=" language-c++"><code class="language-c++">// 无参构造函数Person() &#123;    cout << "构造函数调用" << endl;&#125;</code></pre></li><li><p>普通构造</p></li><li><p>拷贝构造</p><pre class=" language-c++"><code class="language-c++">// 拷贝构造Person(const Person& p)&#123;    age = p.age;&#125;// 将传入的p的所有属性，拷贝到我身上</code></pre></li></ol><p><strong>调用方式：</strong></p><ol><li><p>在调用无参构造函数的时候不需要写括号；</p></li><li><p>匿名对象：Person(10)；当前执行结束后，系统会立即回收匿名对象，也就是调用析构函数</p></li><li><p>不要利用拷贝构造函数初始化匿名对象：编译器会认为：Person(p3) == Person p3;</p></li><li><p>隐式转换：Person p4 = 10；相当于写了 Person p4 = Person(10); // 也调用了有参构造</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;class Person&#123;public:    // 无参构造函数    Person() &#123;        cout << "无参构造函数调用" << endl;    &#125;        // 有参构造    Person(int age)&#123;        cout << "有参构造函数" << endl;    &#125;        // 有参构造函数    Person(string name, int age) &#123;        cout << "构造函数调用" << endl;    &#125;    Person(const Person & p) &#123;        age = p.age;        cout << "拷贝构造函数调用" << endl;    &#125;    // 析构函数没有参数，没有重载    ~Person() &#123;        cout << "析构函数" << endl;    &#125;private:    string name;    int age;&#125;;int main() &#123;    Person person01; // 默认构造函数的调用，也就是无参构造函数的调用，在调用无参构造函数的时候不需要写括号    Person person02("小楼", 20); // 调用有参构造函数    Person person03(person02); // 拷贝构造函数调用&#125; </code></pre><h4 id="4-2-3-拷贝构造函数的调用"><a href="#4-2-3-拷贝构造函数的调用" class="headerlink" title="4.2.3 拷贝构造函数的调用"></a>4.2.3 拷贝构造函数的调用</h4><ol><li><p>使用一个已经创建完毕的对象来初始化一个新对象</p></li><li><p>值传递的方式给函数参数传值</p></li><li><p>值方式返回局部对象</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;private:    public:    int age = 0;    Person() &#123;        cout << "无参构造函数" << endl;    &#125;    Person(int age) &#123;        this->age = age;        cout << this->age;        cout << "有参构造函数" << endl;    &#125;    Person(const Person& person) &#123; // 用const限制person,使得person不会被修改        this->age = person.age;        cout << this->age;        cout << "拷贝构造函数的调用" << endl;    &#125;    ~Person() &#123;        cout << "析构函数调用" << endl;    &#125;&#125;;void test01(Person person) &#123;    // person 是局部变量，在test函数运行结束以后，会调用析构函数&#125;Person test02() &#123;    Person person;    return person; // 返回的不是person对象，而仅仅是person的一个副本，在这个过程中，又因为创建了副本而调用了拷贝构造函数    // 该函数结束之后，person这个局部变量也就调用析构函数而被释放&#125;int main() &#123;    // 使用一个已经创建完毕的对象来初始化一个新对象    Person person01(10);    Person person02(person01);    // 值传递的方式给函数参数传值,这回调用拷贝构造函数，也就是Person person(person02)    test01(person02);    // 值方式返回局部对象    Person person03 = test02(); // person03是一个新的对象，这行语句是对象之间的赋值&#125;</code></pre></li></ol></li></ol><h4 id="4-2-3-构造函数的调用规则"><a href="#4-2-3-构造函数的调用规则" class="headerlink" title="4.2.3 构造函数的调用规则"></a>4.2.3 构造函数的调用规则</h4><p>默认情况下，C++编译器会至少给一个类添加3个函数</p><ol><li>默认无参构造函数</li><li>默认无参析构函数</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>构造函数调用规则：<ul><li>如果用户自定义构造函数，c++就不会提供默认的无参构造器</li><li>如果用户自定拷贝构造函数，c++就不会提供默认的拷贝构造函数（默认的拷贝构造函数仅仅是值的复制，也就是值拷贝）</li></ul></li><li>如果自定义了其他构造函数，但没有定义拷贝构造函数，则会调用默认的拷贝构造函数</li><li>如果自定义了其他构造函数，编译器就不再提供默认无参构造函数</li><li>如果自定义了拷贝构造函数，编译器就不会提供默认无参构造函数</li></ol><h4 id="4-2-4-深拷贝和浅拷贝"><a href="#4-2-4-深拷贝和浅拷贝" class="headerlink" title="4.2.4 深拷贝和浅拷贝"></a>4.2.4 深拷贝和浅拷贝</h4><ol><li><p>浅拷贝：简单的赋值拷贝操作</p><pre class=" language-c++"><code class="language-c++">class Person &#123;public:    int age;    int* high;    Person() &#123;        cout << "无参构造函数的调用" << endl;    &#125;    Person(int age, int h) &#123;        this->age = age;        high = new int(h); // 用new在堆区创建变量，返回的该变量的地址，但是堆区创建的变量由程序员手动释放，释放可以在析构函数中释放        cout << "有参构造函数的调用" << endl;    &#125;    ~Person() &#123;        // 在析构函数中释放堆区创建的变量        if (high != NULL) &#123;            delete high; // 手动释放堆区的变量            high = NULL; // 防止野指针出现而指向非法的内存空间，可以将指针high设置为null，        &#125;        cout << "析构构造函数的调用" << endl;    &#125;&#125;;// 浅拷贝void test01() &#123;    Person person01(10, 180);    cout << "person01的年龄：" << person01.age << "\t" << "person01的身高为：" << *person01.high<< endl;    Person person02(person01);     // 使用了默认的拷贝构造函数，这是浅拷贝，会将person01创建的堆区的变量的地址拷贝给person02    // 切记，这是地址的拷贝，而不是地址指向的内存的存储内容的拷贝    cout << "person02的年龄：" << person02.age << "\t" << "person02的身高为：" << *person02.high << endl;    // 执行析构函数的时候，先执行person02的析构函数，再执行person01的析构函数    // person02执行析构函数之后就会把指针high指向的空间释放，因此在person01执行析构函数的时候就会使得堆区的内存重复释放，发生异常    // 这就是浅拷贝带来的问题&#125;</code></pre></li><li><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><pre class=" language-c++"><code class="language-c++">Person(const Person& person) &#123;    this->age = person.age;    // 深拷贝的操作,在堆区重新申请内存空间，进行拷贝操作    high = new int(*person.high);&#125;// 如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</code></pre></li></ol><h4 id="4-2-5-初始化列表"><a href="#4-2-5-初始化列表" class="headerlink" title="4.2.5 初始化列表"></a>4.2.5 初始化列表</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    int m_a;    int m_b;    int m_c;    // 初始化列表初始化属性    Person(int a, int b, int c):m_a(a), m_b(b), m_c(c) &#123;    &#125;&#125;;void test01() &#123;    Person person(10, 20, 30);    cout << person.m_a << endl;    cout << person.m_b << endl;    cout << person.m_c << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="4-2-6-类对象作为类成员"><a href="#4-2-6-类对象作为类成员" class="headerlink" title="4.2.6 类对象作为类成员"></a>4.2.6 类对象作为类成员</h4><ol><li><p>一个类的成员中包含了另一个类的对象，也就是对象成员</p></li><li><p>当其他类对象作为本类成员，该对象的构造函数先执行，再调用本类的构造函数</p></li><li><p>当其他类对象作为本来成员，本类的析构函数先执行，再执行其他类对象的析构函数</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;class Phone&#123;public:    string phone_name;    // 无参构造函数    Phone() &#123;        cout << "Phone的无参构造函数" << endl;    &#125;    Phone(string phone_name) &#123;        this->phone_name = phone_name;        cout << "Phone的有参构造函数" << endl;    &#125;    ~Phone() &#123;        cout << "Phone的析构函数" << endl;    &#125;&#125;;class Person &#123;public:    string name;    Phone phone;    // 初始化列表初始化属性    Person(string name, Phone phone)&#123;        this->name = name;        this->phone = phone;        cout << "Person的有参构造函数" << endl;    &#125;    ~Person() &#123;        cout << "Person的有析构函数" << endl;    &#125;&#125;;void test01() &#123;    Phone applePhone("苹果手机");    Person person("张三", applePhone);    cout << person.name << endl;    cout << person.phone.phone_name<< endl;&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="4-2-7-静态成员"><a href="#4-2-7-静态成员" class="headerlink" title="4.2.7 静态成员"></a>4.2.7 静态成员</h4><ol><li><p>静态成员函数</p><ul><li>所有的对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li><li><p>静态成员属性</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    static int m_a; // 静态成员变量    int m_b; // 非静态成员变量    // 静态成员函数    static void func01() &#123;        m_a = 100;        cout << "public权限的静态成员函数func01()" << endl;        cout << m_a << endl; // 静态成员函数访问静态成员属性        // cout << m_b << endl; // 静态成员函数不能访问非静态成员属性，因为非静态成员属性属于一个特定的类对象，静态成员函数在调用的时候若修改了非静态成员属性，这是不符合逻辑的    &#125;private:    static void func02() &#123;        m_a = 200;        cout << "private权限的静态成员函数func02（）" << endl;    &#125;&#125;;int Person::m_a = 0;  // 静态成员变量，类内声明，类外初始化void test01() &#123;    Person person;    person.func01(); // 通过对象访问静态成员函数    Person::func01(); // 通过类名访问静态成员函数    // Person::func02(); // 类外无法访问私有权限的静态成员函数&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h3 id="4-3-C-对象模型和-this-指针"><a href="#4-3-C-对象模型和-this-指针" class="headerlink" title="4.3 C++ 对象模型和 this 指针"></a>4.3 C++ 对象模型和 this 指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><ol><li><p>成员变量和成员函数是分开存储的，只有非静态的成员变量才属于类的对象上</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    int m_a; // 非静态成员变量，属于类的对象上    static int m_b; // 静态成员变量，类内声明，类外初始化,不属于类的对象上    void func01() &#123;&#125; // 非静态成员函数也不属于类的对象上    static void func02()&#123;&#125; // 静态成员函数也不属于类的对象上&#125;;int Person::m_b = 100; // 静态成员变量，类内声明，类外初始化void test01() &#123;    Person person;    // 因为C++编译器会给每个空对象分配一个字节空间，为了区分空对象占内存的位置    // 每个空对象都有独一无二的内存地址    cout << sizeof(person) << endl; // 空对象占用的内存空间是 1 字节&#125;</code></pre></li></ol><h4 id="4-3-2-this指针"><a href="#4-3-2-this指针" class="headerlink" title="4.3.2 this指针"></a>4.3.2 this指针</h4><ol><li><p>this指针指向被调用的成员函数所属的对象</p></li><li><p>this指针不需要定义，直接使用</p></li><li><p>this指针隐含每一个非静态成员函数内的一种指针</p></li><li><p>当形参和成员变量同名时，可用this指针来解决名称冲突</p></li><li><p>返回对象本身用this</p></li><li><p>this只能用于非静态成员函数内部，也就是必须在类内的非静态成员函数才能使用</p><pre class=" language-c++"><code class="language-c++">    // 当形参和成员变量同名时，可用this指针来解决名称冲突    Person(int age) &#123;        this->m_age = age; // this指针指向被调用的成员函数所属的对象，也就是this指向了对象person01    &#125;    // 返回的是引用，不会创建副本    Person& ageAdd(Person person) &#123;        this->m_age = this->m_age + person.m_age;        return *this; // this是指针，也就是被指向的对象的地址值，*this就是this指向的对象的内容    &#125;    // 返回的是值，会创建副本，该副本的存储地址和this指针指向的地址不是一个，但是该副本也是Person类的一个对象    Person ageAdd(Person person) &#123;        this->m_age = this->m_age + person.m_age;        return *this; // this是指针，也就是被指向的对象的地址值，*this就是this指向的对象的内容    &#125;    // 返回的是一个地址，该地址和this指向的内存空间是一样的，当然也不会创建副本，    Person* ageAdd(Person person) &#123;        this->m_age = this->m_age + person.m_age;        return this; // this是指针，也就是被指向的对象的地址值，*this就是this指向的对象的内容    &#125;</code></pre></li></ol><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><ol><li><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p></li><li><p>如果用到this指针，需要加以判断保证代码的健壮性</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    int age;    void showClassName() &#123;        cout << "Person" << endl;    &#125;    void showPersonAge() &#123;        if (this == NULL) &#123;            cout << "this指针为null,以下程序将不会执行" << endl;            return;        &#125;        cout << age << endl;    &#125;&#125;;void test01() &#123;    Person* person01 = NULL; // 空指针,NULL也是一个地址值    person01->showClassName(); // 执行成功    person01->showPersonAge(); // 执行失败，因为调用这个函数需要用到this指针指向person01，而person01是NULL,this指向了NUll指针&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="4-3-4-const修饰成员函数：常函数"><a href="#4-3-4-const修饰成员函数：常函数" class="headerlink" title="4.3.4 const修饰成员函数：常函数"></a>4.3.4 const修饰成员函数：常函数</h4><ol><li>成员函数后加const，我们称这个函数为常函数</li><li>常函数内不可以修改成员属性</li><li>成员属性声明加关键字  mutable 后，在常函数中依然可以修改</li><li>常对象：声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数，因为常函数中一般不会修改成员属性，除非常函数中要修改加有 mutable 修饰的成员属性</li></ol><pre class=" language-c++"><code class="language-c++">class Person &#123;public:    int age;    mutable int m_a;    void showPerson() const&#123;        // 程序出错        age = 100; // 本质是this-> = age，加上const关键字后，this指针的本质是：const Person * this，那么this指针的指向和指向的内容都是不可以修改的                // 特殊的变量加了mutable        m_a = 100; // 程序正确,m_a就可以修改了    &#125;&#125;;void test01() &#123;    const Person person01; // 常对象，常对象是不可以修改的    // person01.age = 100; // 程序出错,常对象无法修改    person01.m_a = 100; // 程序正确，因为 m_a 加了关键字 mutable，该常对象的这个属性就可以修改了    person01.showPerson(); // 程序正确，常对象只能调用常函数，若调用普通函数可能修改常对象的属性，这是不允许的&#125;</code></pre><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>友元的目的就是让一个函数或者类访问另一个类中私有成员</p><p>关键字：friend</p><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>// 建筑类class Building &#123;    // 将test01在类中声明为该类的友元函数，test01()就可以访问该类的私有成员了    friend void test01(Building& building);        // 将GoodGay设置为友元类    friend class GoodGay;        // 将GoodGay中的visit()函数单独设置为该类的友元    friend void GoodGay::visit();public:    Building() &#123;        m_SittingRoom = "客厅";        m_BedRoom = "卧室";    &#125;    string m_SittingRoom;private:    string m_BedRoom;&#125;;// 全局函数,想访问类的私有成员和公有成员void test01(Building& building) &#123;    // 访问公有属性    cout << building.m_SittingRoom << endl;    // 访问私有属性    cout << building.m_BedRoom << endl; // 出错，不可以访问私有属性    // 在类中声明test01()为友元函数，那么test01()就可以访问私有属性了&#125;int main() &#123;    Building building;    test01(building);&#125;</code></pre><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><pre class=" language-c++"><code class="language-c++">class  GoodGay &#123;public:    Building* building = new Building; // 要将这个类对象的属性初始化    void visit() &#123;        // 访问Building中的公有和私有属性        cout << building->m_SittingRoom << endl; // 访问公有属性，这是可以的        cout << building->m_BedRoom << endl; // 友元类访问私有属性，    &#125;&#125;;</code></pre><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><p>将类的特定的成员函数设置为另一个类的友元</p><p>friend void 类名::函数名();</p><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>进行类对象的自定义运算方式</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>实现两个自定义的数据类型相加的运算</p><p>关键字：operator+</p><p>参数不同是可以重载的</p><p>不要滥用运算符重载</p><p>对于内置的基本数据类型的表达式的运算符是不可以改变的</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    int m_a;    int m_b;    // 成员函数重载加号运算符    /*Person operator+(Person person) &#123;        Person temp;        temp.m_a = this->m_a + person.m_a;        temp.m_b = this->m_b + person.m_b;        return temp;    &#125;*/&#125;;Person operator+(Person person01, Person person02) &#123;    Person temp;    temp.m_a = person01.m_a + person02.m_a;    temp.m_b = person01.m_b + person02.m_b;    return temp;&#125;void test01() &#123;    Person person01;    person01.m_a = 10;    person01.m_b = 10;    Person person02;    person02.m_a = 20;    person02.m_b = 20;    Person person03;    person03 = person01 + person02; // 其本质就是 person03 = person01.operator+(person02);        cout << person03.m_a << endl;    cout << person03.m_b << endl;&#125;void test02() &#123;    Person person01;    person01.m_a = 10;    person01.m_b = 10;    Person person02;    person02.m_a = 20;    person02.m_b = 20;    Person person03;        person03 = person01 + person02; // 其本质就是 person03 = operator+(person01, person02); 调用的是全局运算符重载函数    cout << person03.m_a << endl;    cout << person03.m_b << endl;&#125;int main() &#123;    //test01();    test02();&#125;</code></pre><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>左移运算符配合友元可以将自定义数据类型直接输出</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    int m_a;    int m_b;    // 通常不会利用成员函数，符重载左移运算符 "<<"    // 因为无法实现cout在左侧，不好实现    // 但是可以使用全局函数来实现该运算符重载&#125;;// 只能利用全局函数重载左移运算符// cout是 ostream 的对象，且只能有一个对象，不能创建副本，因此用引用指向同一块内存// 不需要返回值ostream& operator<<(ostream& cout, Person person) &#123; // 本质调用：operator<<(cout, p),简化cout<<person;    cout << person.m_a << endl;    cout << person.m_b << endl;    return cout;&#125;void test01() &#123;    Person person01;    person01.m_a = 10;    person01.m_b = 10;    cout << person01 << endl;    // 使用一次左移运算符就返回一次cout对象&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>通过重载递增运算符，可以实现自定义数据类型的自增或自减运算</p><p>前置递增返回的是引用</p><p>后置递增返回的是值</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;    friend ostream& operator<<(ostream& cout, Person person);public:        Person(int a) &#123;        m_a = a;    &#125;        // 重载前置++运算符    Person& operator++() &#123;        ++m_a;        return *this;    &#125;    // 重载后置++运算符    Person operator++(int) &#123; // 用int占位，用于区分这是后置递增        Person temp = *this;        m_a++;        return temp; // 返回的是值，是一个副本，该副本记录了未自增时的数据    &#125;private:    int m_a;&#125;;ostream& operator<<(ostream& cout, Person person) &#123;    cout << person.m_a << endl;    return cout;&#125;void test01() &#123;    Person person01(10);    cout << ++person01 << endl; // 实现了了自定义类的自增运算    cout << person01++ << endl;    cout << person01 << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>进行自定义对象的赋值运算</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    Person(int age) &#123;        m_age = new int(age);    &#125;    ~Person() &#123;        if (m_age != NULL) &#123;            delete m_age;            m_age = NULL; // 防止m_age指向非法的内存空间        &#125;    &#125;    // 重载赋值运算符    // 链式编程，返回类型为Person    Person& operator=(Person& person) &#123;        // 编译器提供的是浅拷贝        // 因此在重载赋值运算符的时候，进行深拷贝        // 首席判断属性是否在堆区，若在堆区就要释放干净，然后再进行深拷贝        if (m_age != NULL) &#123;            delete m_age;            m_age = NULL;        &#125;        m_age = new int(*person.m_age);        return *this;    &#125;    int* m_age;&#125;;void test01() &#123;    Person person01(10);    Person person02(20);    Person person03(30);    person03 = person02 = person01;  // 赋值运算符是可以进行对象的拷贝的，会调用默认的拷贝构造函数，就行对象属性值的拷贝,这是浅拷贝，有风险    // person01和person02中的属性共同指向了一块内存空间，若person01执行了析构函数，释放了这块内存空间    // 当person02调用析构函数的时候，就无法释放已经被person01释放的内存，而报错    // 堆区的内存重复释放，程序出错    // 解决方法：    // 深拷贝替换浅拷贝，用户自己定义拷贝构造函数    cout << *person01.m_age << endl;    cout << *person02.m_age << endl;    cout << *person03.m_age << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p>可以让两个自定义类型的对象就行比较大小</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    Person(int age) &#123;        m_age = age;    &#125;    bool operator==(Person person) &#123;        if (m_age == person.m_age) &#123;            return true;        &#125;        return false;    &#125;    int m_age;&#125;;void test01() &#123;    Person person01(10);    Person person02(10);    cout << (person01 == person02) << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><p>函数调用运算符()也可以重载</p><p>由于重载后使用的方式非常像函数调用，因此可以称为仿函数</p><p>仿函数没有固定写法</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Person &#123;public:    void operator()(int a) &#123;        cout << a << endl;    &#125;&#125;;void test01() &#123;    Person person;    person(10); // 由于和函数调用非常相似，就称为仿函数&#125;int main() &#123;    test01();&#125;</code></pre><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h3><p>抽象、共性、特性</p><p>代码复用</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>子类也称为派生类，父类也称为基类</p><p>class 子类名 ：继承方式 父类名{</p><p>}</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p><strong>公有继承：</strong></p><ol><li>父类中的私有属性不可以继承，其他权限的属性都可以由子类继承，且父类中的这些属性在子类中属性的权限不变</li><li>父类中保护成员在子类中依然是保护权限，子类可以访问，该成员在子类中依然是保护权限，保护权限类外不可以访问</li><li>父类中私有成员在子类中不可以访问</li></ol><p><strong>保护继承：</strong></p><ol><li>父类中的公有成员、保护成员在子类中变为保护成员，保护成员在类外访问不到</li><li>父类中的私有成员，子类中不可以访问</li></ol><p><strong>私有继承：</strong></p><ol><li>父类中的公有成员、保护成员在子类中称为私有成员，私有成员在类外无法访问</li><li>父类中的私有成员，在子类中不可以访问</li></ol><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220413170510476.png" alt="继承关系"></p><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><ol><li>父类中的所有非静态成员属性都会被子类继承</li><li>父类中私有成员属性被编译器隐藏，因此无法在子类访问，但是确实被继承了</li></ol><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><ol><li>子类继承父类后，当创建子类对象，也会调用父类的构造函数</li><li>创建子类对象后，也会创建父类对象</li><li>先调用父类的构造函数，再调用子类的构造函数</li><li>先调用子类的析构函数，再调用父类的析构函数</li></ol><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><ol><li>子类对象加父类作用域可以访问父类的同名成员</li><li>访问子类的同名成员，直接访问即可</li><li>访问父类的同名成员，指定父类的作用域操作即可：子类对象.父类::欲访问的父类中的属性。</li><li>如果子类中出现和父类同名的函数，子类会隐藏父类中所有同名的函数，如果想访问父类的同名函数，就需要限定作用域：子类对象.父类名::欲访问的父类中的函数</li></ol><h4 id="4-6-6-继承同名静态成员处理"><a href="#4-6-6-继承同名静态成员处理" class="headerlink" title="4.6.6 继承同名静态成员处理"></a>4.6.6 继承同名静态成员处理</h4><ol><li><p>静态成员和非静态成员出现同名，处理方式一致</p></li><li><p><strong>切记：</strong>静态属性要在类内声明，类外初始化</p></li><li><p>父类中出现了与子类同名的静态函数，父类的同名静态函数会被隐藏，必须通过父类的作用域才能访问</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Base &#123;public:    static int m_a; // 类内静态属性声明&#125;;int Base::m_a = 100; // 类外静态属性初始化class Son : public Base&#123;public:    static int m_a; // 覆盖父类同名静态属性&#125;;int Son::m_a = 200;void test01() &#123;    // 1,创建对象访问静态属性    Son son;    cout << "son的静态属性值" << son.m_a << endl;    cout << "Bese的静态属性值" << son.Base::m_a << endl;    // 2，通过类名访问静态同名属性    cout << "Son的静态属性值" << Son::m_a << endl;    // Son要通过类名访问父类作用域下的静态属性    cout << "Base的静态属性值" << Son::Base::m_a << endl;&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><ol><li><p>C++允许一个类继承多个类</p></li><li><p>语法：</p><pre class=" language-c++"><code class="language-c++">class 子类：继承方式 父类1，继承方式：父类2...</code></pre></li><li><p>多继承可能会引发父类中同名成员的出现，需要加作用域区分</p></li><li><p>C++实际开发中不建议使用多继承</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Base01 &#123;public:    int m_a;    Base01() &#123;        m_a = 100;    &#125;&#125;;class Base02 &#123;public:    int m_a;    Base02() &#123;        m_a = 200;    &#125;&#125;;class Son : public Base01, public Base02 &#123;public:    int m_c;    int m_d;    Son() &#123;        m_c = 300;        m_d = 400;    &#125;&#125;;void test01() &#123;    Son son;    // 父类出现同名的属性，要加作用域进行访问    cout << son.Base01::m_a << endl;     cout << son.Base02::m_a << endl;&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p>两个派生类继承自同一个类</p><p>又有某个类同时继承了这两个派生类</p><p>这种继承称为菱形继承，也是钻石继承</p><p>两个父类拥有相同的属性时可以加以作用域区分</p><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220511145702023.png" alt="菱形继承"></p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Animal &#123;public:    int m_a;&#125;;// 利用虚继承解决菱形继承的问题// 继承之前，加上关键字 virtual 变为虚继承// Animal 类称为 虚基类class Sheep : virtual public Animal &#123;&#125;;// 利用虚继承解决菱形继承的问题// 继承之前，加上关键字 virtual 变为虚继承// Animal 类称为 虚基类class Tuo : virtual public Animal &#123;&#125;;class SheepTuo : public Sheep, public Tuo &#123;&#125;;void test01() &#123;    SheepTuo sheepTuo;    sheepTuo.Sheep::m_a = 30;    sheepTuo.Tuo::m_a = 20;    // 当发生虚继承之后，同名继承的属性就只有一个，类似于共享的一份数据    // 因此 sheepTuo.Sheep::m_a = 30;之后sheepTuo.Tuo::m_a = 20;就将数据修改为了20    // 而且sheepTuo.m_a 可以不加作用域进行访问，不会出现数据不明确的情况    // 这是为什么？    // 因为：在底层，第三层的类会直接找到第一层的公有的属性，进而继承第一层的属性（该属性同名出现在第二层继承的两个类中）    // 第三层找到第一层的属性（该属性被第二层的多个类继承）,是由第三层通过第二层的指针找到的第一层的共有同名属性的    cout << sheepTuo.Sheep::m_a << endl;    cout << sheepTuo.Tuo::m_a << endl;    cout << sheepTuo.m_a << endl;&#125;int main() &#123;    test01();&#125;</code></pre><p>菱形继承使用较少</p><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p>父类的引用可以指向子类的对象，不需要类型转换</p><p><strong>静态多态：</strong>函数重载 和 运算符重载属于静态多态，复用函数名</p><p><strong>动态多态：</strong>派生类和虚函数实现运行时多态</p><p><strong>静态多态和动态多态的区别：</strong></p><p>静态多态的函数地址早绑定——编译阶段确定函数地址</p><p>动态多态的函数地址晚绑定——运行阶段确定函数地址</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;class Animal &#123;public:    virtual void speak() &#123; // 要实现子类对象的动态绑定，就需要将父类的函数设置为虚函数        cout << "动物在叫" << endl;    &#125;&#125;;class Cat :public Animal &#123;public:    void speak() &#123; // 子类重写父类的虚函数，重写的返回值类型，函数名、参数列表都要与父类虚函数一致        cout << "猫在说话" << endl;    &#125;&#125;;void doSpeak(Animal& animal) &#123; // 父类的指针或者引用来指向子类的对象，来实现动态绑定                            // 这是因为引用或指针指向了一块子类对象的空间，这就调用了子类对象的函数    animal.speak();&#125;void test01() &#123;    Cat cat;    doSpeak(cat);&#125;int main() &#123;    test01();&#125;// 输出结果：动物在叫// 因为：执行说话的函数地址早绑定（在编译阶段确定函数地址）// 如果想执行让猫说话，这个函数的地址就不能提前绑定，需要在运行阶段进行绑定，地址晚绑定// 将Animal类中的speak()函数设置为虚函数，就可以进行晚绑定，也就是动态多态，动态绑定，如下程序：class Animal &#123;public:     virtual void speak() &#123;        cout << "动物在叫" << endl;    &#125;&#125;;// 进行修改以后，输出结果就是：猫在说话</code></pre><p><strong>动态多态：</strong></p><ul><li><p>得有继承关系</p></li><li><p>子类要重写父类的虚函数，重写：函数返回值类型，函数名，参数列表都得完全相同</p></li><li><p>父类的指针或者引用来指向子类的对象</p></li></ul><p><strong>动态原理：</strong></p><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220415094100054.png" alt="动态多态"></p><p><strong>多态的优点：</strong></p><ul><li><p>代码组织和结构清晰</p></li><li><p>可读性强</p></li><li><p>利于前后期扩展维护</p></li></ul><h4 id="4-7-2-多态案例一—计算器类"><a href="#4-7-2-多态案例一—计算器类" class="headerlink" title="4.7.2 多态案例一—计算器类"></a>4.7.2 多态案例一—计算器类</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>class AbstractCalculator &#123;public:    int m_a;    int m_b;    virtual int getResult() &#123;        return 0;    &#125;    &#125;;// 加法计算class AddCalculator : public AbstractCalculator &#123;        // 重写父类的虚函数，这样就可以实现动态绑定    int getResult() &#123;        return m_a + m_b;    &#125;&#125;;// 减法计算class SubCalculator : public AbstractCalculator &#123;    // 重写父类的虚函数，这样就可以实现动态绑定    int getResult() &#123;        return m_a - m_b;    &#125;&#125;;void test01() &#123;    // 父类的指针或引用指向之类的对象，实现动态绑定的使用    AbstractCalculator* absCal = new AddCalculator;    absCal->m_a = 10;    absCal->m_b = 10;    cout << absCal->m_a << endl;    cout << absCal->m_b << endl;    cout << absCal->getResult() << endl;    // 手动释放堆区创建的 AddCalculator 对象    delete absCal; // 释放的是absCal指向是堆区的空间的内容，absCal指针本身并没有销毁，可以指向别的对象    absCal = NULL; // 因此要将abcCal指向NUll,防止该指针（野指针）指向不该指向的地方    SubCalculator sub;    absCal = &sub; // absCal指向了SubCalculator对象，改变了指向    absCal->m_a = 20;    absCal->m_b = 20;    cout << absCal->m_a << endl;    cout << absCal->m_b << endl;    cout << absCal->getResult() << endl;    &#125;int main() &#123;    test01();&#125;</code></pre><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><ol><li><p>在父类中实现虚函数是无意义的，因此将父类的虚函数设置为纯虚函数</p></li><li><p>语法：virtual 返回值类型 函数名 （形参列表） = 0；</p></li><li><p>当类中有了纯虚函数，这个类也就称为抽象类</p></li><li><p>抽象类的特点：无法实例化对象、子类必须重写抽象类中的纯虚函数，否则也属于抽象类</p></li><li><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 将基类设置为抽象类（只要有一个纯虚函数就被称为抽象类）// 抽象类是无法实例化对象的// 抽象类的子类必须要重写父类的纯虚函数，否则子类也属于抽象类class Base &#123;public:    // 纯虚函数    virtual void func01() = 0;    void func02() &#123;        cout << "父类的func02函数" << endl;    &#125;;&#125;;class Son :public Base &#123;    // 重写父类的纯虚函数，否则依旧是抽象类    void func01() &#123;        cout << "重写了父类的纯虚函数" << endl;    &#125;&#125;;void test01() &#123;    Son son;    Base* base = &son;    base->func01();    base->func02();&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="4-7-4-虚析构和纯虚析构"><a href="#4-7-4-虚析构和纯虚析构" class="headerlink" title="4.7.4 虚析构和纯虚析构"></a>4.7.4 虚析构和纯虚析构</h4><ol><li><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时就无法调用到子类的析构函数</p></li><li><p>解决方式：将父类中的析构函数改为虚析构或者纯虚析构</p></li><li><p>虚析构和纯虚析构的共性：</p><ul><li>可以解决父类指针释放子类的对象</li><li>都需要具体的函数实现</li></ul></li><li><p>虚析构和纯虚析构的区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul></li><li><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<iostream>class Animal &#123;public:    virtual void speak() = 0;    Animal() &#123;        cout << "执行了父类的构造函数" << endl;    &#125;    /*    virtual ~Animal() &#123; // 将父类中的析构函数改为虚析构函数，在执行父类的析构函数时也会调用子类的析构函数        cout << "执行了父类的析构函数" << endl;    &#125;    */    virtual ~Animal() = 0; // 纯虚析构在类内声明，在类外实现    // 有了纯虚析构函数，该类也属于抽象类，无法实例化对象    // 因为父类中也有可能在堆区创建的属性，因此也需要被释放，也得实现析构函数，因此纯虚析构在类内只是声明，在类外实现释放父类的堆区属性&#125;;// 在类外实现纯虚析构Animal:: ~Animal() &#123;    cout << "父类的纯虚析构" << endl;&#125;class Cat : public Animal &#123;public:    string* cat_name;    Cat(string name) &#123;        cout << "执行了子类的构造函数" << endl;        cat_name = new string(name); // cat_name 指向了堆区的数据    &#125;    void speak() &#123;        cout << *cat_name << "猫在叫" << endl;    &#125;    ~Cat() &#123;        if (cat_name != NULL) &#123;            delete cat_name;            cat_name = NULL;            cout << "执行了子类的析构函数" << endl;        &#125;    &#125;&#125;;void test01() &#123;        Animal* animal = new Cat("tom");    animal->speak();    // 父类指针在析构的时候，不会调用子类的析构函数，导致子类如果有堆区的属性就无法释放，造成内存泄露    delete animal;    animal = NULL;&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><p>如果子类中没有堆区数据，可以在父类中不写纯虚构或纯虚析构</p><h2 id="第五章-文件操作"><a href="#第五章-文件操作" class="headerlink" title="第五章 文件操作"></a>第五章 文件操作</h2><ol><li><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束就会被释放</p></li><li><p>通过文件可以将数据持久化</p></li><li><p>C++对文件操作需要包含头文件<fstream></fstream></p></li><li><p>文件分为：文本文件和二进制文件</p></li><li><p>文本文件：文件以文本的ASCII码形式存储在计算机中，编码格式为 ANSI，其他格式的文件无法进行读写</p></li><li><p>二进制文件：文件以文本的二进制形式存储在计算机中，用户一般不能能直接读懂</p></li></ol><p><strong>操作文件的三大类：</strong></p><ul><li>ofstream：写操作</li><li>ifstream：读操作</li><li>fstream：读写操作，在进行读写操作时，读操作和写操作分开写，分别打开和关闭fstream流</li></ul><h3 id="5-1-文本文件"><a href="#5-1-文本文件" class="headerlink" title="5.1 文本文件"></a>5.1 文本文件</h3><h4 id="5-1-1-写文件"><a href="#5-1-1-写文件" class="headerlink" title="5.1.1 写文件"></a>5.1.1 写文件</h4><ol><li>包含头文件：#include<fstream></fstream></li><li>创建对象流：ofstream ofs；</li><li>打开文件：ofs.open(“文件的路径”, 打开方式);</li><li>写数据：ofs&lt;&lt;“写入的数据”&lt;&lt;endl;</li><li>关闭文件：ofs.close()；</li></ol><p><strong>文件的打开方式：</strong></p><ul><li>ios::in 为读文件而打开文件</li><li>ios::out 为写文件而打开文件</li><li>ios::ate 初始位置：文件尾</li><li>ios::app 追加方式写文件</li><li>ios::trunc 如果文件存在先删除，再创建</li><li>ios::binary 二进制方式</li><li><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220502181325694.png" alt="文件打开方式"></li></ul><p><strong>注意：</strong></p><ol><li><p>文件打开方式可以配合使用，利用 | 操作符，例如：ios::binary | ios::out 用二进制方式写文件</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<fstream>using namespace std;int main() &#123;    ofstream ofs; // 写文件    ofs.open("test.txt", ios::out); // 若不指定路径就会把创建的文件放到该项目的目录下    ofs << "写入了C++" << endl;    ofs << "写入了C++" << endl;    ofs << "写入了C++" << endl;    ofs.close(); // 关闭输出流&#125;</code></pre></li></ol><h4 id="5-1-2-读文件"><a href="#5-1-2-读文件" class="headerlink" title="5.1.2 读文件"></a>5.1.2 读文件</h4><ol><li><p>包含头文件#include<fstream></fstream></p></li><li><p>创建流对象ifstream ifs;</p></li><li><p>打开文件，并判断是否打开成功：ifs.open(“文件路径”, 打开方式);</p></li><li><p>读数据</p></li><li><p>关闭流</p><pre class=" language-c++"><code class="language-c++">// 读文件    ifstream ifs;    ifs.open("F:\\VisualStudioC++Study\\C++核心学习\\test.txt", ios::in); // 指定文件路径读文件    if (!ifs.is_open()) &#123;        cout << "文件打开失败" << endl;        return 0;    &#125;    // 读数据    // 第一种：    char buf01[1024] = &#123;0&#125;;    while (ifs>>buf01)    &#123;        cout << buf01 << endl;    &#125;    // 第二种    char buf02[1024] = &#123; 0 &#125;;    while (ifs.getline(buf02, sizeof(buf02))) &#123;        cout << buf02 << endl;    &#125;    // 第三种    string buf03;    while (getline(ifs, buf03))    &#123;        cout << buf03 << endl;    &#125;    // 第四种    char c;    while ((c = ifs.get()) != EOF)    &#123;        cout << c;    &#125;    ifs.close();</code></pre></li></ol><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>打开方式要制定为 ios::binary</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要是利用流对象调用成员函数 write</p><p>函数原型：</p><pre class=" language-c++"><code class="language-c++">ostream& write(const char * buffer, int len);// 字符指针buffer指向内存中一段存储空间// len 是读写的字节数</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<fstream>class Person &#123;public:    char m_name[64];    int m_age; &#125;;int main() &#123;    // 创建流对象    ofstream ofs;    // 打开文件    ofs.open("person.txt", ios::out | ios::binary);    // 写文件    Person person = &#123;"张三", 19&#125;;    ofs.write((const char*)& person, sizeof(person));    // 关闭文件    ofs.close();&#125;</code></pre><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：</p><pre class=" language-c++"><code class="language-c++">ifstream& read(char* buffer, int len);// 字符指针buffer指向内存中的一段存储空间// len是读写的字节数</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<fstream>class Person &#123;public:    char m_name[64];    int m_age; &#125;;int main() &#123;    // 创建流对象，并指定文件路径，和读取方式    ifstream ifs("person.txt", ios::in | ios::binary);    // 判断文件是否打开    if (!(ifs.is_open())) &#123;        cout << "文件打开失败" << endl;        return 0;    &#125;    // 读取文件到person对象中    Person person;    ifs.read((char *)&person, sizeof(Person));    // 输出person对象的数据    cout << person.m_age << endl;    cout << person.m_name << endl;    // 关闭流    ifs.close();&#125;</code></pre><h1 id="C-提高阶段"><a href="#C-提高阶段" class="headerlink" title="C++提高阶段"></a>C++提高阶段</h1><p>主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层的使用</p><h2 id="第一章-模板"><a href="#第一章-模板" class="headerlink" title="第一章 模板"></a>第一章 模板</h2><h3 id="1-1-模板的概念"><a href="#1-1-模板的概念" class="headerlink" title="1.1 模板的概念"></a>1.1 模板的概念</h3><ol><li>模板就是建立通用的模具，大大提高复用性</li><li>特点：<ul><li>模板不可以直接使用，它是一个框架</li><li>模板的通用性不是万能的</li></ul></li></ol><h3 id="1-2-函数的模板"><a href="#1-2-函数的模板" class="headerlink" title="1.2 函数的模板"></a>1.2 函数的模板</h3><h4 id="1-2-1-函数模板概念"><a href="#1-2-1-函数模板概念" class="headerlink" title="1.2.1 函数模板概念"></a>1.2.1 函数模板概念</h4><ol><li><p>C++另一种编程思想就是泛型编程，主要利用的技术就是模板</p></li><li><p>C++提供两种模板机制：函数模板和类模板</p></li><li><p>函数模板的作用：建立一个通用函数，其返回值类型和参数类型可以不具体指定，用一个虚拟的类型来代表，也就是类型参数化</p></li><li><p>语法：</p><pre class=" language-c++"><code class="language-c++">template<typename T>函数声明或定义// template 声明创建模板// typename 表明后面的符号是一种数据类型，可以用class代替// T 通用的数据类型，名称可以替换，通常为大写字母</code></pre></li><li><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 函数模板// 两个整型交换的函数void swapInt(int &a, int &b) &#123;    int temp = a;    a = b;    b = temp;&#125;// 交换两个浮点型void swapDouble(double &a, double &b) &#123;    double temp = a;    a = b;    b = temp;&#125;// 设置一个交换数据的函数模板template<typename T> // T 表示一个通用的数据类型void mySwap(T& a, T& b) &#123;    T temp = a;    a = b;    b = temp;&#125;void test01() &#123;    int a = 10;    int b = 20;    swapInt(a, b);    cout << a << endl;    cout << b << endl;    double c = 1.1;    double d = 3.2;    swapDouble(c, d);    cout << c << endl;    cout << d << endl;        // 用模板函数交换数字    // 1. 自动类型转换    mySwap(a, b);    cout << a << endl;    cout << b << endl;    // 2. 指定类型交换    mySwap<double>(c, d);    cout << c << endl;    cout << d << endl;&#125;int main() &#123;    test01();&#125;</code></pre></li><li><p>函数模板的注意事项：</p><ul><li><p>自动类型推导，必须推导出一致的数据类型T，才可以使用</p></li><li><p>模板必须要确定出 T 的数据类型才可以使用</p><pre class=" language-c++"><code class="language-c++">tempalate<class T> //typename 可以被替换为 class 作用都是一样的template<class T>void func() &#123;    cout << "func调用" << endl;&#125;void test02() &#123;    func<int>(); // 必须要指定 T 的数据类型才可以使用&#125;</code></pre></li></ul></li></ol><p><strong>7. 案例：</strong>利用模板封装一个排序函数，实现不同数据类型的数据的排序，从大到小，选择排序</p><p>对 char 数组，和 int 数组进行排序</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 运用模板提供通用的选择排序模板函数template<typename T>void selectSort(T arr[], int length) &#123;    int max;    for (int i = 0; i < length; i++)    &#123;        max = i;        // 取得每一轮比较的最大值的下标        for (int j = i + 1; j < length; j++)        &#123;            if (arr[max] < arr[j])            &#123;                max = j;            &#125;        &#125;        if (max != i) // 说明max发生了改变,在每一轮比较后，发现了更大的值        &#123;            // 交换小标指向的值            T temp = arr[max];            arr[max] = arr[i];            arr[i] = temp;        &#125;    &#125;    // 排好序以后，将数组输出    for (int i = 0; i < length; i++)    &#123;        cout << arr[i] << " ";    &#125;&#125;// 对字符数组进行排序void test01() &#123;    char ch[] = "abcdef"; // 在c++中可以用 char 定义字符数组    int chLength = sizeof(ch) / sizeof(char);    selectSort(ch, chLength); // 自动进行类型判断&#125;// 对整型数组进行排序void test02() &#123;    int nums[] = &#123;5, 4, 3, 2, 1&#125;;    int length = sizeof(nums) / sizeof(int);    selectSort<int>(nums, length);&#125;int main() &#123;    test01();    cout << endl;    test02();&#125;</code></pre><h4 id="1-2-2-函数模板与普通函数的区别"><a href="#1-2-2-函数模板与普通函数的区别" class="headerlink" title="1.2.2 函数模板与普通函数的区别"></a>1.2.2 函数模板与普通函数的区别</h4><ul><li><p>普通函数调用时可以发生自动类型转换（隐式类型转换）</p></li><li><p>函数模板调用时，如果利用自动类型推导，不可以发生隐式类型转换</p></li><li><p>函数模板调用时，用显示指定类型，可以发生隐式类型转换</p></li><li><p>建议使用指定类型调用函数模板，防止出错</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 普通函数void addNum01(int a, int b) &#123;    cout << a + b << endl;&#125;void test01() &#123;    int a = 10;    int b = 20;    char c = 'c';    addNum01(a, b);    addNum01(a, c); // 调用了普通函数，发生了隐式类型转换 char -> int&#125;// 模板函数template<typename T>void addNum02(T a, T b) &#123;    cout << a + b << endl;&#125;void test02() &#123;    int a = 10;    int b = 20;    char c = 'c';    // 自动类型推导，不会发生隐式类型转换    // addNum02(a, c); // 这就会出错，无法指定一致的类型 T    // 用显示指定类型的方法调用函数模板，会发生隐式类型转换    addNum02<int>(a, c); //  char -> int&#125;int main() &#123;    test01();    test02();&#125;</code></pre></li></ul><h4 id="1-2-3-普通函数与函数模板调用规则"><a href="#1-2-3-普通函数与函数模板调用规则" class="headerlink" title="1.2.3 普通函数与函数模板调用规则"></a>1.2.3 普通函数与函数模板调用规则</h4><ul><li><p>如果函数模板和普通函数都可以使用，则优先调用普通函数</p></li><li><p>若只想调用函数模板，则可以通过空模板参数列表来强制调用函数模板</p></li><li><p>函数模板可以重载</p></li><li><p>如果函数模板可以产生更好的匹配优先调用函数模板</p></li><li><p>建议：若可以写模板就不要再用普通函数了</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 普通函数void myPrint(int a, int b) &#123;    cout << "调用普通函数" << endl;&#125;// 模板函数template<typename T>void myPrint(T a, T b) &#123;    cout << "调用模板函数" << endl;&#125;// 重载函数模板template<typename T>void myPrint(T a, T b, T c) &#123;    cout << "重载模板函数" << endl;&#125;void test01() &#123;    myPrint(10, 20); // 优先调用普通函数    &#125;void test02() &#123;    // 通过空模板参数列表强制调用函数模板    myPrint<>(10, 20);    myPrint<int>(10, 20); // 通过模板的参数列表强制调用函数模板&#125;void test03() &#123;    //函数模板重载    myPrint<>(10, 20, 30);&#125;void test04() &#123;    myPrint('a', 'b'); // 优先调用了模板，因为不需要进行隐式转换，调用模板产生了更好的匹配&#125;int main() &#123;    test01();    test02();    test03();    test04();&#125;</code></pre></li></ul><h4 id="1-2-4-模板的局限性"><a href="#1-2-4-模板的局限性" class="headerlink" title="1.2.4 模板的局限性"></a>1.2.4 模板的局限性</h4><ul><li><p>模板的通用性不是万能的，有些特定的数据类型，需要用具体化的方式做特殊实现</p></li><li><p>如果函数模板中，传入了数组、自定义类型等数据，就无法正常运行了</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>class Person &#123;public:    int m_age;    string m_name;    Person(int age, string name) &#123;        this->m_age = age;        this->m_name = name;    &#125;&#125;;// 对比两个数是否相等template<typename T>void myCompare(T a, T b) &#123;    if (a == b)    &#123;        cout << "a和b相等" << endl;    &#125;    else    &#123;        cout << "a和b不相等" << endl;    &#125;&#125;// 利用具体化Perosn的版本实现代码，具体化优先调用template<> void myCompare(Person a, Person b) &#123;    if (a.m_age == b.m_age && a.m_name == b.m_name)    &#123;        cout << "a和b相等" << endl;    &#125;    else    &#123;        cout << "a和b不相等" << endl;    &#125;&#125;// 基本类型比较void test01() &#123;    myCompare(10, 10);&#125;// 自定义类型比较// 方法1，运算符重载// 方法2，利用具体化的 Person 的版本实现代码，具体化优先调用void test02() &#123;    Person person01(10, "tom");    Person person02(10, "tom");    myCompare(person01, person02);&#125;int main() &#123;    test01();    test02();&#125;</code></pre></li></ul><ol><li><p>利用具体化的模板，可以解决自定义类型的通用化</p></li><li><p>学习模板不是为了写模板，而是在 STL 能够运用系统提供的模板</p></li></ol><h3 id="1-3-类模板"><a href="#1-3-类模板" class="headerlink" title="1.3 类模板"></a>1.3 类模板</h3><h4 id="1-3-1-类模板的概念"><a href="#1-3-1-类模板的概念" class="headerlink" title="1.3.1 类模板的概念"></a>1.3.1 类模板的概念</h4><ol><li><p>作用：</p><ul><li>建立一个通用类，类中的成员数据类型可以不具体制定，用一个虚拟的类型来代表</li></ul></li><li><p>语法：</p><pre class=" language-c++"><code class="language-c++">template<typename T>类// template 声明创建模板// typename 表明其后的符号是一种数据类型，可以用class代替// T 通用的数据类型，名称可以替换，通常为大写字母实例：#include<iostream>using namespace std;#include<string>template<class NameType, class AgeType> // 设置类模板class Person &#123;public:    AgeType m_age;    NameType m_name;    Person(AgeType age, NameType name) &#123;        this->m_age = age;        this->m_name = name;    &#125;    void showInfo() &#123;        cout << m_age << endl;        cout << m_name << endl;    &#125;&#125;;void test01() &#123;    Person<string, int> person01(10, "tom"); // 制定模板的参数的类型    person01.showInfo();&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="1-3-2-类模板和函数模板的区别："><a href="#1-3-2-类模板和函数模板的区别：" class="headerlink" title="1.3.2 类模板和函数模板的区别："></a>1.3.2 类模板和函数模板的区别：</h4><ul><li><p>类模板没有自动类型推导的使用方式</p></li><li><p>类模板在模板参数列表中可以有默认参数</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>template<class NameType, class AgeType = int> // 设置类模板,设置了类模板的默认参数 intclass Person &#123;public:    AgeType m_age;    NameType m_name;    Person(AgeType age, NameType name) &#123;        this->m_age = age;        this->m_name = name;    &#125;    void showInfo() &#123;        cout << m_age << endl;        cout << m_name << endl;    &#125;&#125;;void test01() &#123;    Person<string, int> person01(10, "tom"); // 制定模板的参数的类型    person01.showInfo();        // Person Person02(20, "tom"); // 类模板无法进行自动类型推导        // 类模板在模板参数列表中可以有默认参数    Person<string> person03(20, "jack");    person03.showInfo();&#125;int main() &#123;    test01();&#125;</code></pre></li></ul><h4 id="1-3-3-类模板中成员函数创建时机"><a href="#1-3-3-类模板中成员函数创建时机" class="headerlink" title="1.3.3 类模板中成员函数创建时机"></a>1.3.3 类模板中成员函数创建时机</h4><ul><li><p>类模板中成员函数和普通类中成员函数创建时机是有区别的</p></li><li><p>类模板中的成员函数在调用时才会创建</p></li><li><p>普通类中的成员函数一开始就可以创建</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>class Person01 &#123;public:    // 类中的普通成员函数    void showPerson01() &#123;        cout << "showPerson01()" << endl;    &#125;&#125;;class Person02 &#123;public:    // 类中的普通成员函数    void showPerson02() &#123;        cout << "showPerson02()" << endl;    &#125;&#125;;template<class T>class Person &#123;public:    T obj;    // 类模板中的成员函数并不是一开始就创建，而是在模板调用时会生成    void func01() &#123;        obj.showPerson01();    &#125;    void func02() &#123;        obj.showPerson02();    &#125;&#125;;void test01() &#123;    Person<Person01> person01;    person01.func01();    //person01.func02(); // 编译出错，说明函数调用时才会创建成员函数        Person<Person02> person02;    person02.func02();&#125;int main() &#123;    test01();&#125;</code></pre></li></ul><h4 id="1-3-4-类模板对象做函数参数"><a href="#1-3-4-类模板对象做函数参数" class="headerlink" title="1.3.4 类模板对象做函数参数"></a>1.3.4 类模板对象做函数参数</h4><ol><li><p>指定传入的类型</p></li><li><p>参数模板化</p></li><li><p>整个类模板化</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>template<typename NameType, class AgeType>class Person &#123;public:    NameType m_name;    AgeType m_age;    Person(NameType name, AgeType age) &#123;        this->m_age = age;        this->m_name = name;    &#125;    void showInfo() &#123;        cout << this->m_age << " " << this->m_name << endl;    &#125;&#125;;// 1.指定传入的类型void myPrint01(Person<string, int>& person) &#123;    person.showInfo();&#125;// 2. 将参数模板化template<typename T1, class T2>void myPrint02(Person<T1, T2>& person) &#123;    person.showInfo();    cout << typeid(T1).name() << endl;    cout << typeid(T2).name() << endl;&#125;// 3. 将整个类模板化template<class T>void myPrint03(T& p) &#123;    p.showInfo();    cout << typeid(T).name() << endl;&#125;void test01() &#123;    Person<string, int> person01("jack", 10);    myPrint01(person01); // 调用指定了传入参数的类型的函数    Person<string, int> person02("tom", 20);    myPrint02(person02);    Person<string, int> person03("marry", 30);    myPrint03(person03);&#125;int main() &#123;    test01();&#125;</code></pre></li><li><p>最常用的是指定参入类型</p></li></ol><h4 id="1-3-5-类模板与继承"><a href="#1-3-5-类模板与继承" class="headerlink" title="1.3.5 类模板与继承"></a>1.3.5 类模板与继承</h4><ol><li><p>当子类继承的父类是一个模板类时，子类在声明的时候，可以指定父类模板中的 T 类型如果不指定，编译器无法给子类分配内存</p></li><li><p>如果想灵活指定父类中的 T 类型，子类也需要设置为类模板</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 父类为类模板template<class T>class Base &#123;    T m;&#125;;// 子类继承父类的类模板/*    class Son :public Base &#123;         // 这是错的，因为子类继承父类模板时，要指定父类中的 T 的类型，才能继承，        // 若不指定子类则无法创建对象，因为并不知道子类对象需要多大的内存空间    &#125;;*/class Son01 :public Base<int> &#123;    // 子类继承父类模板，并指定了父类中的 T 的数据类型，这是正确的继承&#125;;// 如果想灵活指定父类中的 T 类型，子类也需要变为类模板template<class T1, class T2>class Son02 :public Base<T2> &#123; // T2 指定了父类的类模板中的 T 的类型    T1 obj; // T1 是子类自己新建的属性，类型为T1&#125;;void test01() &#123;    Son01 son01;    Son02<string, int> son02;&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="1-3-6-类模板成员函数类外实现"><a href="#1-3-6-类模板成员函数类外实现" class="headerlink" title="1.3.6 类模板成员函数类外实现"></a>1.3.6 类模板成员函数类外实现</h4><p>类模板中成员函数类外实现时，需要加上模板参数列表</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;template<typename T1, typename T2>class Person &#123;public:    T1 m_name;    T2 m_age;    Person(T1 name, T2 age);    void showInfo();&#125;;// 类模板成员函数类外实现template<class T1, class T2>Person<T1, T2>::Person(T1 name, T2 age) &#123;    this->m_age = age;    this->m_name = name;&#125;template<class T1, class T2>void Person<T1, T2>::showInfo() &#123;    cout << this->m_age << " " << this->m_name << endl;&#125;void test01() &#123;    Person<string, int> person01("tom", 20);    person01.showInfo();&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="1-3-7-类模板分文件编写"><a href="#1-3-7-类模板分文件编写" class="headerlink" title="1.3.7 类模板分文件编写"></a>1.3.7 类模板分文件编写</h4><p>产生的问题：类模板中成员函数创建时机是在调用阶段，导致分文件编写时连接不到</p><p>解决方式：</p><ul><li><p>直接包含 .cpp 源文件，这种方法不常用</p><p>.h 文件</p><pre class=" language-c++"><code class="language-c++">#pragma once// 类声明template<typename T1, typename T2>class Person &#123;public:    T1 m_name;    T2 m_age;    Person(T1 name, T2 age);    void showInfo();&#125;;</code></pre><p>.cpp 文件</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 类实现#include"Person.h"template<typename T1, typename T2>Person<T1, T2>::Person(T1 name, T2 age) &#123;    this->m_age = age;    this->m_name = name;&#125;template<typename T1, typename T2>void Person<T1, T2>::showInfo() &#123;    cout << this->m_name << " " << this->m_age << endl;&#125;</code></pre><p>main文件</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>#include"Person.cpp" // 这是第一种方式：在主函数的文件中直接包含 模板类 的实现的 .cpp 文件void test01() &#123;    Person<string, int> person01("jack", 30);    person01.showInfo();&#125;int main() &#123;    test01();&#125;</code></pre></li><li><p>将声明（.h）和实现（.cpp）写到同一个文件中，并更改后缀名为 .hpp，hpp是约定的名称，并不是强制</p><p>.hpp 文件</p><pre class=" language-c++"><code class="language-c++">#pragma once// 类声明template<typename T1, typename T2>class Person &#123;public:    T1 m_name;    T2 m_age;    Person(T1 name, T2 age);    void showInfo();&#125;;#include<iostream>using namespace std;// 类实现template<typename T1, typename T2>Person<T1, T2>::Person(T1 name, T2 age) &#123;    this->m_age = age;    this->m_name = name;&#125;template<typename T1, typename T2>void Person<T1, T2>::showInfo() &#123;    cout << this->m_name << " " << this->m_age << endl;&#125;</code></pre><p>main文件：</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>#include"Person.hpp" // 这是第二种方式：将声明（.h）和实现（.cpp）写到同一个文件中，并更改后缀名为 .hpp，hpp是约定的名称，并不是强制void test01() &#123;    Person<string, int> person01("jack", 30);    person01.showInfo();&#125;int main() &#123;    test01();&#125;</code></pre></li></ul><h4 id="1-3-8-类模板与友元"><a href="#1-3-8-类模板与友元" class="headerlink" title="1.3.8 类模板与友元"></a>1.3.8 类模板与友元</h4><p>掌握类模板配合友元函数的类内和类外实现</p><p><strong>全局函数类内实现：</strong>直接在类内声明友元即可</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>template<typename T1, typename T2>class Person &#123;private:    T1 m_name;    T2 m_age;public:    Person(T1 name, T2 age) &#123;        this->m_name = name;        this->m_age = age;    &#125;    // 全局函数，类内实现,虽然写在了类内，但是这是全局函数    friend void myPrint(Person<T1, T2>& person) &#123;        cout << person.m_name << " " << person.m_age << endl;    &#125;&#125;;void test01() &#123;    Person<string, int> person01("jack", 10);    myPrint(person01);&#125;int main() &#123;    test01();&#125;</code></pre><p><strong>全局函数类外实现：</strong>需要提前让编译器知道全局函数的存在</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>template<typename T1, typename T2>class Person;template<typename T1, typename T2>void myPrint(Person<T1, T2>& person) &#123; // 因为该函数用到了Person类，需要在该函数之前声明该类，并将该类设置为模板类    cout << person.m_name << " " << person.m_age << endl;&#125;template<typename T1, typename T2>class Person &#123;private:    T1 m_name;    T2 m_age;public:    Person(T1 name, T2 age) &#123;        this->m_name = name;        this->m_age = age;    &#125;    // 全局函数类外实现    // 必须加空模板参数列表    // 需要让编译器提前知道这个函数的存在，将该函数写在该类模板之前即可    friend void myPrint<>(Person<T1, T2>& person);&#125;;void test01() &#123;    Person<string, int> person01("jack", 10);    myPrint(person01);&#125;int main() &#123;    test01();&#125;</code></pre><p>建议全局函数类内实现</p><h4 id="1-3-9-类模板案例"><a href="#1-3-9-类模板案例" class="headerlink" title="1.3.9 类模板案例"></a>1.3.9 类模板案例</h4><p>实现一个通用的数组类</p><ol><li><p>可以对基本数据类型，自定义数据类型进行存放</p></li><li><p>将数组中的数据存入堆区</p></li><li><p>构造函数中可以传入数组的容量</p></li><li><p>提供对应的拷贝构造函数以及operator=防止浅拷贝的问题</p></li><li><p>提供尾插法和尾删法对数组中的数据进行增加和删除</p></li><li><p>可以通过下标的方式访问数组中的元素</p></li><li><p>可以获取数组中当前元素个数和数组的容量</p><pre class=" language-c++"><code class="language-c++">#pragma once#include<iostream>#include<string>using namespace std;template<typename T>class MyArray &#123;private:    T* m_array;    int m_capacity;    int m_size;public:    // 构造函数    MyArray(int capacity) &#123;        cout << "构造函数调用" << endl;        this->m_capacity = capacity;        this->m_array = new T[this->m_capacity];        this->m_size = 0;    &#125;    // 拷贝构造函数    MyArray(const MyArray& arr) &#123;        cout << "拷贝构造函数调用" << endl;        this->m_size = arr.m_size;        this->m_capacity = arr.m_capacity;                // this->m_array = arr.m_array;        // 这会发生浅拷贝，这两个数组指向同一块堆区，当arr将指向堆区的数据释放以后，        // 另一个在调用析构函数的时候会出错，也当然无法指向堆区的数据                // 为了避免浅拷贝，可以用下面的方式，也就是深拷贝        this->m_array = new T[arr.m_capacity];        for (int i = 0; i < arr.m_capacity; i++)        &#123;            this->m_array[i] = arr.m_array[i]; // 赋值运算符会进行浅拷贝，因此要重载赋值运算符        &#125;    &#125;        // 重载 =     MyArray& operator=(const MyArray& arr) &#123;        cout << "赋值运算符重载函数调用" << endl;        // 重载运算符的时候首先判断 this.m_array 是否在堆区，若在堆区要先释放        if (this->m_array != NULL)        &#123;            delete[] this->m_array;            this->m_array = NULL;        &#125;        this->m_capacity = arr.m_capacity;        this->m_size = arr.m_size;        this->m_array = new T[arr.m_capacity];        for (int i = 0; i < arr.m_capacity; i++)        &#123;            this->m_array[i] = arr.m_array[i];        &#125;        return *this;    &#125;    // 析构函数    ~MyArray()    &#123;        cout << "析构函数调用" << endl;        if (this->m_array != NULL)        &#123;            delete[] this->m_array;            this->m_array = NULL;        &#125;    &#125;    // 尾插法    void insertData(const T& data) &#123; // const 防止数据在该函数中被修改，& 是引用        // 判断容量是已满        if (this->m_size == this->m_capacity)        &#123;            cout << "该数组容量已满" << endl;            return;        &#125;        this->m_array[this->m_size] = data;        this->m_size++;    &#125;    // 尾插法    void deleteData() &#123;        // 判断数组是否为空        if (this->m_size == 0)        &#123;            cout << "该数组为空，无法删除" << endl;            return;        &#125;        // 进行数据删除        this->m_size--;    &#125;    // 通过下标的方式访问数组的元素    T& operator[](int index) &#123;        return this->m_array[index];    &#125;    // 返回数组的容量    int getCapacity() &#123;        return this->m_capacity;    &#125;    // 返回数组的大小    int getSize() &#123;        return this->m_size;    &#125;&#125;;</code></pre><p>主程序：</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>#include"MyArray.hpp"class Person &#123;public:    string name;    int age;    Person()&#123;        cout << "调用person的无参构造函数" << endl;    &#125; // 在调用 MyArray 的构造函数中用 new 创建 Person 数组时,需要调用Person的无参构造函数    Person(string name, int age) &#123;        this->name = name;        this->age = age;    &#125;&#125;;void test01() &#123;    MyArray<int> myArray01(5);    for (int i = 0; i < 5; i++)    &#123;        myArray01.insertData(i);    &#125;    myArray01.deleteData();    cout << myArray01.getCapacity() << endl;    cout << myArray01.getSize() << endl;    MyArray<int> myArray02(myArray01); // 调用拷贝构造函数    for (int i = 0; i < myArray02.getSize(); i++)    &#123;        cout << myArray02[i] << endl;    &#125;    cout << "========================" << endl;    MyArray<int> myArray03(3);    myArray03 = myArray02; // 调用赋值运算符的重载函数    cout << "========================" << endl;    &#125;void test02() &#123;    MyArray<Person> myArray(3);    Person person01("tom", 10);    Person person02("jack", 20);    Person person03("marry", 30);    myArray.insertData(person01);    myArray.insertData(person02);    cout << myArray.getSize() << endl;    cout << myArray.getCapacity() << endl;    for (int i = 0; i < myArray.getSize(); i++)    &#123;        cout << myArray[i].age << " " << myArray[i].name << endl;    &#125;&#125;int main() &#123;    test01();    cout << "=====================" << endl;    test02();    // 以这种方式创建数组的时候，会调用无参构造函数，因此在有有参构造函数的条件下，需要创建无参构造函数，    Person * persons = new Person[5]; &#125;</code></pre></li></ol><h2 id="第二章-STL"><a href="#第二章-STL" class="headerlink" title="第二章 STL"></a>第二章 STL</h2><h3 id="2-1-STL初识"><a href="#2-1-STL初识" class="headerlink" title="2.1 STL初识"></a>2.1 STL初识</h3><ol><li>软件界一直希望建立一种可以重复利用的东西</li><li>C++面向对象和泛型编程的思想目的就是复用性的提升</li><li>数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</li><li>为了建立数据结构和算法的一套标准，诞生了STL</li></ol><h3 id="2-2-STL基本概念"><a href="#2-2-STL基本概念" class="headerlink" title="2.2 STL基本概念"></a>2.2 STL基本概念</h3><ol><li>STL 标准模板库（Standard Template Library）</li><li>STL从广义上分为：容器（container）、算法（algorithm）、迭代器（iterator）</li><li>容器和算法通过迭代器进行无缝连接</li><li>STL几乎所有的代码都采用了模板类或者模板函数</li></ol><h3 id="2-3-STL六大组件"><a href="#2-3-STL六大组件" class="headerlink" title="2.3 STL六大组件"></a>2.3 STL六大组件</h3><ol><li>容器：各种数据结构，如vector、list、deque、set、map等，用来存放数据</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器和算法之间的胶合剂</li><li>仿函数：行为类似函数、可作为算法的某种策略</li><li>适配器（配接器）：一种用来修饰容器或者仿函数或迭代器接口的东西</li><li>空间配置器：负责空间的配置与管理</li></ol><h3 id="2-4-STL中容器、算法、迭代器"><a href="#2-4-STL中容器、算法、迭代器" class="headerlink" title="2.4 STL中容器、算法、迭代器"></a>2.4 STL中容器、算法、迭代器</h3><ol><li><p><strong>容器：置物之所也</strong></p><ul><li><p>STL容器就是 <strong>将运用最广泛的一些数据结构实现</strong> 出来</p></li><li><p>常用的数据结构：数组、链表、树、栈、队列、集合、映射表等</p></li><li><p>这些容器分为序列式容器和关联式容器两种</p><p><strong>序列式容器：</strong>强调值的排序，序列式容器中的每个元素均有固定的位置</p><p><strong>关联式容器：</strong>二叉树结构，各个元素之间没有严格的物理上的顺序关系</p></li></ul></li><li><p><strong>算法：问题值解法也</strong></p><ul><li><p>有限的步骤，解决逻辑或者数学上的问题，这一门学科就是算法</p></li><li><p>算法分为：质变算法和非质变算法</p><p>质变算法：是指运算过程中会更改区间内的元素的内容、例如拷贝、替换、删除等</p><p>非质变算法：指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等</p></li></ul></li><li><p><strong>迭代器：容器和算法之间的粘合剂</strong></p><ul><li><p>算法要通过迭代器才能访问容器中的数</p></li><li><p>每个容器都有自己专属的迭代器</p></li><li><p>迭代器的使用非常类似于指针</p></li><li><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式</p></li><li><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、==、！=</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、==、！=</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以跳跃的访问任意数据，功能最强</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>常用的容器为：双向迭代器  和  随机访问迭代器</p><p>iterator 为可读可写迭代器</p><p>const_iterator 为只可读的迭代器</p></li></ul></li></ol><h3 id="2-5-容器算法迭代器初识"><a href="#2-5-容器算法迭代器初识" class="headerlink" title="2.5 容器算法迭代器初识"></a>2.5 容器算法迭代器初识</h3><ol><li>STL中常用的容器为vector，可以理解为数组</li></ol><h4 id="2-5-1-vector存放内置数据类型"><a href="#2-5-1-vector存放内置数据类型" class="headerlink" title="2.5.1 vector存放内置数据类型"></a>2.5.1 vector存放内置数据类型</h4><p>容器：vector</p><p>算法：for_each</p><p>迭代器：vector<int>::iterator</int></p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<vector> // 要包含头文件#include<algorithm> // 包含了 for_eachvoid myPrint(int value);void test01() &#123;    // vector 存储基本数据类型    vector<int> v;    // 添加数据    v.push_back(10);    v.push_back(20);    v.push_back(30);    v.push_back(40);    vector<int>::iterator itBegin = v.begin(); // 起始迭代器，指向容器中的第一个元素,返回的是元素的指针    vector<int>::iterator itEnd = v.end(); // 结束迭代器，指向容器中最后一个元素的下一个位置，返回的是一个指针        // 第一种遍历方式    while (itBegin != itEnd)    &#123;        cout << *itBegin << endl;        itBegin++; // 要将 itBegin 指向下一个元素    &#125;    // 第二种遍历方式    for (vector<int>::iterator it = v.begin(); it != v.end(); it++)    &#123;        cout << *it << endl;    &#125;    // 第三种遍历方式    for_each(v.begin(), v.end(), myPrint); // myPrint利用了回调的技术&#125;void myPrint(int value) &#123;    cout << value << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="2-5-2-vector存放自定义数据类型"><a href="#2-5-2-vector存放自定义数据类型" class="headerlink" title="2.5.2 vector存放自定义数据类型"></a>2.5.2 vector存放自定义数据类型</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<string>using namespace std;class Person &#123;public:    int m_age;    string m_name;    Person(int age, string name) &#123;        this->m_age = age;        this->m_name = name;    &#125;&#125;;// 在vector中存放Person类型对象void test01() &#123;    vector<Person> vectorPerson;    Person perosn01(10, "tom");    Person person02(20, "jack");    Person person03(30, "jerry");    vectorPerson.push_back(perosn01);    vectorPerson.push_back(person02);    vectorPerson.push_back(person03);    for (vector<Person>::iterator it = vectorPerson.begin(); it != vectorPerson.end(); it++)    &#123;        cout << (*it).m_name << " " << (*it).m_age << endl;        cout << it->m_name << " " << it->m_age << endl;    &#125;&#125;// 在vector中存放Person类型的对象的指针void test02() &#123;    vector<Person*> vectorPerson;    Person perosn01(10, "tom");    Person person02(20, "jack");    Person person03(30, "jerry");    vectorPerson.push_back(&perosn01);    vectorPerson.push_back(&person02);    vectorPerson.push_back(&person03);    for (vector<Person*>::iterator it = vectorPerson.begin(); it != vectorPerson.end(); it++)    &#123;        cout << (*it)->m_name << " " << (*it)->m_age << endl;    &#125;&#125;int main() &#123;    test01();    cout << "==============================" << endl;    test02();&#125;</code></pre><h4 id="2-5-3-vector容器再嵌套一个容器"><a href="#2-5-3-vector容器再嵌套一个容器" class="headerlink" title="2.5.3 vector容器再嵌套一个容器"></a>2.5.3 vector容器再嵌套一个容器</h4><p>容器嵌套容器，将数据全部输出，这类似于一个二维数组</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>using namespace std;// 容器嵌套void test01() &#123;    // 设置外层容器    vector< vector<int> > bigVector;    // 设置内层容器    vector<int> v1;    vector<int> v2;    vector<int> v3;    vector<int> v4;    // 向内层容器中添加数据    for (int i = 0; i < 4; i++)    &#123;        v1.push_back(i + 1);        v2.push_back(i + 2);        v3.push_back(i + 3);        v4.push_back(i + 4);    &#125;    // 将内层容器加入到外层容器中    bigVector.push_back(v1);    bigVector.push_back(v2);    bigVector.push_back(v3);    bigVector.push_back(v4);    // 遍历输出所有数据    for (vector< vector<int> >::iterator bigV = bigVector.begin(); bigV != bigVector.end(); bigV++)    &#123;            // (*bigV) -> 内层的容器 vector<int>        for (vector<int>::iterator it = (*bigV).begin(); it != (*bigV).end(); it++)        &#123;            cout << (*it) << " ";        &#125;        cout << endl;    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><h2 id="第三章-STL-常用容器"><a href="#第三章-STL-常用容器" class="headerlink" title="第三章 STL 常用容器"></a>第三章 STL 常用容器</h2><h3 id="3-1-string容器"><a href="#3-1-string容器" class="headerlink" title="3.1 string容器"></a>3.1 string容器</h3><h4 id="3-1-1-string容器基本概念"><a href="#3-1-1-string容器基本概念" class="headerlink" title="3.1.1 string容器基本概念"></a>3.1.1 string容器基本概念</h4><ol><li><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质是一个类</li></ul></li><li><p><em><em>string和char</em> 区别：</em>*</p><ul><li>char* 是一个指针</li><li>string是一个类，类内部封装了char*，管理这个字符串，是一个 char *  型的容器</li></ul></li><li><p><strong>特点</strong>：</p><ul><li>string类内部封装了很多成员方法</li><li>例如：查找find、拷贝copy、删除delete、替换replace、插入insert</li><li>string管理char * 所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</li></ul></li></ol><h4 id="3-1-2-string容器构造函数"><a href="#3-1-2-string容器构造函数" class="headerlink" title="3.1.2 string容器构造函数"></a>3.1.2 string容器构造函数</h4><pre class=" language-c++"><code class="language-c++">string(); // 创建一个空的字符串，例如：string str;string(const char* s); // 使用字符串s初始化string(const string& str); // 使用一个string对象初始化另一个string对象string(int n, char c); // 使用 n 个字符c初始化</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;void test01() &#123;    string s1;    cout << s1 << endl;    const char* str02 = "helloworld02";    string s2(str02);    cout << s2 << endl;    const string& str03 = "helloworld03";    string s3(str03);    cout << s3 << endl;    string s4(5, 'a');    cout << s4 << endl;    string s5 = "helloworld05"; // c++ 风格的字符串    cout << s5 << endl;    char ch[] = "helloworld06"; // c语言风格的字符串    cout << ch << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="3-1-3-string容器赋值操作"><a href="#3-1-3-string容器赋值操作" class="headerlink" title="3.1.3 string容器赋值操作"></a>3.1.3 string容器赋值操作</h4><p>给string字符串进行赋值</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>void test01() &#123;    // string& operator=(const char* s); char* s 类型的字符串赋值给当前的字符串s1    string s1 = "helloworld01";     cout << s1 << endl;    // string& operator=(const string& s); 把字符串s赋值给当前字符串    const string& s = "helloworld02";    string s2 = s;    cout << s2 << endl;    // string& operator=(char c); 把字符赋值给当前的字符串    string s3;    s3 = 'a';    cout << s3 << endl;    // string& assign(const char* s); 把字符串s赋值给当前的字符串    string s4;    s4.assign("helloworld04");    cout << s4 << endl;    // string& assign(const string& s); 把字符串s赋值给当前字符串    string s5;    s5.assign("helloworld05");    cout << s5 << endl;    // string& assign(int n, char c); n个c    string s6;    s6.assign(5, 'a');    cout << s6 << endl;        // string& assign(const char* s, int n); 截取字符串的前 n 个字符    string s7;    s7.assign("helloworld07", 6);    cout << s7 << endl; // hellow&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="3-1-4-string容器字符串拼接"><a href="#3-1-4-string容器字符串拼接" class="headerlink" title="3.1.4 string容器字符串拼接"></a>3.1.4 string容器字符串拼接</h4><p>在字符串末尾拼接字符串</p><pre class=" language-c++"><code class="language-c++">string& operator+=(const char* s); // 重载+=字符串string& operator+=(const char c); // 重载+=字符串string& operator+=(const string& s); // 重载+=字符串string& append(const char* s); // 把字符串拼接到字符串末尾string& append(const char* s, int n); // 把字符串的前 n 个字符拼接到字符串末尾string& append(const string& s); // 将字符串拼接到字符串末尾string& append(const string& s, int pos, int n); // 截取字符串，从pos开始截取n个字符</code></pre><h4 id="3-1-5-string容器查找和替换"><a href="#3-1-5-string容器查找和替换" class="headerlink" title="3.1.5 string容器查找和替换"></a>3.1.5 string容器查找和替换</h4><p>查找：查找指定字符串是否存在</p><p>替换：在指定的位置替换字符串</p><pre class=" language-c++"><code class="language-c++">int find(const string& str, int pos = 0); // 查找str第一次出现的位置，从pos位置开始查找，返回查找到的字符串的下标位置，若没有找到则返回-1int rfind(const string& str, int pos = npos); // 返回的是查找到的字符串的下标,查找str最后一次出现的位置，从pos开始查找// rfind 和 find 区别：// rfind 是从右往左查找，find是从左往右查找</code></pre><pre class=" language-c++"><code class="language-c++">string& repalce(int pos, int n, const string& str); // 替换从pos开始的n个字符为str</code></pre><h4 id="3-1-6-string容器字符串比较"><a href="#3-1-6-string容器字符串比较" class="headerlink" title="3.1.6 string容器字符串比较"></a>3.1.6 string容器字符串比较</h4><p>字符串比较是按照字符的ASCII码进行对比</p><p>=  返回 0</p><p>“ &gt; “ 返回 1</p><p>“&lt; “ 返回 -1</p><pre class=" language-c++"><code class="language-c++">str1.compare(str2); // 字符串中的字符一个一个的对比</code></pre><h4 id="3-1-7-string容器字符存取"><a href="#3-1-7-string容器字符存取" class="headerlink" title="3.1.7 string容器字符存取"></a>3.1.7 string容器字符存取</h4><pre class=" language-c++"><code class="language-c++">string中单个字符存取方式有两种str.size(); 可以返回字符串的长度char& operator[](int n); // 通过[]方式存取字符char& at(int n);//通过at方法存取数据</code></pre><h4 id="3-1-8-string容器插入和删除"><a href="#3-1-8-string容器插入和删除" class="headerlink" title="3.1.8 string容器插入和删除"></a>3.1.8 string容器插入和删除</h4><p>对字符串进行插入和删除</p><pre class=" language-c++"><code class="language-c++">string& insert(int pos, const char* s); // 从pos开始，插入字符串string& erase(int pos, int n = npos); // 从pos起，删除n个字符</code></pre><h4 id="3-1-9-string容器子串获取"><a href="#3-1-9-string容器子串获取" class="headerlink" title="3.1.9 string容器子串获取"></a>3.1.9 string容器子串获取</h4><pre class=" language-c++"><code class="language-c++">cstring substr(int pos = 0, int n = npos); // 从字符串的pos起，截取n个字符返回字串</code></pre><h3 id="3-2-vector容器"><a href="#3-2-vector容器" class="headerlink" title="3.2 vector容器"></a>3.2 vector容器</h3><h4 id="3-2-1-vector基本概念"><a href="#3-2-1-vector基本概念" class="headerlink" title="3.2.1 vector基本概念"></a>3.2.1 vector基本概念</h4><ol><li><p>vector 数据结构和数组非常相似，也称为单端数组</p></li><li><p>普通数组是静态空间，不可以扩展，而vector可以动态扩展</p></li><li><p>动态扩展：并不是再原空间之后接新空间，而是找更大的内存空间，然后将源数据拷贝到新空间，释放原空间</p></li><li><p>vector容器的迭代器是支持随机访的迭代器</p></li><li><p>在使用容器时要包含头文件</p></li><li><p>push_back()； 尾加数据</p></li><li><p>vector是一组连续的内存空间</p><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220426102326366.png" alt="vector容器"></p></li></ol><h4 id="3-2-2-构造函数"><a href="#3-2-2-构造函数" class="headerlink" title="3.2.2 构造函数"></a>3.2.2 构造函数</h4><ol><li><p>创建vector容器</p></li><li><p>函数原型：</p><pre class=" language-c++"><code class="language-c++">vector<T> v; // 采用模板实现类实现，默认构造函数vector<T> v(v.begin(), v.end()); // 通过区间方式进行构造vector<T> v(int n, T elem) // 将n个elem拷贝给自身vector<T> v(const vector& vec); // 拷贝构造</code></pre></li></ol><h4 id="3-2-3-vector-赋值操作"><a href="#3-2-3-vector-赋值操作" class="headerlink" title="3.2.3 vector 赋值操作"></a>3.2.3 vector 赋值操作</h4><p>给vector容器进行赋值</p><pre class=" language-c++"><code class="language-c++">vector& operator=(const vector& vec); // 重载等号操作符assign(v.begin(), v.end()); // 将v的区间赋值给容器assign(n, elem); // n个elem赋值给容器</code></pre><h4 id="3-2-4-vector容量和大小"><a href="#3-2-4-vector容量和大小" class="headerlink" title="3.2.4 vector容量和大小"></a>3.2.4 vector容量和大小</h4><p>对vector容量和大小操作</p><pre class=" language-c++"><code class="language-c++">empty(); // 判断容器是否为空capacity(); // 容器的容量,有动态扩展机制size(); // 返回容器中元素的个数,容器的容量和元素个数不是一回事resize(int n); // 重新制定大小，也就是重新设置了capacity,过长的位置用默认值填充resize(int n, T elem); // 重新设置容器的大小为n，多余的部分用elem填充，如果重新指定的大小变小了，就会将多出的数据删除</code></pre><h4 id="3-2-5-vector插入和删除"><a href="#3-2-5-vector插入和删除" class="headerlink" title="3.2.5 vector插入和删除"></a>3.2.5 vector插入和删除</h4><p>对vector容器进行插入、删除操作</p><pre class=" language-c++"><code class="language-c++">push_pack(T elem); // 在容器尾部插入elempop_back(); // 删除最后一个元素insert(const_iterator pos, elem); //迭代器指向位置pos插入元素eleinsert(const_iterator pos, int count, T elem); // 迭代器指向位置pos插入count个元素elemerase(const_iterator pos); // 删除迭代器指向的元素erase(const_iterator start, const_iterator end); // 删除迭代器从start到end之间的元素clear(); // 删除容器总的所有元素</code></pre><h4 id="3-2-6-数据存取"><a href="#3-2-6-数据存取" class="headerlink" title="3.2.6 数据存取"></a>3.2.6 数据存取</h4><p>对vector容器中的数据的存取操作</p><pre class=" language-c++"><code class="language-c++">at(int index); // 返回索引index指向的数据operator[]; // 返回索引index指向的数据front(); // 返回容器中第一个数据元素back(); // 返回容器中最后一个数据元素 </code></pre><h4 id="3-2-7-互换容器"><a href="#3-2-7-互换容器" class="headerlink" title="3.2.7 互换容器"></a>3.2.7 互换容器</h4><p>实现两个容器元素的交换</p><pre class=" language-c++"><code class="language-c++">swap(vector); // 将vector互换元素</code></pre><p>实际用途：</p><p>swap可以收缩内存空间</p><pre class=" language-c++"><code class="language-c++">vector<int> v;v.push_back(i); // i从1到1000;循环加入vv.resize(3); // 重新指定了大小，但是此容器的capacity()不改变，这就会使得空间浪费// 巧用swap()收缩内存vector<int>(v).swap(v); // vector<int>(v); 是匿名对象， .swap(v);相当于做了容器的交换// 匿名对象会被系统回收</code></pre><h4 id="3-2-8-预留空间"><a href="#3-2-8-预留空间" class="headerlink" title="3.2.8 预留空间"></a>3.2.8 预留空间</h4><p>减少vector在动态扩展容量时的扩展次数</p><pre class=" language-c++"><code class="language-c++">reserve(int len); // 容器预留len个元素长度，预留位置不初始化，元素不可访问</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>using namespace std;void test01() &#123;    vector<int> v1;        // 利用reserve预留空间    v1.reserve(100000); // 预留了100000个空间，则只需要扩容一次，num = 1；    int num = 0; // 统计开辟的次数    int* p = NULL;    for (int i = 0; i < 100000; i++)    &#123;        v1.push_back(i);        if (p != &v1[0]) // 每次扩容以后，容器的首地址都会改变，因此num++        &#123;            p = &v1[0];            num++;        &#125;    &#125;    cout << num << endl;    cout << v1.capacity() << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h3 id="3-3-deque容器"><a href="#3-3-deque容器" class="headerlink" title="3.3 deque容器"></a>3.3 deque容器</h3><h4 id="3-3-1-deque容器的基本概念"><a href="#3-3-1-deque容器的基本概念" class="headerlink" title="3.3.1 deque容器的基本概念"></a>3.3.1 deque容器的基本概念</h4><ol><li><p>双端数组，可以对头端进行插入删除操作</p></li><li><p>要包含头文件</p></li><li><p>deque和vector区别：</p><ul><li><p>vector 对于头部的插入和删除效率低，数据量越大，效率越低，因为插入删除要移动大量数据</p></li><li><p>deque相对而言，对头部的删除插入速度比vector快</p></li><li><p>vector访问元素速度会比deque快，这和两者的内部实现相关</p></li><li><p>deque容器的迭代器也是支持随机访问的</p></li></ul></li></ol><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220426101809778.png" alt="deque容器"></p><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220426102108888.png" alt="deque容器内部结构"></p><h4 id="3-3-2-deque构造函数"><a href="#3-3-2-deque构造函数" class="headerlink" title="3.3.2 deque构造函数"></a>3.3.2 deque构造函数</h4><pre class=" language-c++"><code class="language-c++">deque<T> deqT; // 默认构造deque(begin, end); // 构造函数将[begin,end)区间中的元素拷贝到deque容器deque(n, elem); // 构造函数将n个elem拷贝到deque容器deque(const deque& deque); // 拷贝构造函数</code></pre><h4 id="3-3-3-deque赋值操作"><a href="#3-3-3-deque赋值操作" class="headerlink" title="3.3.3 deque赋值操作"></a>3.3.3 deque赋值操作</h4><p>给deque容器进行赋值</p><pre class=" language-c++"><code class="language-c++">deque& operator=(const deque &deq); // 重载 = 运算符assign(begin(), end()); // 将[begin, end) 区间中的数据拷贝赋值给容器assign(n, elem); // 将n个elem拷贝赋值给容器</code></pre><h4 id="3-3-4-deque大小操作"><a href="#3-3-4-deque大小操作" class="headerlink" title="3.3.4 deque大小操作"></a>3.3.4 deque大小操作</h4><p>对deque的容器大小进行操作</p><p>没有容量的大小，因为该容器可以无线扩展，中控器是不变的</p><pre class=" language-c++"><code class="language-c++">deque.empty(); // 判断容器是否为空deque.size(); // 返回容器中的元素个数deque.resize(int num); // 重新指定容器的长度为 num，若容器过长，则以默认值填充新位置，如果容器过短，则末尾超出容器的长度的元素被删除deque.resize(int num, T elem); // 重新指定容器的长度为num， 若容器过长，则以elem值填充，如果容器变短，则末尾超出容器长度的元素被删除</code></pre><h4 id="3-3-5-deque插入和删除"><a href="#3-3-5-deque插入和删除" class="headerlink" title="3.3.5 deque插入和删除"></a>3.3.5 deque插入和删除</h4><p>两端插入删除操作：</p><pre class=" language-c++"><code class="language-c++">push_back(elem); // 在容器尾部添加一个数据push_front(elem); // 在容器头部插入一个数据pop_back(); // 删除容器最后一个数据pop_front(); // 删除容器第一个数据</code></pre><p>指定位置操作：</p><pre class=" language-c++"><code class="language-c++">insert(pos, elem); // 在pos位置插入一个elem元素的拷贝，返回新数据的位置insert(pos, n, elem); // 在pos位置插入n个elem数据，无返回值insert(pos, begin, end); // 在pos位置插入[begin, end)区间的数据，无返回值clear(); // 清空容器中的数据erase(begin, end); // 删除[begin, end)区间的数据，返回下一个数据的位置erase(pos); // 删除pos位置的数据，返回下一个数据的位置</code></pre><p>位置都是迭代器</p><h4 id="3-3-6-deque-数据存取"><a href="#3-3-6-deque-数据存取" class="headerlink" title="3.3.6 deque 数据存取"></a>3.3.6 deque 数据存取</h4><pre class=" language-c++"><code class="language-c++">at(int index); // 返回索引index所指的数据operator[]; // 返回索引所指的数据元素front(); // 返回容器中的第一个元素back(); // 返回容器中的最后一个元素</code></pre><h4 id="3-3-7-排序"><a href="#3-3-7-排序" class="headerlink" title="3.3.7 排序"></a>3.3.7 排序</h4><p>对容器中的数据进行排序</p><p>所有标准算法都要包含头文件：#include<algorithm></algorithm></p><p>对于支持随机访问的迭代器的容器，都可以利用sort算法直接对其进行排序</p><p>vector 和 deque 都可以利用 sort 进行排序</p><pre class=" language-c++"><code class="language-c++">sort(iterator begin, iterator end); // 对begin 和 end 区间内元素进行排序 </code></pre><h3 id="3-4-stack-容器"><a href="#3-4-stack-容器" class="headerlink" title="3.4 stack 容器"></a>3.4 stack 容器</h3><h4 id="3-4-1-基本概念"><a href="#3-4-1-基本概念" class="headerlink" title="3.4.1 基本概念"></a>3.4.1 基本概念</h4><ol><li><p>概念：stack是一种先进先出的数据结构，它只有一共出口</p></li><li><p>栈中只有栈顶元素才可以被外界访问，因此栈不可以有遍历行为</p><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220427091716514.png" alt="stack容器"></p></li><li><p>栈可以判断是否为空，empty()</p></li><li><p>栈可以返回元素个数，size()</p></li><li><p>生活中的栈：压弹夹等</p></li></ol><h4 id="3-4-2-常用接口"><a href="#3-4-2-常用接口" class="headerlink" title="3.4.2 常用接口"></a>3.4.2 常用接口</h4><pre class=" language-c++"><code class="language-c++">// 构造函数stack<T> stk; // stack采用模板类实现，stack对象的默认构造形式stack(cosnt stack& stk); // 拷贝构造函数// 赋值操作stack& operator=(const stack &stk); // 重载等号运算符// 数据存取push(elem); // 向栈顶添加元素pop(); // 从栈顶移除一个元素top(); // 返回栈顶元素// 大小操作empty(); // 判断堆栈是否为空size(); // 返回栈的大小</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<stack>using namespace std;void test01() &#123;    stack<int> stk;    if (stk.empty())    &#123;        stk.push(1);        stk.push(2);    &#125;    else    &#123;        stk.pop();    &#125;    cout << stk.top() << endl;    cout << stk.size() << endl;    stack<int> stk1;    stk1 = stk;    cout << stk1.top() << endl;    cout << stk1.size() << endl;    stack<int> stk2;    stk2 = stk1;    cout << stk2.size() << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h3 id="3-5-queue容器"><a href="#3-5-queue容器" class="headerlink" title="3.5 queue容器"></a>3.5 queue容器</h3><h4 id="3-5-1-queue基本概念"><a href="#3-5-1-queue基本概念" class="headerlink" title="3.5.1 queue基本概念"></a>3.5.1 queue基本概念</h4><ol><li>queue是一种先进先出的数据结构</li><li>队列中允许一端进数据，另一端出数据</li><li>队列中只有对头和队尾能被外界访问，因此不允许有遍历行为</li><li>出队 pop();</li><li>入队push();</li><li>是否为空empty();</li><li><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220427094321125.png" alt="queue容器"></li></ol><h4 id="3-5-2-常用接口"><a href="#3-5-2-常用接口" class="headerlink" title="3.5.2 常用接口"></a>3.5.2 常用接口</h4><pre><code>// 构造函数queue&lt;T&gt; que; // queue采用模板类实现，queue对象的默认构造函数queue(const queue&amp; que); // 拷贝构造函数// 赋值操作queue&amp; operator=(const queue&amp; que); // 重载等号操作符// 数据存取push(elem); // 往队尾添加元素pop(); // 从队头移除第一个元素back(); // 返回最后一个元素front(); // 返回第一个元素// 大小操作empty(); // 判断队列是否为空size(); // 返回队列的大小</code></pre><h3 id="3-6-list容器"><a href="#3-6-list容器" class="headerlink" title="3.6 list容器"></a>3.6 list容器</h3><h4 id="3-6-1-list基本概念"><a href="#3-6-1-list基本概念" class="headerlink" title="3.6.1 list基本概念"></a>3.6.1 list基本概念</h4><ol><li><p>将数据进行链式存储</p></li><li><p>链表是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p></li><li><p>链表的组成：链表由一系列结点组成</p></li><li><p>结点的组成：一个存储数据元素的数据域，另一个是存储下一个结点地址的指针域</p></li><li><p>STL中的链表是一个<strong>双向循环链表</strong></p></li><li><p>可以对任意位置进行快速插入或删除元素，不像数组那样还需要移动大量元素</p></li><li><p>缺点：容器遍历元素的速度没有数组快、占用的内存空间要比数组大，list容器时间和空间消耗比较大</p></li><li><p>List有一个重要的性质：插入和删除操作都不会造成原有list迭代器的失效，这在vector中是不成立的</p></li><li><p>List和vector是最常被使用的容器，各有优缺点</p><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220427102533878.png" alt="list容器"></p></li></ol><h4 id="3-6-2-构造函数"><a href="#3-6-2-构造函数" class="headerlink" title="3.6.2 构造函数"></a>3.6.2 构造函数</h4><pre class=" language-c++"><code class="language-c++">list<T> lst; // list采用模板类实现，对象的默认构造方式list(begin, end); // 利用list的区间构造另一个listlist(const list& lst); // 拷贝构造list(int n, elem); // n个elem构造list</code></pre><h4 id="3-6-3-list-赋值和交换"><a href="#3-6-3-list-赋值和交换" class="headerlink" title="3.6.3 list 赋值和交换"></a>3.6.3 list 赋值和交换</h4><pre class=" language-c++"><code class="language-c++">assign(begin, end); // 将区间赋值给listassign(int n, elem); // n个elem赋值给listoperator=(); // list02 = list01; 列表赋值list02.swap(list01); // 交换两个容器中的元素 </code></pre><h4 id="3-6-4-大小操作"><a href="#3-6-4-大小操作" class="headerlink" title="3.6.4 大小操作"></a>3.6.4 大小操作</h4><pre class=" language-c++"><code class="language-c++">size(); // 返回list中的元素个数empty(); // 判断容器是否为空resize(int n,  elem); // 重新指定list中元素的个数，并用elem填充多余的空间resize(int n) // 重新指定list中的元素个数</code></pre><h4 id="3-6-5-list-插入和删除"><a href="#3-6-5-list-插入和删除" class="headerlink" title="3.6.5 list 插入和删除"></a>3.6.5 list 插入和删除</h4><p><img src="/images/C++%E5%88%9D%E7%BA%A7/image-20220427105040831.png" alt="list相关函数"></p><h4 id="3-6-6-list数据存取"><a href="#3-6-6-list数据存取" class="headerlink" title="3.6.6 list数据存取"></a>3.6.6 list数据存取</h4><p>链表不能用中括号[]、at();方式跳跃式的访问数据，也就是不支持随机访问</p><p>只能用迭代器顺序去访问数据</p><p>只能自增自减、不能用迭代器 + 2；的类似操作</p><pre class=" language-c++"><code class="language-c++">front(); // 返回list中的第一个元素back(); // 返回list中的最后一个元素</code></pre><h4 id="3-6-7-list反转和排序"><a href="#3-6-7-list反转和排序" class="headerlink" title="3.6.7 list反转和排序"></a>3.6.7 list反转和排序</h4><pre class=" language-c++"><code class="language-c++">reverse(); // 反转链表sort(); // 链表排序 // list就是不支持随机访问迭代器的容器，其内部会提供sort()算法，可以直接调用，list.sort();这是默认的升序// 默认的排序规则是从小到大// 所有不支持随机访问的迭代器的容器，不可以用标准算法</code></pre><h4 id="3-6-8-排序案列"><a href="#3-6-8-排序案列" class="headerlink" title="3.6.8 排序案列"></a>3.6.8 排序案列</h4><p>描述：将Person自定义数据类型进行排序，Person中有姓名、年龄、身高</p><p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<string>#include<list>class Person &#123;public:    string m_name;    int m_age;    int m_high;    Person(string name, int age, int high) &#123;        this->m_age = age;        this->m_high = high;        this->m_name = name;    &#125;&#125;;// 仿函数，指定排序规则bool comparePerson(Person& person01, Person& person02) &#123;    if (person01.m_age < person02.m_age)    &#123;        return true;    &#125;    else if (person01.m_age == person02.m_age)    &#123;        return person01.m_high > person02.m_high;    &#125;    else    &#123;        return false;    &#125;&#125;void test01() &#123;    // 创建5个Person对象    Person person01("tom", 10, 167);    Person person02("jack", 20, 155);    Person person03("smith", 10, 169);    Person person04("jerry", 20, 177);    Person person05("marry", 30, 180);        // 将 5个人放入list    list<Person> personList;    personList.push_back(person01);    personList.push_back(person02);    personList.push_back(person03);    personList.push_back(person04);    personList.push_back(person05);    // 排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序    // 写一个仿函数设置排序规则    personList.sort(comparePerson);    // 输出列表    for (list<Person>::iterator it = personList.begin(); it != personList.end(); it++)    &#123;        cout << (*it).m_name << "\t" << (*it).m_age << "\t" << (*it).m_high << endl;    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><h3 id="3-7-set-multiset容器"><a href="#3-7-set-multiset容器" class="headerlink" title="3.7 set/multiset容器"></a>3.7 set/multiset容器</h3><h4 id="3-7-1-set基本概念"><a href="#3-7-1-set基本概念" class="headerlink" title="3.7.1 set基本概念"></a>3.7.1 set基本概念</h4><ol><li>所有元素都会在插入时自动被排序</li><li>set/multiset属于关联式容器，底层结构是用二叉树实现的</li><li>set和multiset区别：<ul><li>set不允许有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul></li></ol><h4 id="3-7-2-set构造和赋值"><a href="#3-7-2-set构造和赋值" class="headerlink" title="3.7.2 set构造和赋值"></a>3.7.2 set构造和赋值</h4><pre class=" language-c++"><code class="language-c++">set<T> set01; // 默认构造set(const set& set01); // 拷贝构造operator=(); // 重载 = ，拷贝构造set01.insert(T elem); // 插入数据</code></pre><h4 id="3-7-3-set大小和交换"><a href="#3-7-3-set大小和交换" class="headerlink" title="3.7.3 set大小和交换"></a>3.7.3 set大小和交换</h4><pre class=" language-c++"><code class="language-c++">size(); // 返回容器中的元素数目，不支持重新指定容器的大小empty(); // 判断容器是否为空set02.swap(set01); // 交换容器中的元素 </code></pre><h4 id="3-7-4-set插入和删除"><a href="#3-7-4-set插入和删除" class="headerlink" title="3.7.4 set插入和删除"></a>3.7.4 set插入和删除</h4><pre class=" language-c++"><code class="language-c++">insert(elem); // 在容器中插入元素，clear(); // 清除容器中的元素erase(pos); // 删除pos迭代器所指的元素，erase(elem); // 删除elem元素erase(set01.begin(), set01.end()); // 删除区间中的元素</code></pre><h4 id="3-7-5-set查找和统计"><a href="#3-7-5-set查找和统计" class="headerlink" title="3.7.5 set查找和统计"></a>3.7.5 set查找和统计</h4><p>对set容器进行查找数据以及统计数据</p><pre class=" language-c++"><code class="language-c++">find(key); // 查找是否找到key， 若存在，则返回该key的迭代器，不存在，则返回end()迭代器count(key); // 对于set而言，统计结果要么是0，要么是1</code></pre><h4 id="3-7-6-set和multiset区别"><a href="#3-7-6-set和multiset区别" class="headerlink" title="3.7.6 set和multiset区别"></a>3.7.6 set和multiset区别</h4><ol><li>set插入数据的时候会返回插入结果，表示是否成功</li><li>multiset不会检测数据，因此可以插入重复的数据</li></ol><h4 id="3-7-7-pair对组创建"><a href="#3-7-7-pair对组创建" class="headerlink" title="3.7.7 pair对组创建"></a>3.7.7 pair对组创建</h4><p>成对出现的数据，利用对组可以返回两个数据</p><pre class=" language-c++"><code class="language-c++">pair<type, type> p(value1, value2);pair<type, type> p = make_pair(value1, value2);</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;void test01() &#123;    pair<string, int> p1("tom", 12);    cout << p1.first << " " << p1.second << endl;    pair<string, int> p2 = make_pair("jerry", 20);    cout << p2.first << " " << p2.second << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="3-7-8-set容器排序"><a href="#3-7-8-set容器排序" class="headerlink" title="3.7.8 set容器排序"></a>3.7.8 set容器排序</h4><p>set容器默认是从小到大排序，但是可以利用仿函数可以改变排序规则</p><p>对基本数据类型需改排序规则案例：</p><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<set>class MyCompare &#123;public:    // 要在函数参数列表后面加const，我也不知道为什么，不加就会报错     //错误：C3848，具有类型“const MyCompare”的表达式会丢失一些 const - volatile 限定符以调用“bool MyCompare::operator ()(int, int)”    bool operator()(int v1, int v2)const &#123; // 第一个括号是（）重载，第二个括号是参数列表        return v1 > v2;    &#125;&#125;;// 存放基本数据类型void test01() &#123;    set<int> s1;    s1.insert(10);    s1.insert(30);    s1.insert(20);    s1.insert(60);    s1.insert(50);        for (set<int>::iterator it = s1.begin(); it != s1.end(); it++)    &#123;        cout << (*it) << " ";    &#125;    cout << endl;    set<int, MyCompare> s2; // 在插入数据之前，指定仿函数，可以修改排序规则    s2.insert(10);    s2.insert(30);    s2.insert(20);    s2.insert(60);    s2.insert(50);    for (set<int, MyCompare>::iterator it = s2.begin(); it != s2.end(); it++)    &#123;        cout << (*it) << " ";    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><p>对自定义数据类型修改排序规则案例：</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<set>#include<string>using namespace std;class Person &#123;public:    string m_name;    int m_age;    Person(int age, string name) &#123;        this->m_age = age;        this->m_name = name;    &#125;&#125;;class MyCompare &#123;public:    bool operator()(const Person& p1, const Person& p2) const &#123;        // 用const修饰，可以放置数据被修改，用引用可以使形参和实参指向内存中的同一块空间        // 若形参不加引用，就会调用默认的拷贝构造函数来给形参赋值，这就可能引发浅拷贝的问题        // 按照年龄从小到大排序set中的person元素        return p1.m_age < p2.m_age;    &#125;&#125;;void test01() &#123;    // 因此这是自定义数据类型，因此编译器不知道该按照什么方式自动排序，因此需要在插入数据之前，用仿函数指定排序规则    set<Person, MyCompare> personSet;    Person person01(10, "tom");    Person person02(50, "marry");    Person person03(30, "smith");    Person person04(20, "jerry");    personSet.insert(person01);    personSet.insert(person02);    personSet.insert(person03);    personSet.insert(person04);    for (set<Person>::iterator it = personSet.begin(); it != personSet.end(); it++)    &#123;        cout << (*it).m_name << "\t" << (*it).m_age << endl;    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><p><a href="https://blog.csdn.net/qq_32739503/article/details/83341222">(12条消息) c++　在函数后加const的意义：_qq_32739503的博客-CSDN博客_函数后加const</a></p><p><a href="https://blog.csdn.net/whahu1989/article/details/80501685">(12条消息) C++成员函数形参列表后的const_爱就是恒久忍耐的博客-CSDN博客_参数列表后的const</a></p><h3 id="3-8-map-multimap容器"><a href="#3-8-map-multimap容器" class="headerlink" title="3.8 map/multimap容器"></a>3.8 map/multimap容器</h3><h4 id="3-8-1-map基本概念"><a href="#3-8-1-map基本概念" class="headerlink" title="3.8.1 map基本概念"></a>3.8.1 map基本概念</h4><ol><li>map中所有元素都是pair</li><li>pair中的第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li><li>所有元素都会根据元素的键值自动排序</li><li>map/multimap属于关联式容器，底层结构是用二叉树实现的</li><li>可以根据key值快速找到value值</li><li>map中不允许容器中有重复的key值</li><li>multimap中允许有重复的key值</li></ol><h4 id="3-8-2-构造和赋值"><a href="#3-8-2-构造和赋值" class="headerlink" title="3.8.2 构造和赋值"></a>3.8.2 构造和赋值</h4><pre class=" language-c++"><code class="language-c++">map<type, type> m1; // 第一个为key的类型，第二个为value的类型map(const map& mp); // 拷贝构造函数map& operator=(const map& mp); // = 重载赋值map<int, int> m3;m3.insert( pair<type, type>(elem, elem) ); // 插入一个pair值，会根据key值进行自动排序</code></pre><h4 id="3-8-3-map大小和交换"><a href="#3-8-3-map大小和交换" class="headerlink" title="3.8.3 map大小和交换"></a>3.8.3 map大小和交换</h4><pre class=" language-c++"><code class="language-c++">size(); // 返回容器中的元素个数empty(); // 判断容器是否为空swap(); // 交换两个map中的元素</code></pre><h4 id="3-8-4-插入和删除"><a href="#3-8-4-插入和删除" class="headerlink" title="3.8.4 插入和删除"></a>3.8.4 插入和删除</h4><pre class=" language-c++"><code class="language-c++">insert(elem); // 在容器中插入元素map<int, int> m1;// 第一种m1.insert( pair<type, type>(elem, elem) ); // 插入一个pair值，会根据key值进行自动排序// 第二种m1.insert( make_pair(elem, elem) ); // 推荐// 第三种m1.insert(map<int, int>::value_type(elem, elem));// 第四种m1[4] = 40; // 用中括号直接赋值, 中括号中的数据是key的值，40是value// 可以利用中括号通过key来访问value，这是中括号的主要用途clear(); // 清除容器的元素erase(pos); // 删除pos迭代器指向的元素，返回下一个元素的迭代器erase(begin, end); // 删除区间中的元素，返回下一个元素的迭代器erase(key); // 删除容器中的值为key的元素</code></pre><h4 id="3-8-5-查找和统计"><a href="#3-8-5-查找和统计" class="headerlink" title="3.8.5 查找和统计"></a>3.8.5 查找和统计</h4><pre class=" language-c++"><code class="language-c++">find(key); // 按照key查找数据，若存在，返回该元素的迭代器，若不存在，返回map.end();count(key); // 按照key统计元素个数，map因为不能加入重复的key，因此要么返回1，要么返回0// multimap 要么返回0，要么返回相同的key的个数</code></pre><h4 id="3-8-6-排序"><a href="#3-8-6-排序" class="headerlink" title="3.8.6 排序"></a>3.8.6 排序</h4><p>map容器默认排序规则为按照key的值进行从小到大排序，掌握如何利用仿函数改变排序规则</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<map>using namespace std;class MyCompare &#123;public:    bool operator()(int v1, int v2)const &#123;        return v1 > v2;    &#125;&#125;;void test01() &#123;    map<int, int, MyCompare> m1;    m1.insert(make_pair(1, 100));    m1.insert(make_pair(2, 200));    m1.insert(make_pair(3, 300));    m1.insert(make_pair(4, 400));    for (map<int, int>::iterator it = m1.begin(); it != m1.end(); it++)    &#123;        cout << (*it).first << " " << (*it).second << endl;    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><h3 id="3-9-STL案列2-员工分组"><a href="#3-9-STL案列2-员工分组" class="headerlink" title="3.9 STL案列2-员工分组"></a>3.9 STL案列2-员工分组</h3><p>案例描述：</p><ol><li> 公司招聘了10个员工（a, b, c, d, e, f, g, h, i），10名员工进入公司之后，需要指派员工在哪个部门工作</li><li> 员工信息：姓名、工资组成</li><li> 部门分为：策划、美术、研发</li><li> 随机给10名员工分配部门和工资</li><li> 通过multimap进行信息的插入 key（部门编号），value（员工）</li><li> 分部门显示员工信息</li></ol><p>步骤：</p><ol><li>创建10名员工，放入vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将部门编号作为key，具体工作为value，放入到multimap中</li><li>分部门显示员工信息</li></ol><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>#include<vector>#include<map>#include<ctime> // using namespace std;class Department &#123;public:    int deptId;    string deptName;    Department()&#123;&#125;    Department(int id) &#123;        this->deptId = id;        if (this->deptId == 1)        &#123;            this->deptName = "策划部";        &#125;        else if (this->deptId == 2)        &#123;            this->deptName = "美术部";        &#125;        else        &#123;            this->deptName = "研发部";        &#125;    &#125;&#125;;class Employee &#123;public:    string m_name;    int m_sal;    Department dept;    Employee(string name, int sal, Department dept)&#123;        this->m_name = name;        this->m_sal = sal;        this->dept = dept;    &#125;&#125;;void creacreateEmployee(vector<Employee>& employeeVector) &#123;    string employeeId = "ABCDEFGHI";    string name;    int sal;    int deptId;    for (int i = 0; i < employeeId.size(); i++)    &#123;            name = "员工：";        name += employeeId[i]; // 字符串 += 字符，这样拼接成字符串        sal = rand() % 10000 + 10000;        deptId = rand() % 3 + 1;        Department dept(deptId);        Employee employee(name, sal, dept);        employeeVector.push_back(employee);    &#125;&#125;void insertEmployeeToMultimap(multimap<int, Employee>& multimapEmployee,const vector<Employee>& employeeVector) &#123;    for (vector<Employee>::const_iterator it = employeeVector.begin(); it != employeeVector.end(); it++)    &#123;        multimapEmployee.insert(make_pair((*it).dept.deptId,(*it)));    &#125;&#125;void test01() &#123;    // 创建员工vector,用来存放员工    vector<Employee> employeeVector;    // 在这个函数中创建10个员工，并放入employeeVector中    creacreateEmployee(employeeVector);    // 根据员工的部门编号分组，将员工分别输入不同的部门    multimap<int, Employee> multimapEmployee;    // 将employeeVector中的员工加入 multimapEmployee    insertEmployeeToMultimap(multimapEmployee, employeeVector);    // 分部门显示员工信息    multimap<int, Employee>::iterator it = multimapEmployee.begin();    for (int i = 1; i <= 3; i++) // i 表示部门号    &#123;            switch (i)        &#123;            case 1: cout << "============策划部============" << endl; break;            case 2: cout << "============美术部============" << endl; break;            case 3: cout << "============研发部============" << endl; break;        &#125;        for (int j = 1; j <= multimapEmployee.count(i); j++) // count(i) 表示 部门 i 有多少员工        &#123;            cout << (*it).first << "\t\t" << (*it).second.m_name << " " << (*it).second.m_sal << endl;            it++;        &#125;    &#125;&#125;int main() &#123;    srand((unsigned int)time(NULL));    test01();&#125;</code></pre><h2 id="第四章-STL函数对象"><a href="#第四章-STL函数对象" class="headerlink" title="第四章 STL函数对象"></a>第四章 STL函数对象</h2><h3 id="4-1-函数对象"><a href="#4-1-函数对象" class="headerlink" title="4.1 函数对象"></a>4.1 函数对象</h3><h4 id="4-1-1-函数对象的概念"><a href="#4-1-1-函数对象的概念" class="headerlink" title="4.1.1 函数对象的概念"></a>4.1.1 函数对象的概念</h4><ol><li>重载 <strong>函数调用操作符</strong> 的类，其对象称为函数对象</li><li>函数对象使用重载的 () 时，行为类似函数调用，也叫 <strong>仿函数</strong></li><li>函数对象（仿函数）是一个类，不是一个函数</li></ol><h4 id="4-1-2-函数对象的使用"><a href="#4-1-2-函数对象的使用" class="headerlink" title="4.1.2 函数对象的使用"></a>4.1.2 函数对象的使用</h4><ol><li><p>函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值</p></li><li><p>函数对象超出普通函数的概念，函数对象可以有自己的状态</p></li><li><p>函数对象可以作为参数传递</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;class MyAdd &#123;public:    int operator()(int v1, int v2) &#123;        return v1 + v2;    &#125;    int count;    void setCount(int a) &#123;        this->count = a;    &#125;    int getCount() &#123;        return this->count;    &#125;&#125;;// 函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值void test01() &#123;    MyAdd myAdd;    cout << myAdd(10, 20) << endl;&#125;// 函数对象超出普通函数的概念，函数对象可以有自己的状态void test02() &#123;    MyAdd myAdd;    myAdd.setCount(90);    cout << myAdd.getCount() << endl;&#125;// 函数对象可以作为参数传递void printMyAdd(MyAdd& myAdd) &#123;    cout << myAdd(20, 30) << endl;&#125;void test03() &#123;    MyAdd myAdd;    printMyAdd(myAdd);&#125;int main() &#123;    test01();    test02();    test03();&#125;</code></pre></li></ol><h3 id="4-2-谓词"><a href="#4-2-谓词" class="headerlink" title="4.2 谓词"></a>4.2 谓词</h3><h4 id="4-2-1-谓词的概念"><a href="#4-2-1-谓词的概念" class="headerlink" title="4.2.1 谓词的概念"></a>4.2.1 谓词的概念</h4><ol><li>返回 bool类型 的 仿函数 称为谓词</li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ol><h4 id="4-2-2-一元谓词"><a href="#4-2-2-一元谓词" class="headerlink" title="4.2.2 一元谓词"></a><strong>4.2.2 一元谓词</strong></h4><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<algorithm>using namespace std;class GreateFive &#123;public:    bool operator()(int value) &#123; // 返回 bool类型 的 仿函数 称为谓词,如果operator()接受一个参数，那么叫做一元谓词        return value > 5;    &#125;&#125;;void test01() &#123;    vector<int> v;    for (int i = 0; i < 10; i++)    &#123;        v.push_back(i);    &#125;    // 查找 v 中是否有大于 5 的值    // GreateFive(),是匿名对象，且调用了重载()仿函数    // 该函数返回的是满足 GreateFive()条件的迭代器    // 若不满足，则返回 v.end()    vector<int>::iterator it = find_if(v.begin(), v.end(), GreateFive());     // 判断是否找到了大于5的数字    if (it == v.end())    &#123;        cout << "未找到大于 5 的数字" << endl;    &#125;    else    &#123;        cout << "找到了大于5的数字" << (*it) << endl;    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="4-2-3-二元谓词"><a href="#4-2-3-二元谓词" class="headerlink" title="4.2.3 二元谓词"></a>4.2.3 二元谓词</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<vector>#include<algorithm>class MyCompare &#123;public:    bool operator()(int v1, int v2) &#123;        return v1 > v2;    &#125;&#125;;void test01() &#123;    vector<int> v;    v.push_back(10);    v.push_back(50);    v.push_back(20);    v.push_back(40);    // 该sort排序在 #include<algorithm> 中    // 该排序默认是升序排序    sort(v.begin(), v.end());     for (vector<int>::iterator it = v.begin(); it != v.end(); it++)    &#123;        cout << (*it) << " ";    &#125;    cout << "===========================" << endl;    // 使用sort的重载和仿函数，修改排序规则    sort(v.begin(), v.end(), MyCompare());    for (vector<int>::iterator it = v.begin(); it != v.end(); it++)    &#123;        cout << (*it) << " ";    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><h3 id="4-3-内建函数对象"><a href="#4-3-内建函数对象" class="headerlink" title="4.3 内建函数对象"></a>4.3 内建函数对象</h3><h4 id="4-3-1-内建函数对象的意义"><a href="#4-3-1-内建函数对象的意义" class="headerlink" title="4.3.1 内建函数对象的意义"></a>4.3.1 内建函数对象的意义</h4><ol><li>STL内建了一些函数对象</li><li>分类：算术仿函数、关系仿函数、逻辑仿函数</li><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 #include<functional></functional></li></ol><h4 id="4-3-2-算术仿函数"><a href="#4-3-2-算术仿函数" class="headerlink" title="4.3.2 算术仿函数"></a>4.3.2 算术仿函数</h4><ol><li><p>实现四则运算</p></li><li><p>其中negate是一元运算，其他都是二元运算</p></li><li><p>仿函数原型：</p><pre class=" language-c++"><code class="language-c++">template<class T> T plus<T> // 加法仿函数template<class T> T minus<T> // 减法仿函数template<class T> T multiplies<T> // 乘法仿函数template<class T> T divides<T> // 除法仿函数template<class T> T modulus<T> // 取模仿函数template<class T> T negate<T> // 取反仿函数</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<functional>using namespace std;void test01() &#123;    // 算术仿函数，一元运算    negate<int> n;    cout << n(50) << endl; // negate 模板是对一个数取反运算    // 二元加法运算    plus<int> p; // 不允许对两个不同类型的数据做加法运算    cout << p(10, 29) << endl;&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="4-3-3-关系仿函数"><a href="#4-3-3-关系仿函数" class="headerlink" title="4.3.3 关系仿函数"></a>4.3.3 关系仿函数</h4><p>实现对比关系</p><pre class=" language-c++"><code class="language-c++">template<class T> bool equal_to<T> // 等于template<class T> bool not_equal_to<T> // 不等于template<class T> bool greater<T> // 大于template<class T> bool greater_equal<T> // 大于等于template<class T> bool less<T> // 小于template<class T> bool less_equal<T> // 小于等于</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<vector>#include<algorithm>#include<functional>void test01() &#123;    vector<int> v;    v.push_back(10);    v.push_back(50);    v.push_back(20);    v.push_back(40);    // 该sort排序在 #include<algorithm> 中    // 该排序默认是升序排序    sort(v.begin(), v.end());    for (vector<int>::iterator it = v.begin(); it != v.end(); it++)    &#123;        cout << (*it) << " ";    &#125;    cout << "===========================" << endl;    // 使用sort的重载和仿函数，修改排序规则    // 用内建函数对象来修改排序规则    sort(v.begin(), v.end(), greater<int>());    for (vector<int>::iterator it = v.begin(); it != v.end(); it++)    &#123;        cout << (*it) << " ";    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="4-3-4-逻辑仿函数"><a href="#4-3-4-逻辑仿函数" class="headerlink" title="4.3.4 逻辑仿函数"></a>4.3.4 逻辑仿函数</h4><p>实现逻辑运算</p><pre class=" language-c++"><code class="language-c++">template<class T> bool logical_and<T> // 逻辑与template<class T> bool logical_not<T> // 逻辑非template<class T> bool logical_or<T> // 逻辑或</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<algorithm>#include<vector>#include<functional>using namespace std;void test01() &#123;    vector<bool> v;    v.push_back(true);    v.push_back(false);    v.push_back(true);    v.push_back(false);    for (vector<bool>::iterator it = v.begin(); it != v.end(); it++)    &#123;        cout << (*it) << " ";    &#125;    cout << endl;    // 使用内建函数对象做取反操作    vector<bool> v1;    v1.resize(v.size());    transform(v.begin(), v.end(), v1.begin(), logical_not<bool>());    for (vector<bool>::iterator it = v1.begin(); it != v1.end(); it++)    &#123;        cout << (*it) << " ";    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><h2 id="第五章-常用算法"><a href="#第五章-常用算法" class="headerlink" title="第五章 常用算法"></a>第五章 常用算法</h2><ol><li>算法主要是由头文件<algorithm>, <functional>, <numeric> 组成</numeric></functional></algorithm></li><li><algorithm> 是所有STL头文件中的最大的一个，范围设计到比较，交换，查找，遍历操作，复制，修改等等</algorithm></li><li><numeric> 体积很小，只包括几个在序列上面进行简单数学运算的模板函数</numeric></li><li><functional> 定义了一些模板类，用以声明函数对象</functional></li></ol><h3 id="5-1-常用遍历算法"><a href="#5-1-常用遍历算法" class="headerlink" title="5.1 常用遍历算法"></a>5.1 常用遍历算法</h3><h4 id="5-1-1-for-each"><a href="#5-1-1-for-each" class="headerlink" title="5.1.1 for_each"></a>5.1.1 for_each</h4><ol><li><p>遍历容器</p></li><li><p>需要包含#include<algorithm></algorithm></p></li><li><pre class=" language-c++"><code class="language-c++">for_each(iterator begin, iterator end, _func);// begin 开始迭代器// end 结束迭代器// _func 普通函数或者函数对象</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include<vector>#include<algorithm>void print01(int value) &#123;    cout << value <<" ";&#125;class Print02 &#123;public:    void operator()(int value) &#123;        cout << value << " " << endl;    &#125;&#125;;void test01() &#123;    vector<int> v;    v.push_back(20);    v.push_back(10);    v.push_back(40);    v.push_back(30);    v.push_back(50);    for_each(v.begin(), v.end(), print01); // 普通函数，不加括号    cout << endl;    for_each(v.begin(), v.end(), Print02()); // 如果是函数对象，需要将匿名对象传入&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h4 id="5-1-2-transform"><a href="#5-1-2-transform" class="headerlink" title="5.1.2 transform"></a>5.1.2 transform</h4><ol><li><p>搬运容器到另一个容器中</p></li><li><pre class=" language-c++"><code class="language-c++">transform(iteraotr begin1, iterator end1, iterator begin2, _func); // 容器元素的搬运，可以定义如何搬运// begin1, 原容器的开始迭代器// end1, 原容器的结束迭代器// begin2, 目标容器的开始迭代器// _func, 普通函数或者函数对象</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<algorithm>using namespace std;class Transform01 &#123;public:    int operator()(int value) &#123;        return value;    &#125;&#125;;class Print01 &#123;public:    void operator()(int value) &#123;        cout << value << " ";    &#125;&#125;;void test01() &#123;    // 将 v1 中的元素搬运到 v2    vector<int> v1;        for (int i = 0; i < 10; i++)    &#123;        v1.push_back(i);    &#125;        vector<int> v2;    v2.resize(v1.size()); // 在搬运之前需要先指定v2的大小    transform(v1.begin(), v1.end(), v2.begin(), Transform01());    for_each(v2.begin(), v2.end(), Print01());&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h3 id="5-2-常用的查找算法"><a href="#5-2-常用的查找算法" class="headerlink" title="5.2 常用的查找算法"></a>5.2 常用的查找算法</h3><h4 id="5-2-1-find"><a href="#5-2-1-find" class="headerlink" title="5.2.1 find"></a>5.2.1 find</h4><pre class=" language-c++"><code class="language-c++">// 查找value这个元素, 找到返回指定元素的迭代器，找不到返回结束迭代器end()// 需要包含algorithmfind(iterator begin, iterator end, value);</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<string>using namespace std;class Person &#123;public:    string m_name;    int m_age;    Person(string name, int age) &#123;        this->m_name = name;        this->m_age = age;    &#125;    bool operator==(const Person& person) &#123;        if (this->m_name == person.m_name && this->m_age == person.m_age)        &#123;            return true;        &#125;        else        &#123;            return false;        &#125;    &#125;&#125;;void test01() &#123;    Person person01("tom", 19);    Person person02("jerry", 29);    Person person03("smith", 9);    Person person04("marry", 49);    vector<Person> persons;    persons.push_back(person01);    persons.push_back(person02);    persons.push_back(person03);    persons.push_back(person04);        // 查找    // 查看find源码，得出需要重载 == 运算符修改对 相等 的定义    // 因此底层不知道如何比较自定义数据类型    vector<Person>::iterator it = find(persons.begin(), persons.end(), person02);    if (it != persons.end())    &#123;        cout << (*it).m_name << " " << (*it).m_age << endl;    &#125;    else    &#123;        cout << "没有找到person02" << endl;    &#125;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="5-2-2-find-if"><a href="#5-2-2-find-if" class="headerlink" title="5.2.2 find_if"></a>5.2.2 find_if</h4><p>按条件查找元素，找到返回指定位置的迭代器，找不到返回结束迭代器位置</p><p>需要包含头文件：algorithm</p><pre class=" language-c++"><code class="language-c++">find_if(iterator begin, iterator end, _Pred); // begin 开始迭代器// end 结束迭代器// _Pred 普通函数或者谓词（返回bool类型的仿函数）</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<string>#include<algorithm>using namespace std;class Person &#123;public:    string m_name;    int m_age;    Person(string name, int age) &#123;        this->m_name = name;        this->m_age = age;    &#125;&#125;;class Greater20 &#123;public:    bool operator()(Person& person) &#123;        if (person.m_age > 20)        &#123;            return true;        &#125;        else        &#123;            return false;        &#125;    &#125;&#125;;void test02() &#123;    Person person01("tom", 19);    Person person02("jerry", 29);    Person person03("smith", 9);    Person person04("marry", 49);    vector<Person> persons;    persons.push_back(person01);    persons.push_back(person02);    persons.push_back(person03);    persons.push_back(person04);    // 查找persons容器中，是否有年龄大于20的人    vector<Person>::iterator it = find_if(persons.begin(), persons.end(), Greater20());    if (it != persons.end())    &#123;        cout << (*it).m_name << " " << (*it).m_age << endl;    &#125;    else    &#123;        cout << "没有找到这样的人" << endl;    &#125;&#125;int main() &#123;    test02();&#125;</code></pre><h4 id="5-2-3-adjacent-find"><a href="#5-2-3-adjacent-find" class="headerlink" title="5.2.3 adjacent_find"></a>5.2.3 adjacent_find</h4><pre class=" language-c++"><code class="language-c++">adjacent_find(iterator begin, iterator end); // 返回相邻重复元素的迭代器</code></pre><h4 id="5-2-4-binary-search"><a href="#5-2-4-binary-search" class="headerlink" title="5.2.4 binary_search"></a>5.2.4 binary_search</h4><p>查找指定的元素是否存在，查到则返回true，否则返回false</p><pre class=" language-c++"><code class="language-c++">bool binary_search(iterator begin, iterator end, value);// 注意，在无序序列中不可用// 因为该算法基于二分查找法，速度比较快// begin, 开始迭代器// end, 结束迭代器// value, 要查找的元素</code></pre><h4 id="5-2-5-count"><a href="#5-2-5-count" class="headerlink" title="5.2.5 count"></a>5.2.5 count</h4><p>统计元素个数</p><pre class=" language-c++"><code class="language-c++">count(iterator begin, iterator end, value); // 在迭代器区间统计value的个数</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<string>#include<algorithm>using namespace std;class Person &#123;public:    string m_name;    int m_age;    Person(string name, int age) &#123;        this->m_name = name;        this->m_age = age;    &#125;    bool operator==(const Person& person) &#123;        if (this->m_name == person.m_name && this->m_age == person.m_age)        &#123;            return true;        &#125;        else        &#123;            return false;        &#125;    &#125;&#125;;void test01() &#123;    Person person01("tom", 19);    Person person02("jerry", 29);    Person person03("smith", 9);    Person person04("marry", 49);    Person person05("jerry", 29);    vector<Person> persons;    persons.push_back(person01);    persons.push_back(person02);    persons.push_back(person03);    persons.push_back(person04);    persons.push_back(person05);        int num;    // 统计自定义数据类型的个数，需要重载运算符 ==     num = count(persons.begin(), persons.end(), person02);    cout << num << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h4 id="5-2-6-count-if"><a href="#5-2-6-count-if" class="headerlink" title="5.2.6 count_if"></a>5.2.6 count_if</h4><p>按条件统计某个元素个数</p><pre class=" language-c++"><code class="language-c++">count_if(iterator begin, iterator end, _Pred);// begin 开始迭代器// end 结束迭代器// _Pred 谓词，返回 bool类型 的 仿函数 称为谓词，函数对象</code></pre><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<string>#include<algorithm>using namespace std;class Person &#123;public:    string m_name;    int m_age;    Person(string name, int age) &#123;        this->m_name = name;        this->m_age = age;    &#125;&#125;;class age20 &#123;public:    bool operator()(const Person& person) &#123;        return person.m_age > 20;    &#125;&#125;;void test01() &#123;    Person person01("tom", 19);    Person person02("jerry", 29);    Person person03("smith", 9);    Person person04("marry", 49);    Person person05("tom", 89);    vector<Person> persons;    persons.push_back(person01);    persons.push_back(person02);    persons.push_back(person03);    persons.push_back(person04);    persons.push_back(person05);        int num;    // 统计自定义数据类型的个数，需要重载运算符 ==     // 统计年龄大于二十的人数    num = count_if(persons.begin(), persons.end(),age20());    cout << num << endl;&#125;int main() &#123;    test01();&#125;</code></pre><h3 id="5-3-常用排序算法"><a href="#5-3-常用排序算法" class="headerlink" title="5.3 常用排序算法"></a>5.3 常用排序算法</h3><h4 id="5-3-1-sort"><a href="#5-3-1-sort" class="headerlink" title="5.3.1 sort"></a>5.3.1 sort</h4><pre class=" language-c++"><code class="language-c++">// 对容器元素进行排序sort(iterator begin, iterator end, _Pred);// _Pred 谓词，可以改变排序规则</code></pre><h4 id="5-3-2-random-shuffle"><a href="#5-3-2-random-shuffle" class="headerlink" title="5.3.2 random_shuffle"></a>5.3.2 random_shuffle</h4><p>#include<algorithm></algorithm></p><pre class=" language-c++"><code class="language-c++">// 洗牌算法，将指定范围内的元素顺序打乱random_shuffle(iterator begin, iterator end);</code></pre><h4 id="5-3-3-merge"><a href="#5-3-3-merge" class="headerlink" title="5.3.3 merge"></a>5.3.3 merge</h4><p>#include<algorithm></algorithm></p><p>两个容器中的元素合并，并存储到另一个容器（需要提前开辟空间）中</p><pre class=" language-c++"><code class="language-c++">merge(iterator begin1, iterator end1, iterator begin2, iterator end2, iterator dest);// 注意，两个容器必须是有序的// dest 目标容器的开始迭代器// 合并以后依然是一个有序序列</code></pre><h4 id="5-3-4-reverse"><a href="#5-3-4-reverse" class="headerlink" title="5.3.4 reverse"></a>5.3.4 reverse</h4><pre class=" language-c++"><code class="language-c++">// 将容器内的元素进行反转reverse(iterator begin, iterator end);</code></pre><h3 id="5-4-常用拷贝和替换算法"><a href="#5-4-常用拷贝和替换算法" class="headerlink" title="5.4 常用拷贝和替换算法"></a>5.4 常用拷贝和替换算法</h3><h4 id="5-4-1-copy"><a href="#5-4-1-copy" class="headerlink" title="5.4.1 copy"></a>5.4.1 copy</h4><p>#include<algorithm></algorithm></p><p>其实，在vector容器中直接用 = 赋值即可</p><pre class=" language-c++"><code class="language-c++">// 容器内指定范围的元素拷贝到另一个容器(需要提前开辟空间，否则无法加入数据)中copy(iterator begin, iterator end, iterator dest);// 将区间内的元素拷贝到另一个容器的dest迭代器</code></pre><h4 id="5-4-2-replace"><a href="#5-4-2-replace" class="headerlink" title="5.4.2 replace"></a>5.4.2 replace</h4><p>将容器内的指定范围的旧元素替换为新元素</p><p>#include<algorithm></algorithm></p><pre class=" language-c++"><code class="language-c++">replace(iterator begin, iterator end, elem1, elem2); // 将区间的元素的elem1全部替换为elem2 </code></pre><h4 id="5-4-3-replace-if"><a href="#5-4-3-replace-if" class="headerlink" title="5.4.3 replace_if"></a>5.4.3 replace_if</h4><p>将区间内满足条件的元素替换为新元素</p><p>#include<algorithm></algorithm></p><pre class=" language-c++"><code class="language-c++">replace_if(iterator begin, iterator end, _Pred, newElem);// _Pred 谓词// newElem 新的元素</code></pre><h4 id="5-4-4-swap"><a href="#5-4-4-swap" class="headerlink" title="5.4.4 swap"></a>5.4.4 swap</h4><pre class=" language-c++"><code class="language-c++">// 交换两个容器中的元素swap(container c1, container c2); // 两个容器中类型要相同</code></pre><h3 id="5-5-常用算术生成算法"><a href="#5-5-常用算术生成算法" class="headerlink" title="5.5 常用算术生成算法"></a>5.5 常用算术生成算法</h3><h4 id="5-5-1-accumulate"><a href="#5-5-1-accumulate" class="headerlink" title="5.5.1 accumulate"></a>5.5.1 accumulate</h4><p>#include<numeric></numeric></p><pre class=" language-c++"><code class="language-c++">accumulate(iterator begin, iterator end, value); // 将容器中的元素累加并返回总和// value 是起始的累加值</code></pre><h4 id="5-5-2-fill"><a href="#5-5-2-fill" class="headerlink" title="5.5.2 fill"></a>5.5.2 fill</h4><p>#include<numeric></numeric></p><p>向容器区间填充指定的数据</p><pre class=" language-c++"><code class="language-c++">fill(iterator begin, iterator end, value); // 将value填充到区间</code></pre><h3 id="5-6-常用集合算法"><a href="#5-6-常用集合算法" class="headerlink" title="5.6 常用集合算法"></a>5.6 常用集合算法</h3><h4 id="5-6-1-set-intersection"><a href="#5-6-1-set-intersection" class="headerlink" title="5.6.1 set_intersection"></a>5.6.1 set_intersection</h4><p>求两个容器（这两个容器必须都是有序的）的交集，这个交集要放在另一个容器（要提前开辟空间），这两个容器都必须是同一种类型</p><pre class=" language-c++"><code class="language-c++">set_intersection(iterator begin1, iterator end1, iterator begin2, iterator end2, iterator newBegin); // 返回的是 交集的最后一个元素的下一个位置的迭代器</code></pre><h4 id="5-6-2-set-union"><a href="#5-6-2-set-union" class="headerlink" title="5.6.2 set_union"></a>5.6.2 set_union</h4><p>求两个容器（这两个容器必须是有序的）的并集，然后将并集放入新的容器（要提前开辟空间）</p><pre class=" language-c++"><code class="language-c++">set_union(iterator begin1, iterator end1, iterator begin2, iterator end2, iterator newBegin);// 返回的是的并集的最后一个元素的下一个位置的迭代器;</code></pre><h4 id="5-6-3-set-difference"><a href="#5-6-3-set-difference" class="headerlink" title="5.6.3 set_difference"></a>5.6.3 set_difference</h4><p>求两个容器（这两个容器必须是有序的）的差集，并将差集放到新的容器</p><p>要明确 谁和谁的差集，这是有区别的</p><ol><li>v1 和 v2 容器的差集<ol start="2"><li>v2 和 v1 容器的差集</li></ol></li></ol><pre class=" language-c++"><code class="language-c++">set_difference(iterator begin1, iterator end1, iterator begin2, iterator end2, iterator newBegin);// 返回的是差集的最后一个元素的下一个位置的迭代器</code></pre><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h4 id="生成随机数："><a href="#生成随机数：" class="headerlink" title="生成随机数："></a><strong>生成随机数：</strong></h4><p>​    // 添加随机数种子：利用系统的当前时间生成随机数，防止每次随机数都一样</p><p>​    srand((unsigned int)time(NULL));  // 要包含 #include<ctime><br>​    // 生成一个随机数<br>​    int randomNum = 1 + rand() % 100;<br>​    cout &lt;&lt; randomNum &lt;&lt; endl;</ctime></p><h4 id="常用计算方法："><a href="#常用计算方法：" class="headerlink" title="常用计算方法："></a><strong>常用计算方法：</strong></h4><p>​    a = num % 10; // 获取个位<br>​    b = (num / 10) % 10; // 获取十位<br>​    c = num / 100; // 获取百位</p><h4 id="列数小于等于行数"><a href="#列数小于等于行数" class="headerlink" title="列数小于等于行数"></a><strong>列数小于等于行数</strong></h4><p>sizeof(数据):统计数据所占的字节数</p><p>system(“pause”); // 请按任意键继续</p><h4 id="include"><a href="#include" class="headerlink" title="#include"></a><strong>#include<algorithm></algorithm></strong></h4><p>find_if(迭代器开始，迭代器结束，匿名对象())； // 匿名对象()，使用了重载的()运算符</p><h4 id="min-elem-elem-；求最小值"><a href="#min-elem-elem-；求最小值" class="headerlink" title="min(elem, elem)；求最小值"></a>min(elem, elem)；求最小值</h4><h4 id="max-elem-elem-；求最大值"><a href="#max-elem-elem-；求最大值" class="headerlink" title="max(elem, elem)；求最大值"></a>max(elem, elem)；求最大值</h4><h1 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h1><p>头文件中写声明；</p><p>源文件中写实现；</p><p>#progma once：防止头文件重复包含</p><p>类名::   意思是声明作用域</p><p>shift + tab 向右缩进</p><p><strong>匿名对象：</strong>类名()。使用完后就会被释放</p><p><strong>开闭原则：</strong>对扩展进行开放，对修改进行关闭</p><h1 id="经典习题"><a href="#经典习题" class="headerlink" title="经典习题"></a>经典习题</h1><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;int main() &#123;    // 冒泡排序：从小到大排序    int arr[] = &#123;5,4,3,2,1&#125;;    int temp = 0;    for (int i = 0; i < sizeof(arr)/sizeof(int) - 1; i++) // 执行几次冒泡排序    &#123;        for (int j = 0; j < sizeof(arr)/sizeof(int) - i - 1; j++)        &#123;            // 交换数据            if (arr[j] > arr[j + 1]) &#123;                temp = arr[j + 1];                arr[j + 1] = arr[j];                arr[j] = temp;            &#125;        &#125;    &#125;    for (int i = 0; i < sizeof(arr)/sizeof(int); i++)    &#123;        cout << arr[i] << "\t";    &#125;&#125;// 比较相邻元素，如果第一个数字比第二个数字大，则交换// 要执行多少次冒泡排序（数组长度-1）次// 每轮对比次数 = 元素个数 - 排序轮数 - 1</code></pre><h4 id="冒泡排序升级：用指针、数组、函数"><a href="#冒泡排序升级：用指针、数组、函数" class="headerlink" title="冒泡排序升级：用指针、数组、函数"></a>冒泡排序升级：用指针、数组、函数</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;// 从小到大排序// 传入的是数组首地址，那么形参arr的地址就是实参的地址，形参arr数据的修改其实就是修改的实参的数据void bubbleSort(int * arr, int length) &#123;    int temp = 0;    for (int i = 0; i < length - 1; i++)    &#123;        for (int j = 0; j < length - i - 1; j++)        &#123;            // 交换数据            if (arr[j] > arr[j + 1]) &#123;                temp = arr[j + 1];                arr[j + 1] = arr[j];                arr[j] = temp;            &#125;        &#125;    &#125;&#125;int main() &#123;    // 创建数组    int arr[] = &#123;3, 4, 9, 2, 0, -1&#125;;    int* p = arr;    cout << *p << "的地址是：" << p << endl; // 3的地址是：000000A877F6FB98    cout << *p++ << "的地址是：" << p << endl; // 3的地址是：000000A877F6FB9C    // 获取数组的长度    int length = sizeof(arr) / sizeof(int);    // 调用冒泡排序算法    bubbleSort(arr, length);    // 打印排序结果    for (int i = 0; i < length; i++)    &#123;        cout << arr[i] << "\t";    &#125;    return 0;&#125;</code></pre><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="职工管理系统"><a href="#职工管理系统" class="headerlink" title="职工管理系统"></a>职工管理系统</h2><h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include"WorkerManager.h"#include"Worker.h"#include"Employee.h"#include"Boos.h"#include"Manager.h"int main() &#123;    WorkerManager workerManager;    int choice = 0; // 用户的选项    while (true)    &#123;        workerManager.show_Menu(); // 循环展示菜单栏        cout << "请输入要执行的功能：";        cin >> choice; // 接收用户的选择        switch (choice)        &#123;        case 0:             // 程序退出            workerManager.exitSystem();            break;        case 1:            // 添加职工信息            workerManager.addWorker();            break;        case 2:            // 显示职工信息            workerManager.showWorkers();            break;        case 3:            // 删除离职职工            workerManager.deleteWorker();            break;        case 4:            // 修改职工信息            workerManager.modifyWorkerInfo();            break;        case 5:            // 查找职工信息            workerManager.findWorkerById();            break;        case 6:            // 按照编号排序            workerManager.ascendingSort();            break;        case 7:            // 清空职工信息            workerManager.cleanFile();            break;        default:            system("cls"); // 清屏            break;        &#125;    &#125;    system("pause");&#125;</code></pre><h4 id="职员管理-h文件"><a href="#职员管理-h文件" class="headerlink" title="职员管理.h文件"></a>职员管理.h文件</h4><pre class=" language-c++"><code class="language-c++">#pragma once // 防止头文件重复包含#include<iostream> // 标准文件输入输出流using namespace std; // 标准命名空间#include"Worker.h"class WorkerManager &#123;public:    int workerNum; // 该职工管理系统中的职工数    Worker** workers; // 职工管理系统中指向职工数组的指针    bool fileIsEmpty;    // 在头文件中声明，在源文件中实现    WorkerManager();    ~WorkerManager();    // 与用户沟通的界面    void show_Menu();    // 退出功能    void exitSystem();    void addWorker();    void saveToFile(string filePath);    // 统计该系统中的职工数    int getWorkerNum();    // 初始化员工    void initWorker();    // 显示该系统中职工信息    void showWorkers();    // 根据职工id删除职工    void deleteWorker();    // 根据职工id修改职工数据    void modifyWorkerInfo();    // 根据职工id查找职工数据    void findWorkerById();    // 按照职工id升序排序    void ascendingSort();    // 清空文件    void cleanFile();&#125;;</code></pre><h4 id="职员管理-cpp文件"><a href="#职员管理-cpp文件" class="headerlink" title="职员管理.cpp文件"></a>职员管理.cpp文件</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>#include"WorkerManager.h"using namespace std;#include<string>#include"Boos.h"#include"Employee.h"#include"Manager.h"#include<fstream>#define FILEPATH "workersTable.txt"WorkerManager::WorkerManager() &#123;    // 1. 文件不存在    ifstream ifs;    ifs.open(FILEPATH, ios::in);    if (!ifs.is_open()) &#123;        cout << "文件不存在,文件打开失败" << endl;        this->workerNum = 0;        this->workers = NULL;        this->fileIsEmpty = true;        ifs.close();        return;    &#125;    // 2. 文件存在，但文件没有数据    char ch;    ifs >> ch; // 把文件的第一个字符读到ch中    if (ifs.eof()) &#123; // eof()函数可以帮助我们用来判断文件是否为空，抑或是判断其是否读到文件结尾        // 文件为空        cout << "文件为空" << endl;        this->workerNum = 0;        this->workers = NULL;        this->fileIsEmpty = true;        ifs.close();        return;    &#125;    // 3. 文件存在，并且也有数据    int num = this->getWorkerNum();    this->workerNum = num;    cout << "当前职工人数为：" << this->workerNum << endl;    // 将文件中的职工数据读入程序    this->workers = new Worker * [this->workerNum];    this->initWorker();    for (int i = 0; i < this->workerNum; i++)    &#123;        cout << this->workers[i]->m_id << " " << this->workers[i]->m_name << " " << this->workers[i]->m_deptId << endl;    &#125;&#125;WorkerManager::~WorkerManager() &#123;    if (this->workers != NULL) &#123;        for (int i = 0; i < this->workerNum; i++)        &#123;            delete this->workers[i];            this->workers[i] = NULL;        &#125;        delete[] this->workers;        this->workers = NULL;    &#125;&#125;// 用户管理系统菜单void WorkerManager::show_Menu() &#123; // 返回类型 函数限定域::函数名    cout << "**********************************************" << endl;    cout << "************ 欢迎使用职工管理系统 ************" << endl;    cout << "*************  0.退出管理程序  ***************" << endl;    cout << "*************  1.增加职工信息  ***************" << endl;    cout << "*************  2.显示职工信息  ***************" << endl;    cout << "*************  3.删除离职职工  ***************" << endl;    cout << "*************  4.修改职工信息  ***************" << endl;    cout << "*************  5.查找职工信息  ***************" << endl;    cout << "*************  6.按照编号排序  ***************" << endl;    cout << "*************  7.清空职工信息  ***************" << endl;    cout << endl;&#125;void WorkerManager::exitSystem() &#123;    cout << "系统退出，欢迎下次使用" << endl;    system("pause");    exit(0); // 程序退出&#125;void WorkerManager::addWorker() &#123;    cout << "请输入你要添加的职工数：";    int newWorkerNum = 0;    cin >> newWorkerNum;    if (newWorkerNum > 0) &#123;        int newSpaceSize = this->workerNum + newWorkerNum + 5;        // 开辟新空间        // 第一个 * 表示创建数组的类型是Worker存放指针类型数据的数组        // 第二个 * 表示 new 运算符在堆区创建了数组，返回的是一个堆区数组的地址        Worker** newSpace = new Worker*[newSpaceSize]; // 这是一个存放指针的数组，返回的是一个指针数组的地址        // 将workers数组中原来的数据拷贝到新数组        if (this->workers != NULL) &#123;            for (int i = 0; i < this->workerNum; i++)            &#123;                newSpace[i] = this->workers[i];            &#125;        &#125;        // 将新职工加入新数组        for (int i = 0; i < newWorkerNum; i++)        &#123;            int id;            string name;            int deptId;                        cout << "请输入新增的第" << i + 1 << "个员工的信息:" << endl;            cout << "请输入职工编号："; cin >> id;            cout << "请输入职工姓名："; cin >> name;            cout << "请输入部门编号："; cin >> deptId;            Worker* worker = NULL;            switch (deptId)            &#123;            case 1:                worker = new Employee(id, name, 1);                break;            case 2:                worker = new Manager(id, name, 2);                break;            case 3:                worker = new Boos(id, name, 3);                break;            default:                cout << "部门编号输入有误" << endl;                break;            &#125;            newSpace[this->workerNum + i] = worker;        &#125;        // 释放原来 this->workers 指向的堆区的内容        delete[] this->workers;        workers = NULL;        // 更改新空间的指向        this->workers = newSpace;        newSpace = NULL;        // 更新职工人数        this->workerNum = newSpaceSize - 5;        // 提示添加成功        cout << "成功添加了" << newWorkerNum << "名职工" << endl;        cout << "目前共有" << this->workerNum << "名职工" << endl;            // 添加成功后把数据写入文件中        this->saveToFile(FILEPATH);        // 更改文件的状态        this->fileIsEmpty = false;    &#125;    else    &#123;        cout << "输入人数有误" << endl;    &#125;    system("pause");    system("cls");&#125;// 将职工信息存入文件void WorkerManager::saveToFile(string filePath) &#123;    ofstream ofs;    ofs.open(filePath, ios::out);    for (int i = 0; i < this->workerNum; i++)    &#123;        ofs << this->workers[i]->m_id << " " << this->workers[i]->m_name << " " << this->workers[i]->m_deptId << endl;    &#125;    ofs.close();&#125;int WorkerManager::getWorkerNum() &#123;    ifstream ifs;    ifs.open(FILEPATH, ios::in);    int id;    string name;    int deptId;    int num = 0;    while (ifs >> id && ifs >> name && ifs >> deptId)    &#123;        num++;    &#125;    ifs.close();    return num;&#125;void WorkerManager::initWorker() &#123;    // 读取文件，将职工数据读入程序    ifstream ifs;    ifs.open(FILEPATH, ios::in);    int id;    string name;    int deptId;    Worker* worker = NULL;    int index = 0;    while (ifs >> id && ifs >> name && ifs >> deptId) &#123;        // 根据deptId，创建不同的职工对象,然后放入该系统维护的职工数组        if (deptId == 1)        &#123;            worker = new Employee(id, name, 1);        &#125;        else if (deptId == 2)        &#123;            worker = new Manager(id, name, 2);        &#125;        else        &#123;            worker = new Boos(id, name, 3);        &#125;        this->workers[index] = worker;        index++;    &#125;    ifs.close();&#125;void WorkerManager::showWorkers() &#123;    // 首先可以判断文件是否为空    if (this->fileIsEmpty)    &#123;        cout << "文件为空，该系统中没有职工" << endl;    &#125;    else // 否则将该系统中维护的职工数组信息进行输出展示    &#123;        for (int i = 0; i < this->workerNum; i++)        &#123;            // 可以利用多态来调用每个职工的showInfo()函数，来展示职工信息            this->workers[i]->showInfo();        &#125;    &#125;    system("pause");    system("cls");&#125;void WorkerManager::deleteWorker() &#123;    // 首先判断文件是否为空    if (this->fileIsEmpty)    &#123;        cout << "文件为空，无法执行删除操作" << endl;    &#125;    else    &#123;            // 根据输入的职工的id删除职工        int id;        cout << "请输入要输入职工的id：";        cin >> id;        // 查找要删除的职工        for (int i = 0; i < this->workerNum; i++)        &#123;            if (id == this->workers[i]->m_id)            &#123;                    // 找到了要删除的职工，要将数组指向的职工内存内容删除                delete this->workers[i];                this->workers[i] = NULL;                // 更新数组,将后面的职工在数组中前移                // i 是要删除的职工在数组中的下标                for (int j = i; i < this->workerNum - 1; i++)                &#123;                    this->workers[i] = this->workers[i + 1];                &#125;                this->workerNum--; // 删除成功后，要将该系统的职工数减一                // 更新文件                this->saveToFile(FILEPATH);                cout << "删除成功" << endl;                break;            &#125;            if (i == this->workerNum - 1)            &#123;                cout << "该系统中没有该职工，因此无法删除" << endl;            &#125;        &#125;    &#125;    system("pause"); // 按任意键继续    system("cls"); // 清屏&#125;// 根据 id 修改职工信息void WorkerManager::modifyWorkerInfo() &#123;    if (this->fileIsEmpty)    &#123;        cout << "文件为空，无法修改职工信息" << endl;    &#125;    else    &#123;        int id;        cout << "请输入想要修改的职工的编号：";        cin >> id;        // 查找该职工        int index = -1;        for (int i = 0; i < this->workerNum; i++)        &#123;            if (id == this->workers[i]->m_id)            &#123;                    // 将查找到的职工对应的数组下标赋值给 index                index = i;                break;            &#125;        &#125;        if (index != -1)        &#123;            delete this->workers[index];            this->workers[index] = NULL;                        // 重修编写 该职工的信息            int newId;            string newName;            int newDeptId;            cout << "请重新输入要修改的职工的职工编号："; cin >> newId;            cout << "请重新输入要修改的职工的姓名："; cin >> newName;            cout << "请重新输入要修改的职工的部门编号："; cin >> newDeptId;            Worker* worker = NULL;            if (newDeptId == 1)            &#123;                // 普通员工                worker = new Employee(newId, newName, 1);            &#125;            else if (newDeptId == 2)            &#123;                worker = new Manager(newId, newName, 2);            &#125;            else if (newDeptId == 3)            &#123;                worker = new Boos(newId, newName, 3);            &#125;            else            &#123;                cout << "输入的部门编号不合法，程序退出" << endl;                return;            &#125;            this->workers[index] = worker;            cout << "修改成功" << endl;            // 保存到文件中            this->saveToFile(FILEPATH);        &#125;        else        &#123;            cout << "查无此人，修改失败" << endl;        &#125;        system("pause");        system("cls");    &#125;&#125;// 根据 id 查找职工void WorkerManager::findWorkerById() &#123;    // 判断文件是否为空    if (this->fileIsEmpty)    &#123;        cout << "文件为空，查找失败" << endl;    &#125;    else    &#123;        // 文件不空，通过id进行查找        cout << "请输入要查找的职工的id：";        int id;        cin >> id;        int index = -1;        for (int i = 0; i < this->workerNum; i++)        &#123;            if (id == this->workers[i]->m_id)            &#123;                // 该职工存在，则输出该职工的信息                this->workers[i]->showInfo();                index = i;            &#125;        &#125;        if (index == -1)        &#123;            cout << "查无此人" << endl;        &#125;    &#125;    system("pause");    system("cls");&#125;// 根据 id 升序排序void WorkerManager::ascendingSort() &#123;    // 判断文件是否为空    if (this->fileIsEmpty)    &#123;        cout << "文件为空" << endl;    &#125;    else    &#123;        // 选择升序排序        int minIndex = 0;        for (int i = 0; i < this->workerNum; i++)        &#123;            // 寻找 最小 id            minIndex = i;            for (int j = i + 1; j < this->workerNum; j++)            &#123;                if (this->workers[minIndex]->m_id > this->workers[j]->m_id)                &#123;                    minIndex = j;                &#125;            &#125;            // 找到最小 id 进行交换            if (minIndex != i)            &#123;                Worker* temp = NULL;                temp = this->workers[minIndex];                this->workers[minIndex] = this->workers[i];                this->workers[i] = temp;            &#125;        &#125;        this->saveToFile(FILEPATH);    &#125;    system("pause");    system("cls");&#125;// 清空文件void WorkerManager::cleanFile() &#123;    cout << "确定要清空文件吗？yes/no：";    string flag;    cin >> flag;    if (flag == "yes")    &#123;        // 则执行清空文件        fstream fs;        fs.open(FILEPATH, ios::trunc);        fs.close();        for (int i = 0; i < this->workerNum; i++)        &#123;            if (this->workers[i] != NULL)            &#123;                delete this->workers[i];                this->workers[i] = NULL;            &#125;        &#125;        this->workerNum = 0;        delete[] this->workers;        this->workers = NULL;        this->fileIsEmpty = true;        cout << "文件清空成功" << endl;    &#125;    else    &#123;        // 不执行清空文件操作        cout << "清空文件不执行" << endl;    &#125;    system("pause");    system("cls");&#125;</code></pre><h4 id="Employee-h文件"><a href="#Employee-h文件" class="headerlink" title="Employee.h文件"></a>Employee.h文件</h4><pre class=" language-c++"><code class="language-c++">#pragma once#include<iostream>using namespace std;#include"Worker.h"class Employee : public Worker &#123;public:    // 构造函数    Employee(int id, string name, int deptId);    // 子类实现父类的纯虚函数    // 显示个人信息     void showInfo();    // 获取岗位名称    void getDeptName();    &#125;;</code></pre><h4 id="Employee-cpp文件"><a href="#Employee-cpp文件" class="headerlink" title="Employee.cpp文件"></a>Employee.cpp文件</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<string>using namespace std;#include"Employee.h"Employee::Employee(int id, string name, int deptId) &#123;    this->m_id = id;    this->m_name = name;    this->m_deptId = deptId;&#125;void Employee::showInfo() &#123;    cout << "职工编号：" << this->m_id << "\t" << "职工姓名：" << this->m_name << "\t" << "部门编号：" << this->m_deptId << "\t" << "岗位职责：完成经理下发的任务" << endl;&#125;void Employee::getDeptName() &#123;    &#125;</code></pre><h4 id="Manager-h文件"><a href="#Manager-h文件" class="headerlink" title="Manager.h文件"></a>Manager.h文件</h4><pre class=" language-c++"><code class="language-c++">#pragma once#include"Worker.h"#include<string>// 创建的头文件声明类class Manager :public Worker &#123;public:    Manager(int id, string name, int deptId);        void showInfo();    void getDeptName();&#125;;</code></pre><h4 id="Manager-cpp文件"><a href="#Manager-cpp文件" class="headerlink" title="Manager.cpp文件"></a>Manager.cpp文件</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include"Manager.h"Manager::Manager(int id, string name, int deptId) &#123;    this->m_id = id;    this->m_name = name;    this->m_deptId = deptId;&#125;void Manager::showInfo() &#123;    cout << "职工编号：" << this->m_id << "\t" << "职工姓名：" << this->m_name << "\t" << "部门编号：" << this->m_deptId << "\t" << "岗位职责：给员工分配老板下发的任务" << endl;&#125;void Manager::getDeptName() &#123;&#125;</code></pre><h4 id="Boos-h文件"><a href="#Boos-h文件" class="headerlink" title="Boos.h文件"></a>Boos.h文件</h4><pre class=" language-c++"><code class="language-c++">#pragma once#include"Worker.h"#include<string>class Boos :public Worker &#123;public:    Boos(int id, string name, int deptId);    void showInfo();    void getDeptName();&#125;;</code></pre><h4 id="Boos-cpp文件"><a href="#Boos-cpp文件" class="headerlink" title="Boos.cpp文件"></a>Boos.cpp文件</h4><pre class=" language-c++"><code class="language-c++">#include"Boos.h"using namespace std;Boos::Boos(int id, string name, int deptId) &#123;    this->m_id = id;    this->m_name = name;    this->m_deptId = deptId;&#125;void Boos::showInfo() &#123;    cout << "职工编号：" << this->m_id << "\t" << "职工姓名：" << this->m_name << "\t" << "部门编号：" << this->m_deptId << "\t" << "岗位职责：我是老板" << endl;&#125;void Boos::getDeptName() &#123;&#125;</code></pre><h2 id="评委打分"><a href="#评委打分" class="headerlink" title="评委打分"></a>评委打分</h2><p>案例描述：有5名选手：ABCDE，10个评委分别对每一名选手打分，去除最高分，去除最低分，取平均分</p><p>实现步骤：</p><ol><li><p>创建5名选手，放入vector中</p></li><li><p>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分存到deque容器中</p></li><li><p>sort算法对deque容器中的分数排序，去除最高和最低分</p></li><li><p>deque容器遍历一遍，累加总分，求取平均分</p><pre class=" language-c++"><code class="language-c++">#include<iostream>#include<vector>#include<algorithm>#include<deque>using namespace std;class Person &#123;public:    string m_id;    deque<int> m_scores;public:    Person(string id) &#123;        this->m_id = id;    &#125;&#125;;void test01() &#123;    // 创建 5名选手    Person person01("01");    Person person02("02");    Person person03("03");    Person person04("04");    Person person05("05");    // 将5名选手加入 vector 容器    vector<Person> personVector;    personVector.push_back(person01);    personVector.push_back(person02);    personVector.push_back(person03);    personVector.push_back(person04);    personVector.push_back(person05);    // 遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分存到deque容器中    for (vector<Person>::iterator it = personVector.begin(); it != personVector.end(); it++)    &#123;        // 给每一个选手打分        // 一共有10个评委        for (int i = 0; i < 10; i++)        &#123;            (*it).m_scores.push_back(i + 1);        &#125;        // 对评分进行排序        sort((*it).m_scores.begin(), (*it).m_scores.end());        (*it).m_scores.pop_front(); // 去掉最低分        (*it).m_scores.pop_back(); // 去掉最高分        // 求总分        int sumScore = 0; // 总分        for (deque<int>::iterator i = (*it).m_scores.begin(); i != (*it).m_scores.end(); i++) &#123;            sumScore = sumScore + (*i);        &#125;        // 求平均分        double avgScore = sumScore / 8.0;        cout << "选手：" << (*it).m_id << "的最终得分为：" << avgScore << endl;    &#125;&#125;int main() &#123;    test01();&#125;</code></pre></li></ol><h2 id="基于STL的演讲比赛流程管理系统"><a href="#基于STL的演讲比赛流程管理系统" class="headerlink" title="基于STL的演讲比赛流程管理系统"></a>基于STL的演讲比赛流程管理系统</h2><h4 id="myCompare-h"><a href="#myCompare-h" class="headerlink" title="myCompare.h"></a><strong>myCompare.h</strong></h4><pre class=" language-c++"><code class="language-c++">#pragma once#include"speaker.h"class MyCompare0 &#123;public:    bool operator()(const Speaker& s1, const Speaker& s2);&#125;;class MyCompare1 &#123;public:    bool operator()(const Speaker& s1, const Speaker& s2);&#125;;</code></pre><h4 id="myCompare-cpp"><a href="#myCompare-cpp" class="headerlink" title="myCompare.cpp"></a><strong>myCompare.cpp</strong></h4><pre class=" language-c++"><code class="language-c++">#include"myCompare.h"#include"speechManager.h"bool MyCompare0::operator()(const Speaker& s1, const Speaker& s2) &#123;    return s1.m_score[0] > s2.m_score[0];&#125;bool MyCompare1::operator()(const Speaker& s1, const Speaker& s2) &#123;    return s1.m_score[1] > s2.m_score[1];&#125;</code></pre><h4 id="speaker-h"><a href="#speaker-h" class="headerlink" title="speaker.h"></a><strong>speaker.h</strong></h4><pre class=" language-c++"><code class="language-c++">#pragma once#include<string>using namespace std;class Speaker &#123;public:    string m_id; // 选手编号    double m_score[2]; // 保存两轮的分数 &#125;;</code></pre><h4 id="speechManager-h"><a href="#speechManager-h" class="headerlink" title="speechManager.h"></a><strong>speechManager.h</strong></h4><pre class=" language-c++"><code class="language-c++">#pragma once#include<map>#include<vector>#include"speaker.h"class SpeechManager &#123;public:    // 声明构造函数    SpeechManager();        // 声明菜单    void show_menu();    // 属性初始化    void initSystem();    // 创建12名选手    void createSpeaker();    // 声明退出系统功能    void exitSystem();    // 声明比赛流程控制函数    // 将 存放 12名 选手的容器传入该函数    void contestControl();    // 开始正式比赛    void startContest(vector<Speaker>& vSpeaker);    // 抽签    void randomDraw(vector<Speaker>& vSpeaker);    // 展示比赛结果    void showContestResult(vector<Speaker>& vSpeaker);    // 将前三强写入文件中    void writeTofile();    // 查看往届记录    void readRecord();    // 清空比赛记录    void clearRecord();    // 声明析构函数    ~SpeechManager();    // 存放比赛选手容器    // 存放第一轮比赛的12名选手的容器    vector<Speaker> v1Speaker;    // 记录比赛的进行到了第几轮    int m_index;&#125;;</code></pre><h4 id="speechManager-cpp"><a href="#speechManager-cpp" class="headerlink" title="speechManager.cpp"></a><strong>speechManager.cpp</strong></h4><pre class=" language-c++"><code class="language-c++">#include"speechManager.h"#include<iostream>using namespace std;#include<algorithm>#include<deque>#include<numeric>#include"myCompare.h"#include<fstream>SpeechManager::SpeechManager() &#123;    // 初始化该系统的属性    this->initSystem();    // 创建12名选手    this->createSpeaker();&#125;void SpeechManager::show_menu() &#123;    cout << "*****************************************" << endl;    cout << "************ 欢迎参加演讲比赛 ***********" << endl;    cout << "************ 1.开始演讲比赛 *************" << endl;    cout << "************ 2.查看往届记录 *************" << endl;    cout << "************ 3.清空比赛记录 *************" << endl;    cout << "************ 0.退出比赛程序 *************" << endl;    cout << "*****************************************" << endl;&#125;void SpeechManager::initSystem() &#123;    this->v1Speaker.clear();    this->m_index = 0; // 初始化进行第几轮比赛&#125;// 创建12名选手void SpeechManager::createSpeaker() &#123;    string id_seed = "ABCDEFGHIJKL";    // 给选手分配id，并设置选手的初始成绩均为0    for (int i = 0; i < id_seed.size(); i++)    &#123;        Speaker speaker;        speaker.m_id = id_seed[i];        for (int j = 0; j < 2; j++) // 将选手的两轮得分都设置为0        &#123;            speaker.m_score[j] = 0.0;        &#125;        // 然后将创建的每一个选手放入容器 v1Speaker        v1Speaker.push_back(speaker);    &#125;&#125;void SpeechManager::randomDraw(vector<Speaker>& vSpeaker) &#123;    random_shuffle(vSpeaker.begin(), vSpeaker.end()); // 该函数可以将容器内的元素打乱顺序，起到了抽签的效果    // 显示抽签结果    cout << "第 "<< this->m_index << " 轮比赛抽签，显示抽签结果如下：" << endl;    for (vector<Speaker>::iterator it = vSpeaker.begin(); it != vSpeaker.end(); it++)    &#123;        cout << (*it).m_id << " ";    &#125;    cout << endl;&#125;// 开始正式比赛void SpeechManager::startContest(vector<Speaker>& vSpeaker) &#123;    deque<double> scoreDeque; // 记录某个选手的分数容器    double score; // 记录选手得分的变量    double avg; // 记录选手的平均分    cout << "--------------开始第 " << this->m_index << " 轮比赛----------------" << endl;    for (vector<Speaker>::iterator it = vSpeaker.begin(); it != vSpeaker.end(); it++)    &#123;        // 给容器中的每一名选手打分，共有十名评委        for (int i = 0; i < 10; i++)        &#123;                score = (rand() % 400 + 600) / 10.0f;            // cout << score << " ";            scoreDeque.push_back(score);        &#125;        // cout << endl;        // 去除最高分和最低分        sort(scoreDeque.begin(), scoreDeque.end());        scoreDeque.pop_front();        scoreDeque.pop_back();        // 将剩余的八个分数累加求平均分        avg = accumulate(scoreDeque.begin(), scoreDeque.end(), 0.0f) / (double)scoreDeque.size();        // 将平均分放到 vector<Speaker> 容器中        (*it).m_score[this->m_index - 1] = avg;    &#125;&#125;void SpeechManager::showContestResult(vector<Speaker>& vSpeaker) &#123;    if (this->m_index == 1)    &#123;            // 按照成绩进行排序        sort(vSpeaker.begin(), vSpeaker.end(), MyCompare0());        // 第一轮比赛结束，前六名晋级，排好序以后截取前六名选手即可        cout << "-------------- 六强名单如下：----------------" << endl;        cout << "选手编号" << "\t" << "成绩" << endl;        vSpeaker.resize(6);        // 公式晋级的选手        for (vector<Speaker>::iterator it = vSpeaker.begin(); it != vSpeaker.end(); it++)        &#123;            cout << "   " << (*it).m_id << "\t\t" << (*it).m_score[this->m_index - 1] << endl;        &#125;        cout << endl;    &#125;    else    &#123;        sort(vSpeaker.begin(), vSpeaker.end(), MyCompare1());        // 第二轮比赛结束，得到前三名        cout << "-------------- 三强名单如下：----------------" << endl;        cout << "选手编号" << "\t" << "成绩" << endl;        vSpeaker.resize(3);        for (vector<Speaker>::iterator it = vSpeaker.begin(); it != vSpeaker.end(); it++)        &#123;            cout << "   " << (*it).m_id << "\t\t" << (*it).m_score[this->m_index - 1] << endl;        &#125;        cout << endl;    &#125;&#125;// 将前三强写入文件中void SpeechManager::writeTofile() &#123;    ofstream ofs;    ofs.open("record.csv", ios::out | ios::app);    for (vector<Speaker>::iterator it = v1Speaker.begin(); it != v1Speaker.end(); it++)    &#123;        ofs << (*it).m_id << "," << (*it).m_score[0] << "," << (*it).m_score[1] << endl;    &#125;    ofs << "============================" << endl;    cout << "本届演讲比赛结束" << endl;    ofs.close();&#125;// 比赛控制流程void SpeechManager::contestControl() &#123;    // 第一轮比赛    this->m_index = 1;        // 1.抽签    randomDraw(v1Speaker);    // 2.比赛开始    startContest(v1Speaker);    // 3.显示晋级结果,第一轮比赛以后，前六名选手进入下一轮比赛    showContestResult(v1Speaker);    // 第二轮比赛    this->m_index = 2;    // 1.抽签    randomDraw(v1Speaker);    // 2.比赛    startContest(v1Speaker);    // 3.显示决赛结果    showContestResult(v1Speaker);    // 4.将比赛结果录入文件    writeTofile();    system("pause");    system("cls");&#125;// 查看往届记录void SpeechManager::readRecord() &#123;    ifstream ifs;    ifs.open("record.csv", ios::in);    // 判断文件是否存在    if (!ifs.is_open())    &#123;        cout << "文件不存在，读取失败" << endl;        system("pause");        system("cls");        return;    &#125;    char ch;    ifs >> ch;    // 判断文件存在，但，是否为空    if (ifs.eof()) // ifstream.eof() 读到文件结束符时返回true    &#123;        cout << "文件存在，但为空" << endl;        system("pause");        system("cls");        return;    &#125;    ifs.putback(ch); //将上面读取的ch放回来    string data;    while (getline(ifs, data))    &#123;        cout << data << endl;    &#125;    ifs.close();    system("pause");    system("cls");&#125;// 清空比赛记录void SpeechManager::clearRecord() &#123;    ofstream ofs;    ofs.open("record.csv", ios::trunc);    ofs.close();    this->initSystem();    system("pause");    system("cls");&#125;void SpeechManager::exitSystem() &#123;    cout << "系统退出，欢迎下次使用" << endl;    exit(0);&#125;SpeechManager::~SpeechManager() &#123;&#125;</code></pre><h4 id="主程序-1"><a href="#主程序-1" class="headerlink" title="主程序"></a><strong>主程序</strong></h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include"speechManager.h"#include<ctime>int main() &#123;    srand((unsigned int)time(NULL));    // 系统管理对象    SpeechManager sm;    int choice; // 记录用户的选择    while (true)    &#123;        // 系统管理对象        SpeechManager sm;        sm.show_menu();        cout << "请输入功能选项：";        cin >> choice;        switch (choice)        &#123;        case 1: // 开始演讲比赛            sm.contestControl();            break;        case 2: // 查看往届记录            sm.readRecord();            break;        case 3: // 清空比赛记录            sm.clearRecord();            break;        case 0: // 退出比赛程序            sm.exitSystem();            break;        default:            cout << "输入有误，请重新输入" << endl;            system("pause");            system("cls");            break;        &#125;    &#125;    system("pause"); // 按任意键继续    return 0;&#125;</code></pre><h2 id="机房预约系统"><a href="#机房预约系统" class="headerlink" title="机房预约系统"></a>机房预约系统</h2><h4 id="机房预约系统主程序-cpp"><a href="#机房预约系统主程序-cpp" class="headerlink" title="机房预约系统主程序.cpp"></a>机房预约系统主程序.cpp</h4><pre class=" language-c++"><code class="language-c++">#include<iostream>using namespace std;#include"appointmentManagerPlatform.h"#include"globalFile.h"int main() &#123;    AppointmentManagerPlatform amp;    int identity_Choice; // 记录用户的身份选择    while (true)    &#123;        amp.identity_choice_menu(); // 显示身份选择菜单        cin >> identity_Choice;        switch (identity_Choice)        &#123;        case 1: // 学生代表            amp.login(STUDENT_FILE, 1);            break;        case 2: // 教师            amp.login(TEACHER_FILE, 2);            break;        case 3: // 系统管理员            amp.login(ADMIN_FILE, 3);            break;        case 0: // 系统退出            cout << "系统退出，欢迎下次使用" << endl;            return 0;            break;        default:            cout << "您的输入有误，请重新输入" << endl;            break;        &#125;    &#125;&#125;</code></pre><h4 id="appointmentManagerPlatform-h"><a href="#appointmentManagerPlatform-h" class="headerlink" title="appointmentManagerPlatform.h"></a>appointmentManagerPlatform.h</h4><pre class=" language-c++"><code class="language-c++">#pragma once#include<string>#include"globalFile.h"using namespace std;#include"identity.h"#include"student.h"#include"teacher.h"class AppointmentManagerPlatform &#123;public:// 成员属性// 成员函数    // 登陆前的身份选择菜单    void identity_choice_menu();    // 登录，并验证身份    void login(string file_path, int identity_type);    // 管理员子系统    void into_admin_system(Identity* admin);    // 学生子系统    void into_student_system(Identity* student);    // 老师子系统    void into_teacher_system(Teacher* teacher);&#125;;</code></pre><h4 id="appointmentManagerPlatform-cpp"><a href="#appointmentManagerPlatform-cpp" class="headerlink" title="appointmentManagerPlatform.cpp"></a>appointmentManagerPlatform.cpp</h4><pre class=" language-c++"><code class="language-c++">#include"appointmentManagerPlatform.h"#include<iostream>using namespace std;#include<fstream>#include"identity.h"#include"student.h"#include"teacher.h"#include"administrator.h"// 登陆前的身份选择菜单void AppointmentManagerPlatform::identity_choice_menu() &#123;    cout << "================== 欢迎来到机房预约系统 ==================" << endl;    cout << "\t\t---------------------------" << endl;    cout << "\t\t|                         |" << endl;    cout << "\t\t|       1.学生代表        |" << endl;    cout << "\t\t|                         |" << endl;    cout << "\t\t|       2.教师            |" << endl;    cout << "\t\t|                         |" << endl;    cout << "\t\t|       3.系统管理员      |" << endl;    cout << "\t\t|                         |" << endl;    cout << "\t\t|       0.退出            |" << endl;    cout << "\t\t|                         |" << endl;    cout << "\t\t---------------------------" << endl;    cout << "请输入您的身份：";&#125;// 登录验证void AppointmentManagerPlatform::login(string file_path, int identity_type) &#123;    ifstream ifs;    ifs.open(file_path, ios::in); // 只读方式打开文件    if (!ifs.is_open())    &#123;        cout << "文件打开失败" << endl;        ifs.close(); // 关闭文件流        return;    &#125;    else    &#123;            string id;        string name;        string pwd;        string fid; // 从文件中读取的数据        string fname;        string fpwd;        // 文件存在，进行身份验证        if (identity_type == 1)        &#123;            cout << "请输入学生学号："; cin >> id;            cout << "请输入学生姓名："; cin >> name;            cout << "请输入登录密码："; cin >> pwd;            // 进行学生身份验证            while (ifs >> fid && ifs >> fname && ifs >> fpwd)            &#123;                //cout << fid << endl;                //cout << fname << endl;                //cout << fpwd << endl; 要将文本文件的编码格式改为 ansi，否则会读出乱码                if (fid == id && fname == name && fpwd == pwd) &#123;                    cout << "身份验证成功，欢迎使用" << endl;                    ifs.close();                    system("pause");                    system("cls");                    // 进入学生子系统页面                    Identity* student = new Student(id, name, pwd);                    into_student_system(student);                    delete student;                    return;                &#125;            &#125;        &#125;        else if (identity_type == 2)        &#123;            cout << "请输入教师编号："; cin >> id;            cout << "请输入教师姓名："; cin >> name;            cout << "请输入登录密码："; cin >> pwd;                    // 进行教师身份验证            while (ifs >> fid && ifs >> fname && ifs >> fpwd)            &#123;                if (fid == id && fname == name && fpwd == pwd) &#123;                    cout << "身份验证成功，欢迎使用" << endl;                    ifs.close();                    system("pause");                    system("cls");                    // 进入教师子系统页面                    Teacher* teacher = new Teacher(id, name, pwd);                    into_teacher_system(teacher);                    delete teacher;                    return;                &#125;            &#125;        &#125;        else if (identity_type == 3)        &#123;            cout << "请输入管理员编号："; cin >> id;            cout << "请输入管理员姓名："; cin >> name;            cout << "请输入登录密码："; cin >> pwd;                    // 进行管理员身份验证            while (ifs >> fid && ifs >> fname && ifs >> fpwd)            &#123;                if (fid == id && fname == name && fpwd == pwd) &#123;                    cout << "身份验证成功，欢迎使用" << endl;                    ifs.close();                    system("pause");                    system("cls");                                        // 进入管理员子系统                    Identity* admin = new Administrator(id, name, pwd);                    into_admin_system(admin);                    delete admin;                    return;                &#125;            &#125;        &#125;        cout << "身份验证失败，请重新登录" << endl;        system("pause");        system("cls");        ifs.close();    &#125;&#125;// 管理员子系统void AppointmentManagerPlatform::into_admin_system(Identity* admin) &#123;    Administrator* administrator = (Administrator*)admin;    int choice;    while (true)    &#123;        // 管理员子系统的界面        administrator->sub_menu();        cin >> choice;        switch (choice)        &#123;        case 1: // 添加用户            administrator->add_user();            break;        case 2: // 查看用户            administrator->check_user();            break;        case 3: // 查看机房            administrator->check_machineRoom();            break;        case 4: // 清空预约            administrator->clean_appointmentRecord();            break;        case 0: // 注销登录            cout << "退出登录，欢迎下次使用" << endl;            system("pause");            system("cls");            return;        default:            cout << "输入有误，请重新输入" << endl;            system("pause");            system("cls");            break;        &#125;    &#125;&#125;// 学生系统void AppointmentManagerPlatform::into_student_system(Identity* stu) &#123;    Student* student = (Student*)stu;    int choice;    while (true)    &#123;        student->sub_menu();        cin >> choice;        switch (choice)        &#123;        case 1: // 申请预约            student->apply_appointment();            break;        case 2: // 查看我的预约            student->check_appointment();            break;        case 3: // 查看所有预约            student->check_all_appointment();            break;        case 4: // 取消预约            student->cancel_appointment();            break;        case 0: // 注销登录            cout << "退出登录，欢迎下次使用" << endl;            system("pause");            system("cls");            return;        default:            cout << "输入有误，请重新输入" << endl;            system("pause");            system("cls");            break;        &#125;    &#125;&#125;// 老师子系统void AppointmentManagerPlatform::into_teacher_system(Teacher* teacher) &#123;    int choice;    while (true)    &#123;        teacher->sub_menu();        cin >> choice;                switch (choice)        &#123;        case 1: // 查看所有预约            teacher->check_all_appointment();            break;        case 2: // 审核预约            teacher->review_appointment();            break;        case 0: // 注销登录            cout << "退出登录，欢迎下次使用" << endl;            system("pause");            system("cls");            return;        default:            cout << "输入有误，请重新输入" << endl;            system("pause");            system("cls");            break;        &#125;    &#125;&#125;</code></pre><h4 id="administrator-h"><a href="#administrator-h" class="headerlink" title="administrator.h"></a>administrator.h</h4><pre class=" language-c++"><code class="language-c++">#pragma once#include"identity.h"#include<fstream>#include<iostream>#include"globalFile.h"class Administrator :public Identity &#123;public:    // 成员属性    string Administrator_id;    // 成员函数    Administrator(); // 默认构造函数    Administrator(string id, string name, string pwd); // 有参构造    void sub_menu(); // 管理员子菜单    void add_user(); // 添加用户    void check_user(); // 查看用户    void check_machineRoom(); // 查看机房    void clean_appointmentRecord(); // 清空预约记录&#125;;</code></pre><h4 id="administrator-cpp"><a href="#administrator-cpp" class="headerlink" title="administrator.cpp"></a>administrator.cpp</h4><pre class=" language-c++"><code class="language-c++">#include"administrator.h"Administrator::Administrator() &#123; // 默认构造函数&#125;Administrator::Administrator(string id, string name, string pwd) &#123; // 有参构造    this->Administrator_id = id;    this->m_name = name;    this->m_pwd = pwd;&#125;void Administrator::sub_menu() &#123; // 管理员子菜单    cout << "欢迎管理员：" << this->m_name << "使用" << endl;    cout << "\t\t-----------------------------------" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           1.添加用户            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           2.查看用户            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           3.查看机房            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           4.清空预约            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           0.注销登录            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t-----------------------------------" << endl;    cout << "请输入您要执行的功能：";&#125;void Administrator::add_user() &#123; // 添加用户    cout << "1.学生" << endl;    cout << "2.教师" << endl;    cout << "请输入添加用户的类型：";    int choice;    cin >> choice; // 记录要添加的用户的类型    string id;    string name;    string pwd;    fstream fs;    string data;    string fid;    string fname;    string fpwd;    if (choice == 1)    &#123;        // 打开学生文件        fs.open(STUDENT_FILE, ios::in);        cout << "请输入新增学生的学号："; cin >> id;        cout << "请输入新增学生的姓名："; cin >> name;        cout << "请输入新增学生的密码："; cin >> pwd;        // 查重        while (fs >> fid && fs >> fname && fs >> fpwd) &#123;            if (fid == id)            &#123;                // 说明文件中已经存在该用户，则拒绝添加该用户                cout << "该用户已经存在，无需添加" << endl;                fs.close();                system("pause");                system("cls");                return;            &#125;        &#125;        fs.close();        // 在fstream进行读写操作时要将读和写分开写，读写之前分别打开和关闭文件        fs.open(STUDENT_FILE, ios::app);        fs << id << " " << name << " " << pwd << endl;        fs.close();        system("pause");        system("cls");    &#125;    else if (choice == 2)    &#123;        // 打开教师文件        fs.open(TEACHER_FILE, ios::in);        cout << "请输入新增教师的编号："; cin >> id;        cout << "请输入新增教师的姓名："; cin >> name;        cout << "请输入新增教师的密码："; cin >> pwd;        // 查重        while (fs >> fid && fs >> fname && fs >> fpwd) &#123;            if (fid == id)            &#123;                // 说明文件中已经存在该用户，则拒绝添加该用户                cout << "该用户已经存在，无需添加" << endl;                fs.close();                system("pause");                system("cls");                return;            &#125;        &#125;        fs.close();        fs.open(TEACHER_FILE, ios::app);        fs << id << " " << name << " " << pwd << endl;        fs.close();        system("pause");        system("cls");    &#125;&#125;void Administrator::check_user() &#123; // 查看用户    cout << "1.学生" << endl;    cout << "2.教师" << endl;    cout << "请输入要查看的用户类型：";    int choice;    cin >> choice;    ifstream ifs;    string data;    if (choice == 1)    &#123;        ifs.open(STUDENT_FILE, ios::in);        while (getline(ifs, data))        &#123;            cout << data << endl;        &#125;    &#125;    else if (choice == 2)    &#123;        ifs.open(TEACHER_FILE, ios::in);        while (getline(ifs, data))        &#123;            cout << data << endl;        &#125;    &#125;    ifs.close();    system("pause");    system("cls");&#125;void Administrator::check_machineRoom() &#123; // 查看机房    ifstream ifs;    ifs.open(MACHINE_ROOM_FILE, ios::in);        cout << "机房状态如下：" << endl;    string data;    while (getline(ifs, data))    &#123;        cout << data << endl;    &#125;    ifs.close();    system("pause");    system("cls");&#125;void Administrator::clean_appointmentRecord() &#123; // 清空预约记录    ofstream ofs(APPOINTMENT_FILE, ios::trunc);    ofs.close();    cout << "清空预约记录成功" << endl;    system("pause");    system("cls");&#125;</code></pre><h4 id="student-h"><a href="#student-h" class="headerlink" title="student.h"></a>student.h</h4><pre class=" language-c++"><code class="language-c++">#pragma once#include"identity.h"#include"globalFile.h"#include<fstream>#include<map>#include<vector>class Student :public Identity &#123;public:    // 成员属性    string student_id; // 学号    // 成员函数    Student(); // 默认无参构造    Student(string id, string name, string pwd); // 有参构造：学号、姓名、密码    void sub_menu(); // 实现抽象类的子菜单函数    void apply_appointment(); // 申请预约    void check_appointment(); // 查看预约    void check_all_appointment(); // 查看所有人的预约    void cancel_appointment(); // 取消预约    bool test_appointment(int day, int interval, int roomId); // 检验该时间是否可以预约机房&#125;;</code></pre><h4 id="student-cpp"><a href="#student-cpp" class="headerlink" title="student.cpp"></a>student.cpp</h4><pre class=" language-c++"><code class="language-c++">#include"student.h"using namespace std;#include<iostream>Student::Student() &#123; // 默认无参构造&#125; Student::Student(string id, string name, string pwd) &#123; // 有参构造：学号、姓名、密码    this->student_id = id;    this->m_name = name;    this->m_pwd = pwd;&#125;void Student::sub_menu() &#123; // 实现抽象类的子菜单函数    cout << "欢迎学生代表：" << this->m_name << "使用" << endl;    cout << "\t\t-----------------------------------" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           1.申请预约            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           2.查看我的预约        |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           3.查看所有预约        |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           4.取消预约            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           0.注销登录            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t-----------------------------------" << endl;    cout << "请输入您要执行的功能：";&#125; void Student::apply_appointment() &#123; // 申请预约    // 确定周几    int day;    while (true)    &#123;        cout << "请输入预约时间:" << endl;        cout << "1.周一" << endl;        cout << "2.周二" << endl;        cout << "3.周三" << endl;        cout << "4.周四" << endl;        cout << "5.周五" << endl;        cout << "您要预约的周几？";        cin >> day;        if (day >= 1 && day <= 5) &#123;            break;        &#125;        cout << "输入有误，请重新输入" << endl;    &#125;    // 确定时间段    int interval;    while (true)    &#123;        cout << "请选择时间段：" << endl;        cout << "1.上午" << endl;        cout << "2.下午" << endl;        cout << "您要预约的时间段是：";        cin >> interval;        if (interval >= 1 && interval <= 2)        &#123;            break;        &#125;        cout << "输入有误，请重新输入" << endl;    &#125;    // 确定预约的机房    int roodId;    cout << "以下是机房信息:" << endl;    ifstream ifs(MACHINE_ROOM_FILE, ios::in);    string fid;    string room_capacity;    while (ifs >> fid && ifs >> room_capacity) &#123;        cout << fid << "号机房容量为：" << room_capacity << endl;    &#125;    ifs.close();    cout << "您要选择的机房是：";    cin >> roodId;    // 检查预约是否重复    // 若机房可预约，则返回 true,否则返回false    bool flag;    flag = test_appointment(day, interval, roodId);    if (flag)    &#123;        cout << "预约成功，待教师审核" << endl;        // 将预约信息写入预约文件        ofstream ofs(APPOINTMENT_FILE, ios::app);        ofs << "预约日期：" << day << " ";        ofs << "预约时间：" << interval << " ";        ofs << "预约机房id：" << roodId << " ";        ofs << "学生学号：" << this->student_id << " ";        ofs << "学生姓名：" << this->m_name << " ";        ofs << "机房状态：" << "待审核" << endl;        ofs.close();    &#125;    else    &#123;        cout << "预约失败，可以查看预约记录，重新预约" << endl;    &#125;    system("pause");    system("cls");&#125;void Student::check_appointment() &#123; // 查看我的预约    string fday;    string finterval;    string froomId;    string stuId;    string stuName;    string status;    bool flag = false;    string strId = "学生学号：";    strId += this->student_id;    ifstream ifs(APPOINTMENT_FILE, ios::in);    cout << "您的预约记录如下：" << endl;    while (ifs >> fday && ifs >> finterval && ifs >> froomId && ifs >> stuId && ifs >> stuName && ifs >> status)    &#123;        if (stuId == strId)        &#123;            cout << fday << " " << finterval << " " << froomId << " " << status << endl;            flag = true;        &#125;    &#125;    if (!flag)    &#123;        cout << "您的预约记录为空！" << endl;    &#125;    ifs.close();    system("pause");    system("cls");&#125; void Student::check_all_appointment() &#123; // 查看所有人的预约    cout << "所有预约记录如下：" << endl;    string fday;    string finterval;    string froomId;    string stuId;    string stuName;    string status;    ifstream ifs(APPOINTMENT_FILE, ios::in);    char ch; // 用于读取文件的第一个字符    ifs >> ch;    if (ifs.eof())    &#123;        cout << "当前预约记录为空" << endl;        ifs.close();        system("pause");        system("cls");        return;    &#125;    ifs.putback(ch); //将上面读取的ch放回来    while (ifs >> fday && ifs >> finterval && ifs >> froomId && ifs >> stuId && ifs >> stuName && ifs >> status)    &#123;        cout << fday << " " << finterval << " " << froomId << " " << status << endl;    &#125;    ifs.close();    system("pause");    system("cls");&#125; void Student::cancel_appointment() &#123; // 取消预约    // 也就是删除我的某条预约记录    map<int, string> map_appointment;    string appointment_data;    int index = 0;    ifstream ifs(APPOINTMENT_FILE, ios::in);    while (getline(ifs, appointment_data))    &#123;        index++;        map_appointment.insert(make_pair(index, appointment_data));    &#125;    ifs.close();    string strName = "学生姓名：";    strName += this->m_name;    int i = -1;    map<int, string> map_this_stu; // 记录了一位同学的预约记录    vector<int> erase_appointment_index;    for (map<int, string>::iterator it = map_appointment.begin(); it != map_appointment.end(); it++)    &#123;        i = (*it).second.find(strName, 0);        if (i != -1)        &#123;            // 说明找到了该同学的预约记录            // 将该条记录写入新的容器，此容器只记录了该同学的预约记录            map_this_stu.insert(make_pair((*it).first, (*it).second));            // 同时将大的预约容器中关于该同学的记录删除，以便之后的重新插入            erase_appointment_index.push_back((*it).first);        &#125;        i = -1; // 将 i 再次设置为 0    &#125;    // 在大容器 map_appointment 中删除该同学的预约记录    for (vector<int>::iterator it = erase_appointment_index.begin(); it != erase_appointment_index.end(); it++)    &#123;        map_appointment.erase((*it));    &#125;    for (map<int, string>::iterator it = map_this_stu.begin(); it != map_this_stu.end(); it++)    &#123;        cout << (*it).first << " " << (*it).second << endl;    &#125;    cout << "请选择你要删除的预约：";    int choice; cin >> choice;    map_this_stu.erase(choice);    // 将 map_this_stu 容器中的预约数据 加入 map_appointment    for (map<int, string>::iterator it = map_this_stu.begin(); it != map_this_stu.end(); it++)    &#123;        map_appointment.insert(make_pair((*it).first, (*it).second));    &#125;    // 将map_appointment写入文件    ofstream ofs(APPOINTMENT_FILE, ios::out);    for (map<int, string>::iterator it = map_appointment.begin(); it != map_appointment.end(); it++)    &#123;        ofs << (*it).second << endl;    &#125;    ofs.close();    system("pause");    system("cls");&#125;// 检验机房是否可以预约bool Student::test_appointment(int day, int interval, int roomId) &#123;    char ch;        ch = day + '0';  // int -> char    string strDay = "预约日期：";    strDay += ch; // char 与 字符串拼接    ch = interval + '0';    string strInterval = "预约时间：";    strInterval += ch;    ch = roomId + '0';    string strRoomId = "预约机房id：";    strRoomId += ch;    string fday;    string finterval;    string froomId;    string stuId;    string stuName;    string status;    ifstream ifs(APPOINTMENT_FILE, ios::in);    while (ifs >> fday && ifs >> finterval && ifs >> froomId && ifs >> stuId && ifs >> stuName && ifs >> status) &#123;        if (strDay == fday && strInterval == finterval && strRoomId == froomId)        &#123;            cout << "该机房已经在该该时间段预约，请重新预约" << endl;            ifs.close();            return false;        &#125;    &#125;    ifs.close();    return true;&#125;</code></pre><h4 id="teacher-h"><a href="#teacher-h" class="headerlink" title="teacher.h"></a>teacher.h</h4><pre class=" language-c++"><code class="language-c++">#pragma once#include"identity.h"#include<fstream>#include"globalFile.h"#include<map>class Teacher :public Identity &#123;public:    // 成员属性    string teacher_id;    // 成员函数    Teacher(); // 默认构造    Teacher(string id, string name, string pwd); // 有参构造：教师编号、姓名、密码    void sub_menu(); // 教师子菜单    void check_all_appointment(); // 查看所有预约    void review_appointment(); // 审核预约&#125;;</code></pre><h4 id="teacher-cpp"><a href="#teacher-cpp" class="headerlink" title="teacher.cpp"></a>teacher.cpp</h4><pre class=" language-c++"><code class="language-c++">#include"teacher.h"Teacher::Teacher() &#123; // 默认构造&#125; Teacher::Teacher(string id, string name, string pwd) &#123; // 有参构造：教师编号、姓名、密码    this->teacher_id = id;    this->m_name = name;    this->m_pwd = pwd;&#125; void Teacher::sub_menu() &#123; // 教师子菜单    cout << "欢迎教师：" << this->m_name << "使用" << endl;    cout << "\t\t-----------------------------------" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           1.查看所有预约        |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           2.审核预约            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t|           0.注销登录            |" << endl;    cout << "\t\t|                                 |" << endl;    cout << "\t\t-----------------------------------" << endl;    cout << "请输入您要执行的功能：";&#125; void Teacher::check_all_appointment() &#123; // 查看所有预约    cout << "所有预约记录如下：" << endl;    string fday;    string finterval;    string froomId;    string stuId;    string stuName;    string status;    ifstream ifs(APPOINTMENT_FILE, ios::in);    char ch; // 用于读取文件的第一个字符    ifs >> ch;    if (ifs.eof())    &#123;        cout << "当前预约记录为空" << endl;        ifs.close();        system("pause");        system("cls");        return;    &#125;    ifs.putback(ch); //将上面读取的ch放回来    while (ifs >> fday && ifs >> finterval && ifs >> froomId && ifs >> stuId && ifs >> stuName && ifs >> status)    &#123;        cout << fday << " " << finterval << " " << froomId << " " << status << endl;    &#125;    ifs.close();    system("pause");    system("cls");&#125;void Teacher::review_appointment() &#123; // 审核预约    // 预约有两种状态    // 待审核、审核通过    // 只显示需要审核的预约信息    map<int, string> map_appointment;    string str_appointment;    int index = 0;    ifstream ifs(APPOINTMENT_FILE, ios::in);    while (getline(ifs, str_appointment))    &#123;        index++;        map_appointment.insert(make_pair(index, str_appointment));    &#125;    ifs.close();    for (map<int, string>::iterator it = map_appointment.begin(); it != map_appointment.end(); it++)    &#123;        cout << (*it).first << " " << (*it).second << endl;    &#125;    cout << "您想要审核的预约记录是：";    int choice; cin >> choice;    map<int, string>::iterator modifyData =  map_appointment.find(choice);    int i = (*modifyData).second.find("待审核");    (*modifyData).second.replace(i, 10, "审核通过");    ofstream ofs(APPOINTMENT_FILE, ios::out);    for (map<int, string>::iterator it = map_appointment.begin(); it != map_appointment.end(); it++)    &#123;        ofs << (*it).second << endl;    &#125;    ofs.close();    system("pause");    system("cls");&#125;</code></pre><h4 id="globalFile-h"><a href="#globalFile-h" class="headerlink" title="globalFile.h"></a>globalFile.h</h4><pre class=" language-c++"><code class="language-c++">#pragma once// 管理员文件#define ADMIN_FILE "admin.txt"// 学生文件#define STUDENT_FILE "student.txt"// 教师文件#define TEACHER_FILE "teacher.txt"// 机房信息文件#define MACHINE_ROOM_FILE "machineRoom.txt"// 预约文件#define APPOINTMENT_FILE "appointment.txt"</code></pre><h4 id="identity-h"><a href="#identity-h" class="headerlink" title="identity.h"></a>identity.h</h4><pre class=" language-c++"><code class="language-c++">#pragma once#include<string>#include<iostream>using namespace std;// 学生代表、教师、管理员的身份抽象基类// 该类中只要有一个虚函数，该类就为抽象类，无法实例化对象，因此只写 .h 文件声明该基类即可class Identity &#123;public:    // 成员属性    string m_name;    string m_pwd;    // 成员函数    // 子菜单，纯虚函数，实现多态，实现不同身份对应的不同子菜单    virtual void sub_menu() = 0;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++初级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/030716107.html"/>
      <url>/2022/030716107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
